{
    "runner.py": [
        {
            "type": "ClassDef",
            "name": "Runner",
            "md_content": [
                "**Runner**: Runner \u7c7b\u7684\u529f\u80fd\u662f\u81ea\u52a8\u5316\u751f\u6210\u548c\u66f4\u65b0\u4ee3\u7801\u6587\u4ef6\u7684\u6587\u6863\uff0c\u5e76\u652f\u6301\u591a\u7ebf\u7a0b\u5904\u7406\u4ee5\u63d0\u9ad8\u6548\u7387\u3002\n\n**\u5c5e\u6027(attributes)**:  \n\u00b7 `max_threads`: \u63a7\u5236\u591a\u7ebf\u7a0b\u4efb\u52a1\u7684\u6700\u5927\u5e76\u53d1\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a5\u3002  \n\u00b7 `is_success`: \u6807\u8bb0Runner\u5b9e\u4f8b\u662f\u5426\u6210\u529f\u521d\u59cb\u5316\u6216\u6267\u884c\u4efb\u52a1\uff0c\u5e03\u5c14\u7c7b\u578b\u3002  \n\u00b7 `target_file_dir`: \u76ee\u6807\u4ee3\u7801\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002  \n\u00b7 `target_repo_path`: \u76ee\u6807\u4ee3\u7801\u4ed3\u5e93\u7684\u6839\u76ee\u5f55\u8def\u5f84\u3002  \n\u00b7 `target_code_name`: \u4ece`target_file_dir`\u89e3\u6790\u51fa\u7684\u76ee\u6807\u4ee3\u7801\u6587\u4ef6\u540d\uff08\u4e0d\u542b\u8def\u5f84\uff09\u3002  \n\u00b7 `target_code_dirs`: \u76ee\u6807\u4ee3\u7801\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u7684\u4e0a\u7ea7\u8def\u5f84\u3002  \n\u00b7 `target_code_json`: \u751f\u6210\u7684\u6587\u6863\u8bb0\u5f55JSON\u6587\u4ef6\u8def\u5f84\uff0c\u4f4d\u4e8e\u4ed3\u5e93\u7684`target_doc_record`\u76ee\u5f55\u4e0b\u3002  \n\u00b7 `target_file`: FileHandler\u5b9e\u4f8b\uff0c\u7528\u4e8e\u6587\u4ef6\u64cd\u4f5c\u3002  \n\u00b7 `target_meta`: MetaInfo\u5b9e\u4f8b\uff0c\u5b58\u50a8\u4ee3\u7801\u5143\u6570\u636e\u53ca\u6587\u6863\u751f\u6210\u72b6\u6001\u3002  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \nRunner\u7c7b\u901a\u8fc7\u89e3\u6790\u76ee\u6807\u4ee3\u7801\u6587\u4ef6\uff0c\u751f\u6210\u7ed3\u6784\u5316\u6587\u6863\uff08JSON\u548cMarkdown\u683c\u5f0f\uff09\uff0c\u5e76\u652f\u6301\u589e\u91cf\u66f4\u65b0\u3002\u5176\u6838\u5fc3\u6d41\u7a0b\u5982\u4e0b\uff1a  \n1. **\u521d\u59cb\u5316**\uff1a  \n   - \u89e3\u6790\u6587\u4ef6\u8def\u5f84\uff0c\u521d\u59cb\u5316`FileHandler`\u52a0\u8f7d\u4ee3\u7801\u4fe1\u606f\u3002  \n   - \u82e5\u76ee\u6807\u6587\u4ef6\u65e0\u53ef\u751f\u6210\u5185\u5bb9\uff08`target_info_list`\u4e3a\u7a7a\uff09\uff0c\u5219\u6807\u8bb0\u5931\u8d25\u3002  \n   - \u4f7f\u7528`MetaInfo`\u5b58\u50a8\u4ee3\u7801\u5143\u6570\u636e\uff08\u5982\u7c7b\u3001\u51fd\u6570\u5b9a\u4e49\u3001\u5f15\u7528\u5173\u7cfb\uff09\u3002  \n\n2. **\u9996\u6b21\u751f\u6210\u6587\u6863**\uff1a  \n   - \u8c03\u7528`first_generation`\u4fdd\u5b58\u5143\u6570\u636e\u81f3JSON\uff0c\u901a\u8fc7`generate_docs`\u591a\u7ebf\u7a0b\u751f\u6210\u6587\u6863\u5185\u5bb9\uff0c\u6700\u7ec8\u8f6c\u6362\u4e3aMarkdown\u6587\u4ef6\u3002  \n\n3. **\u6587\u6863\u66f4\u65b0**\uff1a  \n   - `docs_update`\u65b9\u6cd5\u5bf9\u6bd4\u65b0\u65e7\u4ee3\u7801\u5143\u6570\u636e\uff0c\u8bc6\u522b\u589e\u5220\u6539\u90e8\u5206\u3002  \n   - \u4ec5\u5bf9\u4fee\u6539\u6216\u65b0\u589e\u7684\u4ee3\u7801\u5355\u5143\u8c03\u7528`generate_docs`\u91cd\u65b0\u751f\u6210\u6587\u6863\uff0c\u4f18\u5316\u6027\u80fd\u3002  \n\n4. **\u591a\u7ebf\u7a0b\u5904\u7406**\uff1a  \n   - `generate_docs`\u521b\u5efa\u4efb\u52a1\u961f\u5217\uff0c\u4f7f\u7528`worker`\u7ebf\u7a0b\u5e76\u884c\u5904\u7406`TargetItem`\u5bf9\u8c61\u3002  \n   - \u6bcf\u4e2a\u7ebf\u7a0b\u8c03\u7528`generate_for_single_item`\u4e0eAI\u6a21\u578b\u4ea4\u4e92\u751f\u6210\u6587\u6863\u5185\u5bb9\uff0c\u5e76\u66f4\u65b0\u72b6\u6001\u3002  \n\n5. **\u72b6\u6001\u7ba1\u7406**\uff1a  \n   - `TargetItem`\u7684\u72b6\u6001\uff08\u5982`doc_up_to_date`\uff09\u7528\u4e8e\u8ddf\u8e2a\u6587\u6863\u662f\u5426\u9700\u8981\u66f4\u65b0\u3002  \n   - \u5f02\u5e38\u5904\u7406\u786e\u4fdd\u4efb\u52a1\u5931\u8d25\u65f6\u6807\u8bb0\u72b6\u6001\uff0c\u907f\u514d\u963b\u585e\u6574\u4f53\u6d41\u7a0b\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u786e\u4fdd`target_file_dir`\u548c`target_repo_path`\u8def\u5f84\u5b58\u5728\u4e14\u6709\u6548\uff0c\u5426\u5219\u521d\u59cb\u5316\u53ef\u80fd\u5931\u8d25\u3002  \n2. `max_threads`\u503c\u9700\u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u8c03\u6574\uff0c\u8fc7\u9ad8\u53ef\u80fd\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002  \n3. \u4f9d\u8d56\u5916\u90e8\u7c7b`FileHandler`\u548c`MetaInfo`\uff0c\u9700\u786e\u4fdd\u5176\u6b63\u786e\u5b9e\u73b0\u6587\u4ef6\u89e3\u6790\u4e0e\u5143\u6570\u636e\u7ba1\u7406\u529f\u80fd\u3002  \n4. \u66f4\u65b0\u903b\u8f91\u4f9d\u8d56JSON\u6587\u4ef6\u8bb0\u5f55\u5386\u53f2\u72b6\u6001\uff0c\u5220\u9664\u6216\u7be1\u6539\u8be5\u6587\u4ef6\u5c06\u5bfc\u81f4\u5168\u91cf\u91cd\u65b0\u751f\u6210\u3002  \n5. \u82e5AI\u6a21\u578b\uff08`ChatEngine`\uff09\u8fd4\u56de\u7a7a\u5185\u5bb9\uff0c\u76f8\u5173`TargetItem`\u72b6\u6001\u5c06\u6807\u8bb0\u4e3a\u672a\u751f\u6210\uff0c\u9700\u4eba\u5de5\u4ecb\u5165\u68c0\u67e5\u3002  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n```\n\u68c0\u6d4b\u5230 example.py \u7b2c\u4e00\u6b21\u751f\u6210\u6587\u6863\uff0c\u6b63\u5728\u751f\u6210\u4e2d......  \n[example.py]\u521d\u59cb\u5316\u5b8c\u6210 \u5f00\u59cb\u8fd0\u884c  \n\u68c0\u6d4b\u5230 example.py \u5171\u8ba1\u4efb\u52a1 8 \u4e2a\u3002  \n example.py \u7b2c 1/8 \u4e2a\u8be2\u95ee\u4efb\u52a1\u6b63\u5728\u8fdb\u884c\u3002  \n example.py \u7b2c 1/8 \u4e2a\u8be2\u95ee\u4efb\u52a1\u5df2\u5b8c\u6210\u3002  \n...  \n\u5b8c\u6210\u6587\u6863\u66f4\u65b0\uff0c\u6b63\u5728\u5199\u5165json  \n\u5b8c\u6210json\u66f4\u65b0\uff0c\u6b63\u5728\u66f4\u65b0md  \n```"
            ],
            "code_start_line": 12,
            "code_end_line": 219,
            "params": [],
            "have_return": true,
            "code_content": "class Runner:\n\n    def __init__(self, target_file_dir, target_repo_path):\n\n        self.max_threads = 5\n        self.is_success = True\n        self.target_file_dir = target_file_dir\n        self.target_repo_path = target_repo_path\n        self.target_code_name = target_file_dir.split(os.path.sep)[-1]\n        self.target_code_dirs = os.path.sep.join(target_file_dir.split(os.path.sep)[0:-1])\n\n        self.target_code_json = os.path.join(self.target_repo_path, \"target_doc_record\",\n                                             self.target_code_name.replace(\".py\", \".json\"))\n        self.target_file = FileHandler(target_file_dir=self.target_file_dir, target_repo_path=self.target_repo_path)\n        if len(self.target_file.target_info_list) == 0:\n            print(f\"\u6587\u4ef6 {self.target_code_name} \u65e0\u53ef\u751f\u6210\u6587\u6863.\")\n            self.is_success = False\n            return\n\n        self.target_meta = MetaInfo()\n\n        self.target_meta.init_meta_info(repo_path=self.target_code_dirs, target_path=self.target_code_name,\n                                        target_info_list=self.target_file.target_info_list)\n\n        print(f\"[{self.target_code_name}]\u521d\u59cb\u5316\u5b8c\u6210 \u5f00\u59cb\u8fd0\u884c\")\n\n    def save_into_json(self):\n        target_info_dict = self.target_meta.from_target_to_dictlist()\n        # \u4fdd\u5b58\u81f3json\u6587\u4ef6\n        self.target_file.to_target_json_file(target_info_dict)\n\n    @staticmethod\n    def generate_for_single_item(target_obj_item: TargetItem, lock):\n        chat = ChatEngine()\n        message = chat.generate_doc(target_obj_item)\n        #             \u5148\u628amessage\u5b58\u5230mdcontent\u91cc\uff0c\u540e\u9762\u53ef\u80fd\u9700\u8981\u8f6c\u5316\u540e\u5b58\u50a8\n\n        if message:\n            target_obj_item.save_md_content(message)\n            target_obj_item.update_item_status(TargetItemStatus.doc_up_to_date)\n        else:\n            target_obj_item.save_md_content()\n            target_obj_item.update_item_status(TargetItemStatus.doc_has_not_been_generated)\n            raise ValueError\n\n    def generate_docs(self, target_obj_list: List[TargetItem]):\n\n        def worker(task_queue, lock, input_list):\n            while True:\n                try:\n\n                    index = task_queue.get_nowait()  # \u4ece\u961f\u5217\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15\n                except Empty:\n                    break\n\n                try:\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u6b63\u5728\u8fdb\u884c\u3002\")\n                    self.generate_for_single_item(input_list[index], lock)\n                    task_queue.task_done()\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u5df2\u5b8c\u6210\u3002\")\n\n                except ValueError as ve:\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u8be2\u95ee\u5931\u8d25\")\n                    task_queue.task_done()\n                    continue\n\n                except Exception as e:\n                    print(f\"error from {self.target_code_name} \", e)\n                    break  # \u961f\u5217\u4e3a\u7a7a\u65f6\u9000\u51fa\n\n        max_threads = self.max_threads\n        task_queue = Queue()\n        lock = threading.Lock()\n        task_num = len(target_obj_list)\n        for index in range(task_num):\n            task_queue.put(index)\n        print(f\"\u68c0\u6d4b\u5230 {self.target_code_name} \u5171\u8ba1\u4efb\u52a1 {task_num} \u4e2a\u3002\")\n        threads = []\n        for _ in range(max_threads):\n            thread = threading.Thread(target=worker, args=(task_queue, lock, target_obj_list), )\n            thread.start()\n            threads.append(thread)\n\n        task_queue.join()\n\n    def first_generation(self):\n        self.save_into_json()\n\n        self.generate_docs(self.target_meta.target_obj_list)\n\n        self.save_into_json()\n        self.target_file.convert_to_markdown(self.target_meta.target_obj_list)\n\n\n    def docs_update(self):\n        '''\n                   \u82e5\u4e3a\u6587\u6863\u66f4\u65b0\u5219\u9700\u8981\u8003\u8651\u6e90\u4ee3\u7801\u7684\u589e\u5220\u6539\uff0c\n                   \u7ef4\u62a4\u4e00\u4e2a\u5f85\u66f4\u65b0dict\uff0c\u5b58\u50a8\u5728\u539flist\u4e2d\u7684index\u548cvalue\n                    \u6309\u7167dict\u53bbchat\uff0c\u8fd4\u56de\u503c\u6309\u7167index\u5b58\u50a8\n                   \u91cd\u65b0parse\u4ee3\u7801\u6587\u4ef6\uff0c\u4e0e\u73b0\u6709info\u6bd4\u8f83,\u83b7\u53d6item\u2014\u2014status\uff1a\n\n                    \u5148\u5904\u7406\u589e\u5220\u6539\u60c5\u51b5\n                   \u5bf9\u4e8e\u589e\u52a0\uff1a\u76f4\u63a5\u8be2\u95ee\u6240\u6709\u65b0\u589e\u7684\u4ee3\u7801\u7684doc\uff0c\n                    \u5bf9\u4e8e\u4fee\u6539\uff0c\u4ee3\u7801\u5185\u5bb9\u6539\u53d8\u5e76\u91cd\u65b0\u5206\u6790\u5f15\u7528\u60c5\u51b5\uff0c\u7136\u540e\u8be2\u95eedoc\n                    \u5982\u4f55\u5b9a\u4e49\u4fee\u6539\uff1atype name\u76f8\u540c\u5219\u8ba4\u4e3a\u4e3a\u5df2\u5b58\u5728item\uff0c\u6bd4\u8f83code_content who_reference_me\n                    \u5bf9\u4e8e\u5220\u9664\u7684\u60c5\u51b5\uff0c\u82e5\u5b58\u5728\u5219\u6700\u540e\u91cd\u65b0\u751f\u6210\u4e00\u4e0b\u6587\u6863\u6587\u4ef6\u5373\u53ef\n                    \u7136\u540e\u5bf9\u4e8e\u65e0\u53d8\u5316\u7684item\u76f4\u63a5\u8d4b\u503c\u5230\u65b0\u7684list\u4e2d\n                    \u68c0\u67e5\u662f\u5426\u90fd\u6709mdcontent\uff0c\u65e0mdcontent\u5219\u8fdb\u5165dict\n\n                    chat\n\n                   '''\n\n        need_refresh = False  # \u9700\u8981\u91cd\u65b0\u751f\u6210md\u6587\u6863\n        updating_dict = {}  # key= name, v= TargetItem\n        # k: \u5728newlist\u7684index v: \u5bf9\u5e94index\u7684value\n        updating_mapping_dict = {}\n\n        # \u83b7\u53d6\u65e7obj_list\n        with open(self.target_code_json, \"r\", encoding=\"utf-8\") as reader:\n            older_info_dict = json.load(reader)\n            older_info_list = older_info_dict.get(self.target_code_name)\n            older_obj_list = self.target_meta.from_target_info_json(older_info_list)\n\n        # \u65b0obj_list\u5728self\u4e2d\n        new_obj_list = self.target_meta.target_obj_list\n        # \u83b7\u53d6\u6bd4\u8f83\u4fe1\u606f key\u4e3a\u5e26\u5c42\u7ea7\u5173\u7cfb\u7684name\u548c\u5bf9\u5e94list\u4e2d\u7684index\n        older_key_set = {MetaInfo.find_obj_with_lineno(meta.code_start_line, older_obj_list) for meta in older_obj_list}\n        older_key_dict = dict(older_key_set)\n\n        new_key_set = {MetaInfo.find_obj_with_lineno(meta.code_start_line, new_obj_list) for meta in\n                       self.target_meta.target_obj_list}\n        new_key_dict = dict(new_key_set)\n\n        # \u5904\u7406\u5220\u9664\n        for name, index in older_key_dict.items():\n            try:\n                new_key = new_key_dict[name]\n\n            except KeyError as e:\n                need_refresh = True\n                break\n\n        # \u5904\u7406\u65b0\u589e\n        # \u5904\u7406\u4fee\u6539\n        for name, index in new_key_dict.items():\n            try:\n                old_key = older_key_dict[name]  # \u5728old obj list \u4e2d\u7684index\n                new_key = index  # \u5728new obj list\u4e2d\u7684index\n                #     \u627e\u5f97\u5230\u5c31\u662f\u4fee\u6539\u6216\u4e0d\u53d8\n                temp_new = new_obj_list[new_key]  # type==TargetItem\n                temp_old = older_obj_list[old_key]\n                # \u672c\u8eab\u672a\u751f\u6210\u6587\u6863\uff0c\u5219\u4e00\u5b9a\u8981\u751f\u6210\u6587\u6863\n                if temp_old.content[\"item_status\"] != \"doc_up_to_date\":\n                    raise KeyError\n                #     \u5982\u679c\u4ee3\u7801\u53d1\u751f\u53d8\u5316\n                if temp_new.content[\"code_content\"] != temp_old.content[\"code_content\"]:\n                    raise KeyError\n                # \u5982\u679c\u5f15\u7528\u53d1\u751f\u53d8\u5316\n                if temp_new.content[\"who_reference_me\"] != temp_old.content[\"who_reference_me\"]:\n                    raise KeyError\n                #     \u5982\u679c\u6ca1\u6709\u53d8\u5316\n                new_obj_list[new_key].md_content = temp_old.md_content\n                new_obj_list[new_key].item_status = temp_old.item_status\n                new_obj_list[new_key].content[\"md_content\"] = temp_old.content[\"md_content\"]\n                new_obj_list[new_key].content[\"item_status\"] = temp_old.content[\"item_status\"]\n\n            except KeyError as e:\n                updating_mapping_dict[name] = index  # \u627e\u4e0d\u5230\u5c31\u662f\u65b0\u589e\n                updating_dict[name] = new_obj_list[index]  # \u5f85\u751f\u6210\u5b57\u5178 \u5b58\u50a8 \u6620\u5c04\u5173\u7cfb\u548c\u8282\u70b9\n                continue\n\n        #     \u5206\u6790\u5b8c\u6210\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e0bjson\u4fe1\u606f\n        self.save_into_json()\n        #         \u6309\u7167updating dict\u5b58\u50a8\u7684\u8282\u70b9\u8fdb\u884c\u8be2\u95ee\uff0c\u6240\u6709\u6d88\u606f\u5b58\u50a8\u81f3new obj list\u4e2d\n        if updating_dict:\n            need_refresh = True\n\n            self.generate_docs(list(updating_dict.values()))\n            # self.batch_processing(list(updating_dict.values()))\n            for name, item in updating_dict.items():\n                new_obj_list[updating_mapping_dict[name]] = item\n\n            print(\"\u5b8c\u6210\u6587\u6863\u66f4\u65b0\uff0c\u6b63\u5728\u5199\u5165json\")\n            self.save_into_json()\n\n        if need_refresh:\n            print(\"\u5b8c\u6210json\u66f4\u65b0\uff0c\u6b63\u5728\u66f4\u65b0md\")\n            self.target_file.convert_to_markdown(new_obj_list)\n            return\n\n        else:\n            print(f\"{self.target_code_name} \u6240\u5c5e\u6587\u6863\u4e3a\u6700\u65b0\uff0c\u65e0\u9700\u66f4\u65b0\")\n            return\n\n    def run(self):\n\n        # \u68c0\u67e5\u751f\u6210\u6a21\u5f0f\u4e3a\u9996\u6b21\u751f\u6210\u8fd8\u662f\u6587\u6863\u66f4\u65b0\n        # \u9996\u6b21\u751f\u6210\uff1a\u65e0json\u8def\u5f84\uff0c\u6216json\u4e2d\u65e0mdcontent\n        if not os.path.exists(self.target_code_json):\n            print(f\"\u68c0\u6d4b\u5230 {self.target_code_name} \u7b2c\u4e00\u6b21\u751f\u6210\u6587\u6863\uff0c\u6b63\u5728\u751f\u6210\u4e2d......\")\n            self.first_generation()\n\n        else:\n            print(f\"\u68c0\u6d4b\u5230 {self.target_code_name} \u5df2\u5b58\u5728\u751f\u6210\u7684\u6587\u6863\u8bb0\u5f55\uff0c\u6b63\u5728\u68c0\u67e5\u66f4\u65b0\u4e2d......\")\n            self.docs_update()\n\n        return\n",
            "name_column": 6,
            "who_reference_me": [],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "__init__",
            "md_content": [
                "**__init__**: __init__ \u51fd\u6570\u7684\u529f\u80fd\u662f\u521d\u59cb\u5316\u7c7b\u7684\u5b9e\u4f8b\u5e76\u914d\u7f6e\u57fa\u7840\u53c2\u6570\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_file_dir: \u76ee\u6807\u6587\u4ef6\u76ee\u5f55\u8def\u5f84\uff0c\u6307\u5411\u9700\u8981\u751f\u6210\u6587\u6863\u7684\u4ee3\u7801\u6587\u4ef6\u6240\u5728\u4f4d\u7f6e\u3002  \n\u00b7 target_repo_path: \u76ee\u6807\u4ed3\u5e93\u8def\u5f84\uff0c\u6307\u5411\u4ee3\u7801\u4ed3\u5e93\u7684\u6839\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u50a8\u751f\u6210\u7684\u6587\u6863\u8bb0\u5f55\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5 Function \u662f\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u8d1f\u8d23\u521d\u59cb\u5316\u5b9e\u4f8b\u5c5e\u6027\u3001\u68c0\u67e5\u76ee\u6807\u6587\u4ef6\u6709\u6548\u6027\uff0c\u5e76\u51c6\u5907\u540e\u7eed\u6587\u6863\u751f\u6210\u6240\u9700\u7684\u5143\u6570\u636e\u3002\u5177\u4f53\u884c\u4e3a\u5305\u62ec\uff1a  \n1. \u521d\u59cb\u5316\u7ebf\u7a0b\u6570 `max_threads=5` \u548c\u72b6\u6001\u6807\u5fd7 `is_success=True`\u3002  \n2. \u89e3\u6790 `target_file_dir` \u83b7\u53d6\u76ee\u6807\u6587\u4ef6\u540d `target_code_name`\uff08\u5982 `example.py`\uff09\u53ca\u5176\u7236\u76ee\u5f55\u8def\u5f84 `target_code_dirs`\u3002  \n3. \u6784\u5efa `target_code_json` \u7684\u5b8c\u6574\u8def\u5f84\uff0c\u683c\u5f0f\u4e3a `<target_repo_path>/target_doc_record/<\u76ee\u6807\u6587\u4ef6\u540d>.json`\uff0c\u7528\u4e8e\u5b58\u50a8\u751f\u6210\u7684\u6587\u6863\u8bb0\u5f55\u3002  \n4. \u521b\u5efa `FileHandler` \u5b9e\u4f8b `target_file`\uff0c\u901a\u8fc7\u5176 `target_info_list` \u5c5e\u6027\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5305\u542b\u53ef\u751f\u6210\u6587\u6863\u7684\u5185\u5bb9\u3002\u82e5\u65e0\u5185\u5bb9\uff0c\u8f93\u51fa\u63d0\u793a\u5e76\u7ec8\u6b62\u521d\u59cb\u5316\uff08\u8bbe\u7f6e `is_success=False`\uff09\u3002  \n5. \u521d\u59cb\u5316 `MetaInfo` \u5bf9\u8c61 `target_meta`\uff0c\u8c03\u7528\u5176 `init_meta_info` \u65b9\u6cd5\u52a0\u8f7d\u5143\u6570\u636e\uff0c\u4f20\u5165\u4ed3\u5e93\u8def\u5f84\u3001\u76ee\u6807\u6587\u4ef6\u540d\u53ca `target_info_list`\u3002  \n6. \u6700\u540e\u8f93\u51fa\u521d\u59cb\u5316\u5b8c\u6210\u63d0\u793a\uff0c\u4f9b\u540e\u7eed `run` \u65b9\u6cd5\u8c03\u7528\u65f6\u6267\u884c\u6587\u6863\u751f\u6210\u6216\u66f4\u65b0\u64cd\u4f5c\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n- \u53c2\u6570 `target_file_dir` \u548c `target_repo_path` \u5fc5\u987b\u4e3a\u6709\u6548\u8def\u5f84\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u6587\u4ef6\u64cd\u4f5c\u5f02\u5e38\u3002  \n- \u82e5\u76ee\u6807\u6587\u4ef6\u65e0\u6709\u6548\u5185\u5bb9\uff08`target_info_list` \u4e3a\u7a7a\uff09\uff0c\u6784\u9020\u51fd\u6570\u4f1a\u63d0\u524d\u8fd4\u56de\u5e76\u6807\u8bb0 `is_success=False`\uff0c\u540e\u7eed\u9700\u4f9d\u8d56\u6b64\u72b6\u6001\u5224\u65ad\u662f\u5426\u6267\u884c `run`\u3002  \n- `FileHandler` \u548c `MetaInfo` \u662f\u5916\u90e8\u4f9d\u8d56\u5bf9\u8c61\uff0c\u9700\u786e\u4fdd\u5176\u5b9e\u73b0\u7b26\u5408\u9884\u671f\u529f\u80fd\uff08\u5982 `FileHandler` \u8d1f\u8d23\u89e3\u6790\u6587\u4ef6\u5185\u5bb9\uff0c`MetaInfo` \u7ba1\u7406\u5143\u6570\u636e\uff09\u3002  \n- \u8def\u5f84\u5206\u5272\u4f7f\u7528 `os.path.sep`\uff0c\u786e\u4fdd\u8de8\u64cd\u4f5c\u7cfb\u7edf\u517c\u5bb9\u6027\u3002\n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u82e5\u76ee\u6807\u6587\u4ef6\u4e3a `src/example.py`\uff0c\u6210\u529f\u521d\u59cb\u5316\u540e\u8f93\u51fa\uff1a  \n`[example.py]\u521d\u59cb\u5316\u5b8c\u6210 \u5f00\u59cb\u8fd0\u884c`  \n\u82e5\u6587\u4ef6\u65e0\u6709\u6548\u5185\u5bb9\uff0c\u8f93\u51fa\uff1a  \n`\u6587\u4ef6 example.py \u65e0\u53ef\u751f\u6210\u6587\u6863.`"
            ],
            "code_start_line": 14,
            "code_end_line": 36,
            "params": [
                "self",
                "target_file_dir",
                "target_repo_path"
            ],
            "have_return": true,
            "code_content": "    def __init__(self, target_file_dir, target_repo_path):\n\n        self.max_threads = 5\n        self.is_success = True\n        self.target_file_dir = target_file_dir\n        self.target_repo_path = target_repo_path\n        self.target_code_name = target_file_dir.split(os.path.sep)[-1]\n        self.target_code_dirs = os.path.sep.join(target_file_dir.split(os.path.sep)[0:-1])\n\n        self.target_code_json = os.path.join(self.target_repo_path, \"target_doc_record\",\n                                             self.target_code_name.replace(\".py\", \".json\"))\n        self.target_file = FileHandler(target_file_dir=self.target_file_dir, target_repo_path=self.target_repo_path)\n        if len(self.target_file.target_info_list) == 0:\n            print(f\"\u6587\u4ef6 {self.target_code_name} \u65e0\u53ef\u751f\u6210\u6587\u6863.\")\n            self.is_success = False\n            return\n\n        self.target_meta = MetaInfo()\n\n        self.target_meta.init_meta_info(repo_path=self.target_code_dirs, target_path=self.target_code_name,\n                                        target_info_list=self.target_file.target_info_list)\n\n        print(f\"[{self.target_code_name}]\u521d\u59cb\u5316\u5b8c\u6210 \u5f00\u59cb\u8fd0\u884c\")\n",
            "name_column": 8,
            "who_reference_me": [],
            "reference_who": [
                "Runner/run"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "save_into_json",
            "md_content": [
                "**save_into_json**: save_into_json \u51fd\u6570\u7684\u529f\u80fd\u662f\u5c06\u76ee\u6807\u5bf9\u8c61\u7684\u5143\u6570\u636e\u8f6c\u6362\u4e3a\u5b57\u5178\u7ed3\u6784\u5e76\u6301\u4e45\u5316\u5b58\u50a8\u81f3JSON\u6587\u4ef6\u3002\n\n**\u53c2\u6570(parameters)**: \u8be5\u51fd\u6570\u672a\u5b9a\u4e49\u663e\u5f0f\u53c2\u6570\uff0c\u4f46\u901a\u8fc7`self`\u9690\u5f0f\u4f9d\u8d56\u4ee5\u4e0b\u5bf9\u8c61\u5c5e\u6027\uff1a\n\u00b7 self.target_meta: \u63d0\u4f9b\u5143\u6570\u636e\u8f6c\u6362\u80fd\u529b\u7684\u5bf9\u8c61\n\u00b7 self.target_file: \u63d0\u4f9bJSON\u6587\u4ef6\u64cd\u4f5c\u80fd\u529b\u7684\u5bf9\u8c61\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5\u51fd\u6570\u6267\u884c\u4e24\u4e2a\u6838\u5fc3\u64cd\u4f5c\uff1a\n1. \u901a\u8fc7\u8c03\u7528`self.target_meta.from_target_to_dictlist()`\u5c06\u5f53\u524d\u5bf9\u8c61\u7684\u5143\u6570\u636e\u8f6c\u6362\u4e3a\u6807\u51c6\u5316\u7684\u5b57\u5178\u5217\u8868\u7ed3\u6784\u3002\u6b64\u65b9\u6cd5\u53ef\u80fd\u6d89\u53ca\u5bf9\u7c7b/\u51fd\u6570\u5b9a\u4e49\u3001\u4ee3\u7801\u4f4d\u7f6e\u3001\u5f15\u7528\u5173\u7cfb\u7b49\u5143\u6570\u636e\u7684\u5e8f\u5217\u5316\u5904\u7406\u3002\n2. \u4f7f\u7528`self.target_file.to_target_json_file()`\u5c06\u751f\u6210\u7684\u5b57\u5178\u6570\u636e\u5199\u5165JSON\u6587\u4ef6\uff0c\u5b9e\u73b0\u6570\u636e\u6301\u4e45\u5316\u3002\u8be5\u65b9\u6cd5\u53ef\u80fd\u5305\u542b\u6587\u4ef6\u8def\u5f84\u89e3\u6790\u3001\u6570\u636e\u683c\u5f0f\u5316\u53ca\u5f02\u5e38\u5904\u7406\u7b49\u5e95\u5c42\u64cd\u4f5c\u3002\n\n\u5728\u9879\u76ee\u8c03\u7528\u5173\u7cfb\u4e2d\uff1a\n- \u88ab`first_generation`\u8c03\u7528\u4e24\u6b21\uff1a\u5206\u522b\u5728\u6587\u6863\u751f\u6210\u524d\u6267\u884c\u521d\u59cb\u4fdd\u5b58\uff0c\u5728\u6587\u6863\u751f\u6210\u540e\u6267\u884c\u66f4\u65b0\u4fdd\u5b58\n- \u88ab`docs_update`\u8c03\u7528\u4e24\u6b21\uff1a\u5728\u4ee3\u7801\u53d8\u66f4\u5206\u6790\u9636\u6bb5\u4fdd\u5b58\u4e2d\u95f4\u72b6\u6001\uff0c\u5728\u6587\u6863\u66f4\u65b0\u5b8c\u6210\u540e\u4fdd\u5b58\u6700\u7ec8\u72b6\u6001\n\u8be5\u51fd\u6570\u4f5c\u4e3a\u6570\u636e\u6301\u4e45\u5316\u7684\u6838\u5fc3\u63a5\u53e3\uff0c\u4fdd\u969c\u4e86\u4ee3\u7801\u5206\u6790\u7ed3\u679c\u5728\u4e0d\u540c\u5904\u7406\u9636\u6bb5\uff08\u6587\u6863\u751f\u6210\u3001\u589e\u91cf\u66f4\u65b0\uff09\u7684\u72b6\u6001\u4fdd\u5b58\u9700\u6c42\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. \u4f9d\u8d56\u5bf9\u8c61\u7684\u5b8c\u6574\u6027\uff1a\u6267\u884c\u524d\u5fc5\u987b\u786e\u4fddself.target_meta\u548cself.target_file\u5df2\u5b8c\u6210\u6b63\u786e\u521d\u59cb\u5316\n2. \u6570\u636e\u8986\u76d6\u7279\u6027\uff1a\u6bcf\u6b21\u8c03\u7528\u90fd\u4f1a\u8986\u76d6\u76ee\u6807JSON\u6587\u4ef6\u5185\u5bb9\uff0c\u65e0\u589e\u91cf\u66f4\u65b0\u903b\u8f91\n3. \u65e0\u53c2\u6570\u6821\u9a8c\uff1a\u51fd\u6570\u5185\u90e8\u672a\u5305\u542b\u53c2\u6570\u6821\u9a8c\u903b\u8f91\uff0c\u9700\u786e\u4fdd\u8c03\u7528\u524d\u4e0a\u4e0b\u6587\u72b6\u6001\u6709\u6548\n4. \u540c\u6b65\u6027\u8981\u6c42\uff1a\u8c03\u7528\u540e\u5e94\u7acb\u5373\u6267\u884c\u6587\u4ef6\u5173\u95ed\u64cd\u4f5c\uff08\u7531\u5e95\u5c42\u65b9\u6cd5\u4fdd\u969c\uff09\uff0c\u9632\u6b62\u6570\u636e\u4e22\u5931\n5. \u65e0\u8fd4\u56de\u503c\u8bbe\u8ba1\uff1a\u8c03\u7528\u65b9\u9700\u901a\u8fc7\u68c0\u67e5\u76ee\u6807\u6587\u4ef6\u6216\u5f02\u5e38\u6355\u83b7\u673a\u5236\u786e\u8ba4\u6267\u884c\u7ed3\u679c"
            ],
            "code_start_line": 38,
            "code_end_line": 41,
            "params": [
                "self"
            ],
            "have_return": false,
            "code_content": "    def save_into_json(self):\n        target_info_dict = self.target_meta.from_target_to_dictlist()\n        # \u4fdd\u5b58\u81f3json\u6587\u4ef6\n        self.target_file.to_target_json_file(target_info_dict)\n",
            "name_column": 8,
            "who_reference_me": [
                "Runner/first_generation",
                "Runner/docs_update"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "generate_for_single_item",
            "md_content": [
                "**generate_for_single_item**: generate_for_single_item \u51fd\u6570\u7684\u529f\u80fd\u662f\u4e3a\u5355\u4e2a\u76ee\u6807\u5bf9\u8c61\u751f\u6210\u6587\u6863\u5185\u5bb9\u5e76\u66f4\u65b0\u5176\u72b6\u6001\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_obj_item: TargetItem\u7c7b\u578b\uff0c\u8868\u793a\u9700\u8981\u751f\u6210\u6587\u6863\u7684\u76ee\u6807\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u5305\u542b\u6587\u6863\u5185\u5bb9\u5b58\u50a8\u548c\u72b6\u6001\u66f4\u65b0\u7684\u65b9\u6cd5  \n\u00b7 lock: \u7ebf\u7a0b\u9501\u5bf9\u8c61\uff0c\u4f46\u5728\u5f53\u524d\u51fd\u6570\u5b9e\u73b0\u4e2d\u672a\u88ab\u5b9e\u9645\u4f7f\u7528\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7ChatEngine\u5b9e\u4f8b\u8c03\u7528generate_doc\u65b9\u6cd5\uff0c\u4e3a\u76ee\u6807\u5bf9\u8c61\u751f\u6210\u6587\u6863\u5185\u5bb9\u3002\u82e5\u751f\u6210\u6210\u529f\uff08message\u975e\u7a7a\uff09\uff0c\u5c06\u5185\u5bb9\u901a\u8fc7save_md_content\u5b58\u50a8\u5230TargetItem\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528update_item_status\u5c06\u72b6\u6001\u6807\u8bb0\u4e3adoc_up_to_date\u3002\u82e5\u751f\u6210\u5931\u8d25\uff08message\u4e3a\u7a7a\uff09\uff0c\u5219\u6e05\u7a7a\u6587\u6863\u5185\u5bb9\u5b58\u50a8\u533a\uff0c\u5c06\u72b6\u6001\u8bbe\u4e3adoc_has_not_been_generated\uff0c\u5e76\u629b\u51faValueError\u5f02\u5e38\u3002\n\n\u5728\u9879\u76ee\u8c03\u7528\u5173\u7cfb\u4e2d\uff0c\u8be5\u51fd\u6570\u88abworker\u65b9\u6cd5\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5faa\u73af\u8c03\u7528\u3002worker\u4ecetask_queue\u83b7\u53d6\u4efb\u52a1\u7d22\u5f15\u540e\uff0c\u4eceinput_list\u63d0\u53d6\u5bf9\u5e94TargetItem\u5bf9\u8c61\u4f20\u5165\u672c\u51fd\u6570\u3002\u6210\u529f\u65f6\u901a\u8fc7task_queue.task_done()\u6807\u8bb0\u4efb\u52a1\u5b8c\u6210\uff0c\u5931\u8d25\u65f6\u6355\u83b7ValueError\u5e76\u8f93\u51fa\u9519\u8bef\u65e5\u5fd7\uff0c\u4f46\u7ee7\u7eed\u5904\u7406\u540e\u7eed\u4efb\u52a1\u3002\u5f02\u5e38\u5904\u7406\u673a\u5236\u786e\u4fdd\u5355\u4e2a\u4efb\u52a1\u5931\u8d25\u4e0d\u4f1a\u4e2d\u65ad\u6574\u4e2a\u5de5\u4f5c\u6d41\u7a0b\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u5f53\u524dlock\u53c2\u6570\u867d\u88ab\u4f20\u5165\u4f46\u672a\u5b9e\u9645\u4f7f\u7528\uff0c\u5982\u9700\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684\u8d44\u6e90\u8bbf\u95ee\uff0c\u9700\u5728save_md_content\u6216update_item_status\u65b9\u6cd5\u5185\u90e8\u8865\u5145\u9501\u673a\u5236  \n2. \u5f53ChatEngine\u751f\u6210\u7a7a\u5185\u5bb9\u65f6\uff0c\u4f1a\u89e6\u53d1\u72b6\u6001\u56de\u6eda\u5e76\u6e05\u9664\u5df2\u6709\u6587\u6863\u5185\u5bb9\uff0c\u8c03\u7528\u65b9\u9700\u901a\u8fc7try-except\u5904\u7406ValueError  \n3. TargetItemStatus\u72b6\u6001\u679a\u4e3e\u9700\u4e0eupdate_item_status\u65b9\u6cd5\u5b9e\u73b0\u4e25\u683c\u5bf9\u5e94\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u72b6\u6001\u8ddf\u8e2a\u5f02\u5e38  \n4. worker\u65b9\u6cd5\u4e2d\"\u8be2\u95ee\u5931\u8d25\"\u7684\u65e5\u5fd7\u63cf\u8ff0\u4e0e\u5b9e\u9645\u89e6\u53d1\u7684ValueError\u5f02\u5e38\u9700\u4fdd\u6301\u8bed\u4e49\u4e00\u81f4\u6027\uff0c\u907f\u514d\u8bef\u5bfc\u8c03\u8bd5  \n5. \u51fd\u6570\u6267\u884c\u7ed3\u679c\u76f4\u63a5\u5f71\u54cdTargetItem\u6301\u4e45\u5316\u6570\u636e\uff0c\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u9700\u8003\u8651\u5e76\u53d1\u5199\u5165\u51b2\u7a81\u95ee\u9898"
            ],
            "code_start_line": 44,
            "code_end_line": 55,
            "params": [
                "target_obj_item",
                "lock"
            ],
            "have_return": false,
            "code_content": "    def generate_for_single_item(target_obj_item: TargetItem, lock):\n        chat = ChatEngine()\n        message = chat.generate_doc(target_obj_item)\n        #             \u5148\u628amessage\u5b58\u5230mdcontent\u91cc\uff0c\u540e\u9762\u53ef\u80fd\u9700\u8981\u8f6c\u5316\u540e\u5b58\u50a8\n\n        if message:\n            target_obj_item.save_md_content(message)\n            target_obj_item.update_item_status(TargetItemStatus.doc_up_to_date)\n        else:\n            target_obj_item.save_md_content()\n            target_obj_item.update_item_status(TargetItemStatus.doc_has_not_been_generated)\n            raise ValueError\n",
            "name_column": 8,
            "who_reference_me": [
                "Runner/generate_docs/worker"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "generate_docs",
            "md_content": [
                "**generate_docs**: generate_docs \u51fd\u6570\u7684\u529f\u80fd\u662f\u901a\u8fc7\u591a\u7ebf\u7a0b\u5e76\u53d1\u5904\u7406\u76ee\u6807\u5bf9\u8c61\u5217\u8868\uff0c\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u751f\u6210\u5bf9\u5e94\u7684\u6587\u6863\u5185\u5bb9\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_obj_list: \u7c7b\u578b\u4e3a List[TargetItem]\uff0c\u5305\u542b\u9700\u8981\u751f\u6210\u6587\u6863\u7684\u76ee\u6807\u5bf9\u8c61\u96c6\u5408\u3002\u6bcf\u4e2a TargetItem \u4ee3\u8868\u4e00\u4e2a\u5f85\u5904\u7406\u7684\u4ee3\u7801\u5355\u5143\uff08\u5982\u7c7b\u3001\u51fd\u6570\u7b49\uff09\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u91c7\u7528\u591a\u7ebf\u7a0b\u673a\u5236\u5e76\u884c\u5904\u7406\u6587\u6863\u751f\u6210\u4efb\u52a1\uff0c\u5176\u6838\u5fc3\u6d41\u7a0b\u5982\u4e0b\uff1a  \n1. **\u4efb\u52a1\u961f\u5217\u521d\u59cb\u5316**: \u521b\u5efa\u7ebf\u7a0b\u5b89\u5168\u7684 Queue \u961f\u5217 task_queue\uff0c\u5c06 target_obj_list \u7684\u7d22\u5f15\u4f9d\u6b21\u52a0\u5165\u961f\u5217\uff0c\u603b\u4efb\u52a1\u6570\u4e3a\u5217\u8868\u957f\u5ea6\u3002  \n2. **\u7ebf\u7a0b\u542f\u52a8**: \u6839\u636e\u9884\u8bbe\u7684 max_threads\uff08\u6700\u5927\u7ebf\u7a0b\u6570\uff09\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c worker \u51fd\u6570\u3002\u7ebf\u7a0b\u95f4\u5171\u4eab\u4efb\u52a1\u961f\u5217\u548c\u9501\u5bf9\u8c61 lock\u3002  \n3. **\u5de5\u4f5c\u5355\u5143 worker**:  \n   - \u5faa\u73af\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u4efb\u52a1\u7d22\u5f15\uff0c\u82e5\u961f\u5217\u4e3a\u7a7a\u5219\u9000\u51fa\u3002  \n   - \u5bf9\u6bcf\u4e2a\u7d22\u5f15\u5bf9\u5e94\u7684 TargetItem\uff0c\u8c03\u7528 generate_for_single_item \u751f\u6210\u5355\u4e2a\u6587\u6863\uff0c\u5e76\u901a\u8fc7\u9501 lock \u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u3002  \n   - \u5904\u7406\u5f02\u5e38\uff1a\u9047\u5230 ValueError \u65f6\u6807\u8bb0\u4efb\u52a1\u5931\u8d25\u5e76\u7ee7\u7eed\uff1b\u5176\u4ed6\u5f02\u5e38\u5219\u7ec8\u6b62\u5f53\u524d\u7ebf\u7a0b\u3002  \n   - \u901a\u8fc7 task_queue.task_done() \u6807\u8bb0\u4efb\u52a1\u5b8c\u6210\u72b6\u6001\u3002  \n4. **\u540c\u6b65\u7b49\u5f85**: \u4e3b\u7ebf\u7a0b\u901a\u8fc7 task_queue.join() \u963b\u585e\u76f4\u81f3\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002  \n\n**\u8c03\u7528\u5173\u7cfb**:  \n- **\u88ab\u8c03\u7528\u8005**: \u7531 first_generation\uff08\u9996\u6b21\u751f\u6210\u6587\u6863\uff09\u548c docs_update\uff08\u6587\u6863\u66f4\u65b0\uff09\u8c03\u7528\uff0c\u4e24\u8005\u5747\u5c5e\u4e8e\u540c\u4e00\u7c7b\u7684\u4e0d\u540c\u6587\u6863\u751f\u6210\u6a21\u5f0f\u3002  \n- **\u5185\u90e8\u8c03\u7528**: \u901a\u8fc7 worker \u51fd\u6570\u8c03\u7528 generate_for_single_item\uff08\u5b9e\u9645\u6267\u884c\u5355\u4e2a\u5bf9\u8c61\u6587\u6863\u751f\u6210\u7684\u5e95\u5c42\u65b9\u6cd5\uff09\u3002  \n- **\u5173\u8054\u5bf9\u8c61**: \u4f9d\u8d56 threading.Lock \u63a7\u5236\u8d44\u6e90\u7ade\u4e89\uff0c\u4f7f\u7528 Queue \u5b9e\u73b0\u4efb\u52a1\u5206\u53d1\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u7ebf\u7a0b\u6570\u91cf\u7531 max_threads \u63a7\u5236\uff0c\u9700\u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u5408\u7406\u8bbe\u7f6e\u4ee5\u907f\u514d\u8fc7\u5ea6\u5e76\u53d1\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002  \n2. \u5f02\u5e38\u5904\u7406\u673a\u5236\u4e2d\uff0cValueError \u8868\u793a\u53ef\u8df3\u8fc7\u7684\u6587\u6863\u751f\u6210\u5931\u8d25\uff08\u5982\u8f93\u5165\u683c\u5f0f\u9519\u8bef\uff09\uff0c\u800c\u5176\u4ed6\u5f02\u5e38\u4f1a\u5bfc\u81f4\u7ebf\u7a0b\u7ec8\u6b62\uff0c\u53ef\u80fd\u5f71\u54cd\u672a\u5b8c\u6210\u4efb\u52a1\u7684\u6267\u884c\u3002  \n3. \u4f20\u5165\u7684 target_obj_list \u5fc5\u987b\u4e3a\u6709\u6548\u7684 TargetItem \u5217\u8868\uff0c\u4e14\u5176\u987a\u5e8f\u4e0e\u961f\u5217\u7d22\u5f15\u4e25\u683c\u5bf9\u5e94\u3002  \n4. lock \u5bf9\u8c61\u7528\u4e8e\u4fdd\u62a4 generate_for_single_item \u7684\u7ebf\u7a0b\u5b89\u5168\uff0c\u9700\u786e\u4fdd\u8be5\u65b9\u6cd5\u5185\u90e8\u65e0\u7ade\u6001\u6761\u4ef6\u3002  \n5. \u4efb\u52a1\u8fdb\u5ea6\u901a\u8fc7\u63a7\u5236\u53f0\u8f93\u51fa\uff0c\u5b9e\u9645\u90e8\u7f72\u65f6\u5efa\u8bae\u66ff\u6362\u4e3a\u65e5\u5fd7\u7cfb\u7edf\u4ee5\u63d0\u5347\u7a33\u5b9a\u6027\u3002"
            ],
            "code_start_line": 57,
            "code_end_line": 95,
            "params": [
                "self",
                "target_obj_list"
            ],
            "have_return": false,
            "code_content": "    def generate_docs(self, target_obj_list: List[TargetItem]):\n\n        def worker(task_queue, lock, input_list):\n            while True:\n                try:\n\n                    index = task_queue.get_nowait()  # \u4ece\u961f\u5217\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15\n                except Empty:\n                    break\n\n                try:\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u6b63\u5728\u8fdb\u884c\u3002\")\n                    self.generate_for_single_item(input_list[index], lock)\n                    task_queue.task_done()\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u5df2\u5b8c\u6210\u3002\")\n\n                except ValueError as ve:\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u8be2\u95ee\u5931\u8d25\")\n                    task_queue.task_done()\n                    continue\n\n                except Exception as e:\n                    print(f\"error from {self.target_code_name} \", e)\n                    break  # \u961f\u5217\u4e3a\u7a7a\u65f6\u9000\u51fa\n\n        max_threads = self.max_threads\n        task_queue = Queue()\n        lock = threading.Lock()\n        task_num = len(target_obj_list)\n        for index in range(task_num):\n            task_queue.put(index)\n        print(f\"\u68c0\u6d4b\u5230 {self.target_code_name} \u5171\u8ba1\u4efb\u52a1 {task_num} \u4e2a\u3002\")\n        threads = []\n        for _ in range(max_threads):\n            thread = threading.Thread(target=worker, args=(task_queue, lock, target_obj_list), )\n            thread.start()\n            threads.append(thread)\n\n        task_queue.join()\n",
            "name_column": 8,
            "who_reference_me": [
                "Runner/first_generation",
                "Runner/docs_update"
            ],
            "reference_who": [
                "Runner/generate_docs/worker",
                "Runner/run"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "worker",
            "md_content": [
                "**worker**: worker \u51fd\u6570\u7684\u529f\u80fd\u662f\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4ece\u4efb\u52a1\u961f\u5217\u4e2d\u83b7\u53d6\u4efb\u52a1\u7d22\u5f15\u5e76\u5904\u7406\u5bf9\u5e94\u7684\u8f93\u5165\u5217\u8868\u5143\u7d20\uff0c\u540c\u65f6\u8c03\u7528\u751f\u6210\u6587\u6863\u7684\u6838\u5fc3\u903b\u8f91\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 task_queue: \u5305\u542b\u5f85\u5904\u7406\u4efb\u52a1\u7d22\u5f15\u7684\u7ebf\u7a0b\u5b89\u5168\u961f\u5217\uff0c\u901a\u8fc7 get_nowait \u65b9\u6cd5\u83b7\u53d6\u5143\u7d20\u3002  \n\u00b7 lock: \u7ebf\u7a0b\u9501\u5bf9\u8c61\uff0c\u7528\u4e8e\u63a7\u5236\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\u3002  \n\u00b7 input_list: \u9700\u8981\u5904\u7406\u7684 TargetItem \u5bf9\u8c61\u5217\u8868\uff0c\u901a\u8fc7 index \u53c2\u6570\u5b9a\u4f4d\u5177\u4f53\u5143\u7d20\u3002  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u4f5c\u4e3a\u591a\u7ebf\u7a0b\u4efb\u52a1\u6267\u884c\u7684\u6838\u5fc3\u5355\u5143\uff0c\u901a\u8fc7\u4ee5\u4e0b\u6d41\u7a0b\u5de5\u4f5c\uff1a  \n1. \u901a\u8fc7\u65e0\u9650\u5faa\u73af\u6301\u7eed\u5c1d\u8bd5\u4ece task_queue \u83b7\u53d6\u4efb\u52a1\u7d22\u5f15\uff0c\u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\u89e6\u53d1 Empty \u5f02\u5e38\u5e76\u9000\u51fa\u5faa\u73af\u3002  \n2. \u6bcf\u6b21\u83b7\u53d6 index \u540e\uff0c\u4ece input_list \u4e2d\u63d0\u53d6\u5bf9\u5e94\u7684 TargetItem \u5bf9\u8c61\uff0c\u8c03\u7528 self.generate_for_single_item \u65b9\u6cd5\u751f\u6210\u6587\u6863\u5185\u5bb9\u3002  \n3. \u4f7f\u7528 task_queue.task_done() \u660e\u786e\u6807\u8bb0\u4efb\u52a1\u5b8c\u6210\u72b6\u6001\uff0c\u4e0e generate_docs \u65b9\u6cd5\u4e2d\u7684 task_queue.join() \u5f62\u6210\u4efb\u52a1\u540c\u6b65\u673a\u5236\u3002  \n4. \u5f02\u5e38\u5904\u7406\u5206\u4e3a\u4e09\u5c42\uff1a  \n   - \u5bf9 ValueError \u7684\u5904\u7406\u5141\u8bb8\u8df3\u8fc7\u5f53\u524d\u4efb\u52a1\u7ee7\u7eed\u6267\u884c\uff0c\u4fdd\u6301\u7ebf\u7a0b\u5b58\u6d3b  \n   - \u5bf9\u5176\u4ed6 Exception \u7684\u5904\u7406\u4f1a\u76f4\u63a5\u7ec8\u6b62\u5f53\u524d\u7ebf\u7a0b  \n   - Empty \u5f02\u5e38\u4f5c\u4e3a\u6b63\u5e38\u9000\u51fa\u6761\u4ef6\u88ab\u5355\u72ec\u6355\u83b7  \n\n\u5728\u9879\u76ee\u8c03\u7528\u5173\u7cfb\u4e2d\uff1a  \n\u00b7 \u88ab generate_docs \u65b9\u6cd5\u4f5c\u4e3a threading.Thread \u7684\u76ee\u6807\u51fd\u6570\u8c03\u7528\uff0c\u901a\u8fc7 max_threads \u53c2\u6570\u63a7\u5236\u5e76\u53d1\u7ebf\u7a0b\u6570\u91cf  \n\u00b7 \u76f4\u63a5\u4f9d\u8d56 generate_for_single_item \u65b9\u6cd5\u5b8c\u6210\u5b9e\u9645\u6587\u6863\u751f\u6210\u903b\u8f91\uff0c\u540e\u8005\u901a\u8fc7 ChatEngine \u751f\u6210\u5185\u5bb9\u5e76\u66f4\u65b0 TargetItem \u72b6\u6001  \n\u00b7 \u901a\u8fc7 lock \u53c2\u6570\u4e0e\u7236\u65b9\u6cd5\u5171\u4eab\u7ebf\u7a0b\u9501\uff0c\u786e\u4fdd\u5bf9 TargetItem \u72b6\u6001\u4fee\u6539\u7684\u7ebf\u7a0b\u5b89\u5168  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u5fc5\u987b\u786e\u4fdd input_list \u7684\u7d22\u5f15\u8303\u56f4\u4e0e task_queue \u4e2d\u5b58\u50a8\u7684 index \u5b8c\u5168\u5339\u914d\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6570\u636e\u9519\u4f4d  \n2. \u5f02\u5e38\u5904\u7406\u903b\u8f91\u4e2d break \u4e0e continue \u7684\u4f7f\u7528\u5dee\u5f02\uff1a\u975e ValueError \u5f02\u5e38\u4f1a\u7ec8\u6b62\u5f53\u524d\u7ebf\u7a0b\uff0c\u53ef\u80fd\u5bfc\u81f4\u672a\u5b8c\u6210\u4efb\u52a1\u9057\u7559  \n3. self.target_code_name \u4f5c\u4e3a\u65e5\u5fd7\u6807\u8bc6\u7b26\uff0c\u9700\u8981\u5728\u88ab\u8c03\u7528\u5bf9\u8c61\u4e2d\u6b63\u786e\u5b9a\u4e49\u4ee5\u4fdd\u8bc1\u65e5\u5fd7\u53ef\u8bfb\u6027  \n4. \u4efb\u52a1\u8fdb\u5ea6\u7edf\u8ba1\u91c7\u7528 index+1 \u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u9700\u6ce8\u610f\u8f93\u5165\u5217\u8868\u957f\u5ea6\u4e0e\u961f\u5217\u5bb9\u91cf\u7684\u4e00\u81f4\u6027  \n5. \u9501\u5bf9\u8c61 lock \u5e94\u5728\u6240\u6709\u7ebf\u7a0b\u5b9e\u4f8b\u4e2d\u4fdd\u6301\u552f\u4e00\uff0c\u907f\u514d\u4ea7\u751f\u6b7b\u9501\u6216\u8d44\u6e90\u7ade\u4e89"
            ],
            "code_start_line": 59,
            "code_end_line": 80,
            "params": [
                "task_queue",
                "lock",
                "input_list"
            ],
            "have_return": false,
            "code_content": "        def worker(task_queue, lock, input_list):\n            while True:\n                try:\n\n                    index = task_queue.get_nowait()  # \u4ece\u961f\u5217\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15\n                except Empty:\n                    break\n\n                try:\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u6b63\u5728\u8fdb\u884c\u3002\")\n                    self.generate_for_single_item(input_list[index], lock)\n                    task_queue.task_done()\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u5df2\u5b8c\u6210\u3002\")\n\n                except ValueError as ve:\n                    print(f\" {self.target_code_name} \u7b2c {index + 1}/{len(input_list)} \u4e2a\u8be2\u95ee\u4efb\u52a1\u8be2\u95ee\u5931\u8d25\")\n                    task_queue.task_done()\n                    continue\n\n                except Exception as e:\n                    print(f\"error from {self.target_code_name} \", e)\n                    break  # \u961f\u5217\u4e3a\u7a7a\u65f6\u9000\u51fa\n",
            "name_column": 12,
            "who_reference_me": [
                "Runner/generate_docs"
            ],
            "reference_who": [
                "Runner/generate_for_single_item"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "first_generation",
            "md_content": [
                "**first_generation**: first_generation \u51fd\u6570\u7684\u529f\u80fd\u662f\u6267\u884c\u9879\u76ee\u6587\u6863\u7684\u9996\u6b21\u751f\u6210\u6d41\u7a0b\u3002\n\n**\u53c2\u6570(parameters)**: \u8be5\u51fd\u6570\u672a\u5b9a\u4e49\u663e\u5f0f\u53c2\u6570\uff0c\u901a\u8fc7`self`\u9690\u5f0f\u4f9d\u8d56\u4ee5\u4e0b\u5bf9\u8c61\u5c5e\u6027\uff1a\n\u00b7 self.target_meta: \u5b58\u50a8\u5143\u6570\u636e\u53ca\u63d0\u4f9b\u8f6c\u6362\u65b9\u6cd5\u7684\u5bf9\u8c61\n\u00b7 self.target_file: \u5904\u7406\u6587\u4ef6\u6301\u4e45\u5316\u64cd\u4f5c\u7684\u5bf9\u8c61\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5\u51fd\u6570\u5b9e\u73b0\u6587\u6863\u751f\u6210\u7684\u56db\u9636\u6bb5\u6807\u51c6\u5316\u6d41\u7a0b\uff1a\n1. **\u521d\u59cb\u6570\u636e\u4fdd\u5b58**\uff1a\u901a\u8fc7\u7b2c\u4e00\u6b21\u8c03\u7528`save_into_json()`\u5c06\u539f\u59cb\u4ee3\u7801\u5143\u6570\u636e\u8f6c\u6362\u4e3a\u5b57\u5178\u7ed3\u6784\u5e76\u4fdd\u5b58\u81f3JSON\u6587\u4ef6\uff0c\u4f5c\u4e3a\u6587\u6863\u751f\u6210\u7684\u57fa\u7840\u8f93\u5165\n2. **\u6587\u6863\u5185\u5bb9\u751f\u6210**\uff1a\u8c03\u7528`generate_docs()`\u65b9\u6cd5\uff0c\u4f7f\u7528\u591a\u7ebf\u7a0b\u673a\u5236\u5bf9`target_meta.target_obj_list`\u4e2d\u7684\u6bcf\u4e2aTargetItem\u8fdb\u884c\u6587\u6863\u5185\u5bb9\u751f\u6210\n3. **\u66f4\u65b0\u6570\u636e\u4fdd\u5b58**\uff1a\u518d\u6b21\u8c03\u7528`save_into_json()`\u6301\u4e45\u5316\u5305\u542b\u751f\u6210\u6587\u6863\u5185\u5bb9\u7684\u6700\u65b0\u5143\u6570\u636e\n4. **\u683c\u5f0f\u8f6c\u6362\u8f93\u51fa**\uff1a\u901a\u8fc7`convert_to_markdown()`\u5c06\u6700\u7ec8\u7ed3\u679c\u8f6c\u6362\u4e3aMarkdown\u683c\u5f0f\u6587\u6863\n\n\u5728\u9879\u76ee\u8c03\u7528\u94fe\u4e2d\uff1a\n- **\u88ab\u8c03\u7528\u8005**\uff1a\u7531`run()`\u65b9\u6cd5\u5728\u68c0\u6d4b\u5230\u76ee\u6807JSON\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u89e6\u53d1\u8c03\u7528\uff0c\u4f5c\u4e3a\u65b0\u9879\u76ee\u521d\u59cb\u5316\u6216\u5168\u91cf\u91cd\u5efa\u7684\u5165\u53e3\n- **\u8c03\u7528\u5173\u7cfb**\uff1a\n  \u2197 \u88ab`run`\u4f5c\u4e3a\u6838\u5fc3\u5904\u7406\u6d41\u7a0b\u8c03\u7528\n  \u2198 \u8c03\u7528`save_into_json`\u4e24\u6b21\uff08\u6587\u6863\u751f\u6210\u524d\u521d\u59cb\u4fdd\u5b58/\u751f\u6210\u540e\u66f4\u65b0\u4fdd\u5b58\uff09\n  \u2198 \u8c03\u7528`generate_docs`\u6267\u884c\u5b9e\u9645\u6587\u6863\u751f\u6210\n  \u2198 \u8c03\u7528`convert_to_markdown`\u5b8c\u6210\u6700\u7ec8\u8f93\u51fa\u683c\u5f0f\u8f6c\u6362\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. \u72b6\u6001\u4f9d\u8d56\uff1a\u9996\u6b21\u8c03\u7528save_into_json\u65f6\u4f9d\u8d56\u672a\u7ecf\u4fee\u6539\u7684\u539f\u59cb\u5143\u6570\u636e\uff0c\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u5143\u6570\u636e\u5df2\u5305\u542b\u751f\u6210\u7684\u6587\u6863\u5185\u5bb9\n2. \u7ebf\u7a0b\u5b89\u5168\uff1agenerate_docs\u5185\u90e8\u4f7f\u7528\u591a\u7ebf\u7a0b\u673a\u5236\uff0c\u9700\u6ce8\u610fTargetItem\u5bf9\u8c61\u7684\u7ebf\u7a0b\u5b89\u5168\u8bbf\u95ee\n3. \u6267\u884c\u987a\u5e8f\uff1a\u5fc5\u987b\u4e25\u683c\u4fdd\u6301save-generate-save-convert\u7684\u8c03\u7528\u5e8f\u5217\uff0c\u786e\u4fdd\u4e2d\u95f4\u72b6\u6001\u6b63\u786e\u4fdd\u5b58\n4. \u6587\u4ef6\u8986\u76d6\u98ce\u9669\uff1a\u8fde\u7eed\u8c03\u7528\u4f1a\u5bfc\u81f4JSON\u6587\u4ef6\u88ab\u8986\u76d6\uff0c\u9700\u901a\u8fc7\u7248\u672c\u63a7\u5236\u6216\u5907\u4efd\u673a\u5236\u9632\u62a4\u6570\u636e\u4e22\u5931\n5. \u6027\u80fd\u5f71\u54cd\uff1agenerate_docs\u7684\u591a\u7ebf\u7a0b\u6570\u91cf\u7531max_threads\u53c2\u6570\u63a7\u5236\uff0c\u9700\u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u5408\u7406\u914d\u7f6e\n6. \u6570\u636e\u5b8c\u6574\u6027\uff1a\u6700\u7ec8Markdown\u6587\u4ef6\u7684\u751f\u6210\u4f9d\u8d56JSON\u6587\u4ef6\u4e2d\u5df2\u5305\u542b\u5b8c\u6574\u7684mdcontent\u5b57\u6bb5"
            ],
            "code_start_line": 97,
            "code_end_line": 103,
            "params": [
                "self"
            ],
            "have_return": false,
            "code_content": "    def first_generation(self):\n        self.save_into_json()\n\n        self.generate_docs(self.target_meta.target_obj_list)\n\n        self.save_into_json()\n        self.target_file.convert_to_markdown(self.target_meta.target_obj_list)\n",
            "name_column": 8,
            "who_reference_me": [
                "Runner/run"
            ],
            "reference_who": [
                "Runner/save_into_json",
                "Runner/generate_docs"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "docs_update",
            "md_content": [
                "**docs_update**: docs_update \u51fd\u6570\u7684\u529f\u80fd\u662f\u5b9e\u73b0\u4ee3\u7801\u6587\u6863\u7684\u589e\u91cf\u66f4\u65b0\uff0c\u901a\u8fc7\u5206\u6790\u65b0\u65e7\u4ee3\u7801\u7ed3\u6784\u5dee\u5f02\u667a\u80fd\u751f\u6210\u66f4\u65b0\u540e\u7684\u6587\u6863\u5185\u5bb9\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 self: \u9690\u5f0f\u53c2\u6570\uff0c\u4f9d\u8d56\u4ee5\u4e0b\u7c7b\u5c5e\u6027\uff1a\n  - target_code_json: \u5b58\u50a8\u5386\u53f2\u4ee3\u7801\u5143\u6570\u636e\u7684JSON\u6587\u4ef6\u8def\u5f84\n  - target_meta: \u5305\u542b\u4ee3\u7801\u89e3\u6790\u7ed3\u679c\u7684\u5bf9\u8c61\n  - target_file: \u6587\u6863\u751f\u6210\u5668\u5bf9\u8c61\n  - max_threads: \u5e76\u884c\u5904\u7406\u7ebf\u7a0b\u6570\uff08\u901a\u8fc7generate_docs\u95f4\u63a5\u4f7f\u7528\uff09\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u6267\u884c\u6587\u6863\u66f4\u65b0\u64cd\u4f5c\u7684\u6838\u5fc3\u6d41\u7a0b\uff1a\n1. **\u6570\u636e\u521d\u59cb\u5316**\uff1a\u901a\u8fc7need_refresh\u6807\u5fd7\u4f4d\u63a7\u5236\u6700\u7ec8\u6587\u6863\u751f\u6210\uff0cupdating_dict\u5b58\u50a8\u5f85\u66f4\u65b0\u9879\uff0cupdating_mapping_dict\u8bb0\u5f55\u65b0\u65e7\u7d22\u5f15\u6620\u5c04\n2. **\u5386\u53f2\u6570\u636e\u52a0\u8f7d**\uff1a\u4ecetarget_code_json\u8bfb\u53d6\u65e7\u7248\u4ee3\u7801\u5143\u6570\u636e\uff0c\u53cd\u5e8f\u5217\u5316\u4e3aolder_obj_list\n3. **\u5dee\u5f02\u5206\u6790**\uff1a\n   - \u6784\u5efa\u65b0\u65e7\u4ee3\u7801\u9879\u7684\u952e\u503c\u6620\u5c04\uff08older_key_dict/new_key_dict\uff09\uff0c\u952e\u4e3a\u4ee3\u7801\u9879\u7684\u5c42\u7ea7\u540d\u79f0\n   - **\u5220\u9664\u68c0\u6d4b**\uff1a\u904d\u5386\u65e7\u952e\u96c6\u5408\uff0c\u82e5\u5728\u65b0\u952e\u96c6\u5408\u4e0d\u5b58\u5728\u5219\u6807\u8bb0\u9700\u8981\u5237\u65b0\u6587\u6863\n   - **\u53d8\u66f4\u68c0\u6d4b**\uff1a\u904d\u5386\u65b0\u952e\u96c6\u5408\uff0c\u901a\u8fc7\u4e09\u91cd\u6821\u9a8c\u5224\u65ad\u4fee\u6539\uff1a\n     - \u4ee3\u7801\u5185\u5bb9\u53d8\u5316\uff08code_content\uff09\n     - \u5f15\u7528\u5173\u7cfb\u53d8\u5316\uff08who_reference_me\uff09\n     - \u6587\u6863\u72b6\u6001\u5f02\u5e38\uff08item_status\u975edoc_up_to_date\uff09\n   - **\u65b0\u589e\u9879\u8bc6\u522b**\uff1a\u65e0\u6cd5\u5339\u914d\u65e7\u952e\u7684\u9879\u89c6\u4e3a\u65b0\u589e\uff0c\u52a0\u5165\u66f4\u65b0\u961f\u5217\n4. **\u72b6\u6001\u540c\u6b65**\uff1a\u672a\u53d8\u66f4\u9879\u76f4\u63a5\u7ee7\u627f\u65e7\u7248\u6587\u6863\u5185\u5bb9\uff08md_content\uff09\u548c\u72b6\u6001\uff08item_status\uff09\n5. **\u6301\u4e45\u5316\u5904\u7406**\uff1a\n   - \u8c03\u7528save_into_json\u4fdd\u5b58\u4e2d\u95f4\u72b6\u6001\n   - \u901a\u8fc7generate_docs\u591a\u7ebf\u7a0b\u751f\u6210\u65b0\u589e/\u4fee\u6539\u9879\u7684\u6587\u6863\n   - \u518d\u6b21\u8c03\u7528save_into_json\u4fdd\u5b58\u6700\u7ec8\u72b6\u6001\n   - \u89e6\u53d1convert_to_markdown\u751f\u6210\u65b0\u7248\u6587\u6863\u6587\u4ef6\n\n\u5728\u9879\u76ee\u8c03\u7528\u5173\u7cfb\u4e2d\uff1a\n- **\u88ab\u8c03\u7528**\uff1a\u7531run\u65b9\u6cd5\u5728\u68c0\u6d4b\u5230\u5df2\u6709\u6587\u6863\u65f6\u89e6\u53d1\n- **\u8c03\u7528**\uff1a\n  - save_into_json\uff08\u4e24\u6b21\uff09\uff1a\u5b9e\u73b0\u4e2d\u95f4\u72b6\u6001\u4e0e\u6700\u7ec8\u7ed3\u679c\u7684\u6301\u4e45\u5316\n  - generate_docs\uff1a\u591a\u7ebf\u7a0b\u5904\u7406\u6587\u6863\u751f\u6210\n  - convert_to_markdown\uff1a\u6700\u7ec8\u6587\u6863\u8f93\u51fa\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. JSON\u7ed3\u6784\u4f9d\u8d56\uff1a\u8981\u6c42\u5386\u53f2JSON\u6587\u4ef6\u5fc5\u987b\u5305\u542b\u5b8c\u6574\u7684item_status\u3001code_content\u7b49\u5b57\u6bb5\n2. \u7ebf\u7a0b\u5b89\u5168\uff1agenerate_docs\u4f7f\u7528\u7ebf\u7a0b\u9501\uff0c\u4f46\u9700\u786e\u4fdd\u4f20\u5165\u7684target_obj_list\u5728\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u7a33\u5b9a\n3. \u6027\u80fd\u5f71\u54cd\uff1a\u5927\u89c4\u6a21\u4ee3\u7801\u5e93\u7684\u5dee\u5f02\u5206\u6790\u53ef\u80fd\u8017\u65f6\uff0c\u5efa\u8bae\u5f02\u6b65\u6267\u884c\n4. \u5f02\u5e38\u5904\u7406\uff1a\u672a\u663e\u5f0f\u6355\u83b7\u6587\u4ef6\u8bfb\u53d6\u5f02\u5e38\uff0c\u9700\u786e\u4fddtarget_code_json\u5b58\u5728\u4e14\u53ef\u8bfb\n5. \u72b6\u6001\u7ba1\u7406\uff1a\u4f9d\u8d56item_status\u5b57\u6bb5\u7684\u51c6\u786e\u6027\uff0c\u624b\u52a8\u4fee\u6539JSON\u6587\u4ef6\u53ef\u80fd\u5bfc\u81f4\u72b6\u6001\u4e0d\u4e00\u81f4\n\n**\u8f93\u51fa\u793a\u4f8b**:  \n```\n\u68c0\u6d4b\u5230 module_parser \u5df2\u5b58\u5728\u751f\u6210\u7684\u6587\u6863\u8bb0\u5f55\uff0c\u6b63\u5728\u68c0\u67e5\u66f4\u65b0\u4e2d......\n\u5b8c\u6210\u6587\u6863\u66f4\u65b0\uff0c\u6b63\u5728\u5199\u5165json\n\u5b8c\u6210json\u66f4\u65b0\uff0c\u6b63\u5728\u66f4\u65b0md\n```\n\u6216\n```\napi_handler \u6240\u5c5e\u6587\u6863\u4e3a\u6700\u65b0\uff0c\u65e0\u9700\u66f4\u65b0\n```"
            ],
            "code_start_line": 106,
            "code_end_line": 205,
            "params": [
                "self"
            ],
            "have_return": true,
            "code_content": "    def docs_update(self):\n        '''\n                   \u82e5\u4e3a\u6587\u6863\u66f4\u65b0\u5219\u9700\u8981\u8003\u8651\u6e90\u4ee3\u7801\u7684\u589e\u5220\u6539\uff0c\n                   \u7ef4\u62a4\u4e00\u4e2a\u5f85\u66f4\u65b0dict\uff0c\u5b58\u50a8\u5728\u539flist\u4e2d\u7684index\u548cvalue\n                    \u6309\u7167dict\u53bbchat\uff0c\u8fd4\u56de\u503c\u6309\u7167index\u5b58\u50a8\n                   \u91cd\u65b0parse\u4ee3\u7801\u6587\u4ef6\uff0c\u4e0e\u73b0\u6709info\u6bd4\u8f83,\u83b7\u53d6item\u2014\u2014status\uff1a\n\n                    \u5148\u5904\u7406\u589e\u5220\u6539\u60c5\u51b5\n                   \u5bf9\u4e8e\u589e\u52a0\uff1a\u76f4\u63a5\u8be2\u95ee\u6240\u6709\u65b0\u589e\u7684\u4ee3\u7801\u7684doc\uff0c\n                    \u5bf9\u4e8e\u4fee\u6539\uff0c\u4ee3\u7801\u5185\u5bb9\u6539\u53d8\u5e76\u91cd\u65b0\u5206\u6790\u5f15\u7528\u60c5\u51b5\uff0c\u7136\u540e\u8be2\u95eedoc\n                    \u5982\u4f55\u5b9a\u4e49\u4fee\u6539\uff1atype name\u76f8\u540c\u5219\u8ba4\u4e3a\u4e3a\u5df2\u5b58\u5728item\uff0c\u6bd4\u8f83code_content who_reference_me\n                    \u5bf9\u4e8e\u5220\u9664\u7684\u60c5\u51b5\uff0c\u82e5\u5b58\u5728\u5219\u6700\u540e\u91cd\u65b0\u751f\u6210\u4e00\u4e0b\u6587\u6863\u6587\u4ef6\u5373\u53ef\n                    \u7136\u540e\u5bf9\u4e8e\u65e0\u53d8\u5316\u7684item\u76f4\u63a5\u8d4b\u503c\u5230\u65b0\u7684list\u4e2d\n                    \u68c0\u67e5\u662f\u5426\u90fd\u6709mdcontent\uff0c\u65e0mdcontent\u5219\u8fdb\u5165dict\n\n                    chat\n\n                   '''\n\n        need_refresh = False  # \u9700\u8981\u91cd\u65b0\u751f\u6210md\u6587\u6863\n        updating_dict = {}  # key= name, v= TargetItem\n        # k: \u5728newlist\u7684index v: \u5bf9\u5e94index\u7684value\n        updating_mapping_dict = {}\n\n        # \u83b7\u53d6\u65e7obj_list\n        with open(self.target_code_json, \"r\", encoding=\"utf-8\") as reader:\n            older_info_dict = json.load(reader)\n            older_info_list = older_info_dict.get(self.target_code_name)\n            older_obj_list = self.target_meta.from_target_info_json(older_info_list)\n\n        # \u65b0obj_list\u5728self\u4e2d\n        new_obj_list = self.target_meta.target_obj_list\n        # \u83b7\u53d6\u6bd4\u8f83\u4fe1\u606f key\u4e3a\u5e26\u5c42\u7ea7\u5173\u7cfb\u7684name\u548c\u5bf9\u5e94list\u4e2d\u7684index\n        older_key_set = {MetaInfo.find_obj_with_lineno(meta.code_start_line, older_obj_list) for meta in older_obj_list}\n        older_key_dict = dict(older_key_set)\n\n        new_key_set = {MetaInfo.find_obj_with_lineno(meta.code_start_line, new_obj_list) for meta in\n                       self.target_meta.target_obj_list}\n        new_key_dict = dict(new_key_set)\n\n        # \u5904\u7406\u5220\u9664\n        for name, index in older_key_dict.items():\n            try:\n                new_key = new_key_dict[name]\n\n            except KeyError as e:\n                need_refresh = True\n                break\n\n        # \u5904\u7406\u65b0\u589e\n        # \u5904\u7406\u4fee\u6539\n        for name, index in new_key_dict.items():\n            try:\n                old_key = older_key_dict[name]  # \u5728old obj list \u4e2d\u7684index\n                new_key = index  # \u5728new obj list\u4e2d\u7684index\n                #     \u627e\u5f97\u5230\u5c31\u662f\u4fee\u6539\u6216\u4e0d\u53d8\n                temp_new = new_obj_list[new_key]  # type==TargetItem\n                temp_old = older_obj_list[old_key]\n                # \u672c\u8eab\u672a\u751f\u6210\u6587\u6863\uff0c\u5219\u4e00\u5b9a\u8981\u751f\u6210\u6587\u6863\n                if temp_old.content[\"item_status\"] != \"doc_up_to_date\":\n                    raise KeyError\n                #     \u5982\u679c\u4ee3\u7801\u53d1\u751f\u53d8\u5316\n                if temp_new.content[\"code_content\"] != temp_old.content[\"code_content\"]:\n                    raise KeyError\n                # \u5982\u679c\u5f15\u7528\u53d1\u751f\u53d8\u5316\n                if temp_new.content[\"who_reference_me\"] != temp_old.content[\"who_reference_me\"]:\n                    raise KeyError\n                #     \u5982\u679c\u6ca1\u6709\u53d8\u5316\n                new_obj_list[new_key].md_content = temp_old.md_content\n                new_obj_list[new_key].item_status = temp_old.item_status\n                new_obj_list[new_key].content[\"md_content\"] = temp_old.content[\"md_content\"]\n                new_obj_list[new_key].content[\"item_status\"] = temp_old.content[\"item_status\"]\n\n            except KeyError as e:\n                updating_mapping_dict[name] = index  # \u627e\u4e0d\u5230\u5c31\u662f\u65b0\u589e\n                updating_dict[name] = new_obj_list[index]  # \u5f85\u751f\u6210\u5b57\u5178 \u5b58\u50a8 \u6620\u5c04\u5173\u7cfb\u548c\u8282\u70b9\n                continue\n\n        #     \u5206\u6790\u5b8c\u6210\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e0bjson\u4fe1\u606f\n        self.save_into_json()\n        #         \u6309\u7167updating dict\u5b58\u50a8\u7684\u8282\u70b9\u8fdb\u884c\u8be2\u95ee\uff0c\u6240\u6709\u6d88\u606f\u5b58\u50a8\u81f3new obj list\u4e2d\n        if updating_dict:\n            need_refresh = True\n\n            self.generate_docs(list(updating_dict.values()))\n            # self.batch_processing(list(updating_dict.values()))\n            for name, item in updating_dict.items():\n                new_obj_list[updating_mapping_dict[name]] = item\n\n            print(\"\u5b8c\u6210\u6587\u6863\u66f4\u65b0\uff0c\u6b63\u5728\u5199\u5165json\")\n            self.save_into_json()\n\n        if need_refresh:\n            print(\"\u5b8c\u6210json\u66f4\u65b0\uff0c\u6b63\u5728\u66f4\u65b0md\")\n            self.target_file.convert_to_markdown(new_obj_list)\n            return\n\n        else:\n            print(f\"{self.target_code_name} \u6240\u5c5e\u6587\u6863\u4e3a\u6700\u65b0\uff0c\u65e0\u9700\u66f4\u65b0\")\n            return\n",
            "name_column": 8,
            "who_reference_me": [
                "Runner/run"
            ],
            "reference_who": [
                "Runner/save_into_json",
                "Runner/generate_docs"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "run",
            "md_content": [
                "**run**: run \u51fd\u6570\u7684\u529f\u80fd\u662f\u6839\u636e\u76ee\u6807\u4ee3\u7801\u6587\u4ef6\u7684\u6587\u6863\u751f\u6210\u72b6\u6001\uff0c\u81ea\u52a8\u6267\u884c\u9996\u6b21\u751f\u6210\u6216\u66f4\u65b0\u64cd\u4f5c\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 \u65e0\u663e\u5f0f\u53c2\u6570\uff0c\u901a\u8fc7\u7c7b\u5b9e\u4f8b\u5c5e\u6027 self \u9690\u5f0f\u4f20\u9012\u8fd0\u884c\u6240\u9700\u6570\u636e\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5 Function \u662f\u6587\u6863\u751f\u6210\u6d41\u7a0b\u7684\u6838\u5fc3\u5165\u53e3\u70b9\uff0c\u5176\u6838\u5fc3\u903b\u8f91\u4e3a\uff1a  \n1. **\u72b6\u6001\u68c0\u6d4b**: \u901a\u8fc7\u68c0\u67e5 `self.target_code_json` \u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5224\u65ad\u76ee\u6807\u4ee3\u7801\u6587\u4ef6\u662f\u5426\u5df2\u6709\u6587\u6863\u8bb0\u5f55\u3002  \n   - \u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u5185\u5bb9\u7f3a\u5931\uff0c\u89e6\u53d1 `self.first_generation()` \u8fdb\u884c\u9996\u6b21\u6587\u6863\u751f\u6210\u3002  \n   - \u82e5\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u8c03\u7528 `self.docs_update()` \u6267\u884c\u589e\u91cf\u66f4\u65b0\u68c0\u67e5\u3002  \n2. **\u6a21\u5f0f\u5207\u6362**:  \n   - **\u9996\u6b21\u751f\u6210**: \u76f4\u63a5\u8c03\u7528 `first_generation`\uff0c\u540e\u8005\u901a\u8fc7 `save_into_json` \u4fdd\u5b58\u5143\u6570\u636e\u3001`generate_docs` \u751f\u6210\u6587\u6863\u5185\u5bb9\uff0c\u6700\u7ec8\u8c03\u7528 `convert_to_markdown` \u8f93\u51fa Markdown \u6587\u4ef6\u3002  \n   - **\u66f4\u65b0\u6a21\u5f0f**: \u901a\u8fc7 `docs_update` \u5bf9\u6bd4\u65b0\u65e7\u5143\u6570\u636e\uff0c\u8bc6\u522b\u4ee3\u7801\u589e\u5220\u6539\uff0c\u4ec5\u5bf9\u53d8\u66f4\u90e8\u5206\u91cd\u65b0\u751f\u6210\u6587\u6863\uff0c\u6700\u540e\u66f4\u65b0 JSON \u548c Markdown \u6587\u4ef6\u3002  \n3. **\u63a7\u5236\u6d41\u8fd4\u56de**: \u6267\u884c\u5b8c\u6210\u540e\u8fd4\u56de\u7a7a\u503c\uff0c\u5b9e\u9645\u7ed3\u679c\u901a\u8fc7\u6587\u4ef6\u64cd\u4f5c\u6301\u4e45\u5316\u3002  \n\n**\u8c03\u7528\u5173\u7cfb**:  \n- **\u88ab\u8c03\u7528\u8005**: \u7531\u5916\u90e8\u6a21\u5757\uff08\u5982\u521d\u59cb\u5316\u540e\u7684\u7c7b\u5b9e\u4f8b\uff09\u76f4\u63a5\u8c03\u7528\uff0c\u4f5c\u4e3a\u6587\u6863\u751f\u6210\u6d41\u7a0b\u7684\u542f\u52a8\u63a5\u53e3\u3002  \n- **\u5185\u90e8\u8c03\u7528**:  \n  - `first_generation`: \u8d1f\u8d23\u9996\u6b21\u6587\u6863\u751f\u6210\u7684\u5168\u6d41\u7a0b\uff0c\u5305\u62ec\u5143\u6570\u636e\u4fdd\u5b58\u3001\u6587\u6863\u5185\u5bb9\u751f\u6210\u53ca Markdown \u8f6c\u6362\u3002  \n  - `docs_update`: \u5904\u7406\u6587\u6863\u66f4\u65b0\u903b\u8f91\uff0c\u6d89\u53ca\u5143\u6570\u636e\u5dee\u5f02\u5206\u6790\u3001\u53d8\u66f4\u9879\u7b5b\u9009\u53ca\u5c40\u90e8\u91cd\u65b0\u751f\u6210\u3002  \n  - \u95f4\u63a5\u5173\u8054 `generate_docs`\uff08\u591a\u7ebf\u7a0b\u6587\u6863\u751f\u6210\uff09\u3001`save_into_json`\uff08\u5143\u6570\u636e\u6301\u4e45\u5316\uff09\u3001`convert_to_markdown`\uff08\u6587\u6863\u683c\u5f0f\u5316\u8f93\u51fa\uff09\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u4f9d\u8d56 `self.target_code_json` \u8def\u5f84\u7684\u51c6\u786e\u6027\uff0c\u9519\u8bef\u914d\u7f6e\u53ef\u80fd\u5bfc\u81f4\u6a21\u5f0f\u8bef\u5224\uff08\u5982\u5c06\u66f4\u65b0\u8bef\u8ba4\u4e3a\u9996\u6b21\u751f\u6210\uff09\u3002  \n2. `first_generation` \u4e0e `docs_update` \u5747\u5305\u542b\u6587\u4ef6\u5199\u5165\u64cd\u4f5c\uff0c\u9700\u786e\u4fdd\u76ee\u6807\u76ee\u5f55\u7684\u5199\u5165\u6743\u9650\u3002  \n3. \u66f4\u65b0\u6a21\u5f0f\u4e0b\uff0c\u82e5\u4ee3\u7801\u5f15\u7528\u5173\u7cfb\uff08`who_reference_me`\uff09\u6216\u5185\u5bb9\uff08`code_content`\uff09\u53d1\u751f\u53d8\u5316\uff0c\u4f1a\u89e6\u53d1\u5168\u91cf\u91cd\u65b0\u751f\u6210\u3002  \n4. \u51fd\u6570\u65e0\u663e\u5f0f\u8fd4\u56de\u503c\uff0c\u6267\u884c\u7ed3\u679c\u901a\u8fc7\u63a7\u5236\u53f0\u8f93\u51fa\u63d0\u793a\u53ca\u6587\u4ef6\u7cfb\u7edf\u53d8\u5316\u4f53\u73b0\u3002  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n- \u9996\u6b21\u751f\u6210\u573a\u666f\uff1a  \n  `\u68c0\u6d4b\u5230 example.py \u7b2c\u4e00\u6b21\u751f\u6210\u6587\u6863\uff0c\u6b63\u5728\u751f\u6210\u4e2d......`  \n- \u66f4\u65b0\u573a\u666f\uff1a  \n  `\u68c0\u6d4b\u5230 example.py \u5df2\u5b58\u5728\u751f\u6210\u7684\u6587\u6863\u8bb0\u5f55\uff0c\u6b63\u5728\u68c0\u67e5\u66f4\u65b0\u4e2d......`  \n  `\u5b8c\u6210\u6587\u6863\u66f4\u65b0\uff0c\u6b63\u5728\u5199\u5165json`  \n  `\u5b8c\u6210json\u66f4\u65b0\uff0c\u6b63\u5728\u66f4\u65b0md`"
            ],
            "code_start_line": 207,
            "code_end_line": 219,
            "params": [
                "self"
            ],
            "have_return": true,
            "code_content": "    def run(self):\n\n        # \u68c0\u67e5\u751f\u6210\u6a21\u5f0f\u4e3a\u9996\u6b21\u751f\u6210\u8fd8\u662f\u6587\u6863\u66f4\u65b0\n        # \u9996\u6b21\u751f\u6210\uff1a\u65e0json\u8def\u5f84\uff0c\u6216json\u4e2d\u65e0mdcontent\n        if not os.path.exists(self.target_code_json):\n            print(f\"\u68c0\u6d4b\u5230 {self.target_code_name} \u7b2c\u4e00\u6b21\u751f\u6210\u6587\u6863\uff0c\u6b63\u5728\u751f\u6210\u4e2d......\")\n            self.first_generation()\n\n        else:\n            print(f\"\u68c0\u6d4b\u5230 {self.target_code_name} \u5df2\u5b58\u5728\u751f\u6210\u7684\u6587\u6863\u8bb0\u5f55\uff0c\u6b63\u5728\u68c0\u67e5\u66f4\u65b0\u4e2d......\")\n            self.docs_update()\n\n        return\n",
            "name_column": 8,
            "who_reference_me": [
                "Runner/__init__",
                "Runner/generate_docs"
            ],
            "reference_who": [
                "Runner/first_generation",
                "Runner/docs_update"
            ],
            "item_status": "doc_up_to_date"
        }
    ]
}