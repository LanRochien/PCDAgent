{
    "structure_handler.py": [
        {
            "type": "FunctionDef",
            "name": "find_all_referencer",
            "md_content": [
                "**find_all_referencer**: find_all_referencer \u51fd\u6570\u7684\u529f\u80fd\u662f\u5728\u6307\u5b9a\u4ee3\u7801\u4ed3\u5e93\u4e2d\u5b9a\u4f4d\u7ed9\u5b9a\u53d8\u91cf\u7684\u6240\u6709\u5916\u90e8\u5f15\u7528\u4f4d\u7f6e\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 repo_path: \u4ee3\u7801\u4ed3\u5e93\u7684\u6839\u76ee\u5f55\u8def\u5f84  \n\u00b7 variable_name: \u9700\u8981\u8ffd\u8e2a\u7684\u53d8\u91cf\u540d\u79f0  \n\u00b7 file_path: \u53d8\u91cf\u5b9a\u4e49\u6240\u5728\u7684\u6587\u4ef6\u76f8\u5bf9\u8def\u5f84  \n\u00b7 line_number: \u53d8\u91cf\u5b9a\u4e49\u7684\u884c\u53f7  \n\u00b7 column_number: \u53d8\u91cf\u5b9a\u4e49\u7684\u5217\u53f7  \n\u00b7 in_file_only: \u5e03\u5c14\u503c\uff0c\u63a7\u5236\u662f\u5426\u4ec5\u5728\u5f53\u524d\u6587\u4ef6\u5185\u641c\u7d22\u5f15\u7528\uff08\u9ed8\u8ba4False\uff09  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7Jedi\u5e93\u7684\u9759\u6001\u5206\u6790\u80fd\u529b\uff0c\u5728\u4ee3\u7801\u4ed3\u5e93\u4e2d\u7cbe\u786e\u8bc6\u522b\u6307\u5b9a\u53d8\u91cf\u7684\u6240\u6709\u5f15\u7528\u70b9\u3002\u6838\u5fc3\u6d41\u7a0b\u5305\u542b\u4e09\u4e2a\u91cd\u8bd5\u673a\u5236\uff1a  \n1. \u4f7f\u7528jedi.Script\u52a0\u8f7d\u76ee\u6807\u6587\u4ef6\uff0c\u6839\u636e\u53c2\u6570\u9009\u62e9\u6587\u4ef6\u7ea7\u6216\u5168\u5c40\u5f15\u7528\u626b\u63cf\u6a21\u5f0f  \n2. \u901a\u8fc7get_references\u83b7\u53d6\u539f\u59cb\u5f15\u7528\u5217\u8868\uff0c\u8fc7\u6ee4\u51fa\u4e0e\u76ee\u6807\u53d8\u91cf\u540d\u5b8c\u5168\u5339\u914d\u7684\u5f15\u7528  \n3. \u5bf9\u7ed3\u679c\u8fdb\u884c\u8def\u5f84\u6807\u51c6\u5316\u5904\u7406\uff0c\u6392\u9664\u53d8\u91cf\u5b9a\u4e49\u70b9\u81ea\u8eab\u7684\u5f15\u7528  \n\n\u5728\u9879\u76ee\u4e2d\u88abMetaInfo\u7c7b\u7684parse_target_reference\u65b9\u6cd5\u8c03\u7528\uff0c\u7528\u4e8e\u5efa\u7acb\u4ee3\u7801\u5bf9\u8c61\u95f4\u7684\u5f15\u7528\u5173\u7cfb\u56fe\u8c31\u3002\u5176\u8fd4\u56de\u7ed3\u679c\u88ab\u7528\u4e8e\u6784\u5efaTargetItem\u5bf9\u8c61\u7684who_reference_me\u548creference_who\u5c5e\u6027\uff0c\u6700\u7ec8\u5f71\u54cd\u6587\u6863\u751f\u6210\u7684\u5f15\u7528\u5173\u7cfb\u5c55\u793a\u3002  \n\n\u51fd\u6570\u4e0eMetaInfo\u5f62\u6210\u53cc\u5411\u4ea4\u4e92\uff1a\u63a5\u6536\u6765\u81eaMetaInfo\u7684\u4ee3\u7801\u5bf9\u8c61\u4f4d\u7f6e\u4fe1\u606f\uff0c\u8fd4\u56de\u5f15\u7528\u5750\u6807\u540e\u7531MetaInfo\u8fdb\u884c\u5bf9\u8c61\u7ea7\u5173\u8054\u5206\u6790\u3002\u540c\u65f6\u4f9d\u8d56FileHandler\u751f\u6210\u7684\u57fa\u7840\u4ee3\u7801\u7ed3\u6784\u6570\u636e\u8fdb\u884c\u4f4d\u7f6e\u5339\u914d\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u5f02\u5e38\u5904\u7406\u673a\u5236\u5305\u542b3\u6b21\u91cd\u8bd5\uff0c\u5e94\u5bf9Jedi\u89e3\u6790\u4e0d\u7a33\u5b9a\u7684\u573a\u666f  \n2. \u8fd4\u56de\u8def\u5f84\u4f7f\u7528os.path.relpath\u8f6c\u6362\u4e3a\u76f8\u5bf9\u4e8erepo_path\u7684\u76f8\u5bf9\u8def\u5f84  \n3. \u81ea\u52a8\u8fc7\u6ee4\u4e0e\u88ab\u5f15\u7528\u70b9\u5750\u6807\u5b8c\u5168\u76f8\u540c\u7684\u6761\u76ee\uff08\u5373\u6392\u9664\u81ea\u6211\u5f15\u7528\uff09  \n4. \u9700\u786e\u4fdd\u4f20\u5165\u7684line/column\u53c2\u6570\u5bf9\u5e94\u53d8\u91cf\u540d\u7684\u5b9e\u9645\u5b9a\u4e49\u4f4d\u7f6e  \n5. \u8de8\u6587\u4ef6\u5f15\u7528\u5206\u6790\u4f9d\u8d56Jedi\u7684\u5168\u5c40\u7d22\u5f15\u80fd\u529b\uff0c\u9700\u4fdd\u8bc1\u4ee3\u7801\u5e93\u5b8c\u6574\u53ef\u89e3\u6790  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n[  \n    (\"src/utils/helper.py\", 45, 8),  \n    (\"tests/validation/test_main.py\", 122, 15),  \n    (\"src/core/processor.py\", 89, 3)  \n]"
            ],
            "code_start_line": 17,
            "code_end_line": 43,
            "params": [
                "repo_path",
                "variable_name",
                "file_path",
                "line_number",
                "column_number",
                "in_file_only"
            ],
            "have_return": true,
            "code_content": "def find_all_referencer(\n        repo_path, variable_name, file_path, line_number, column_number, in_file_only=False\n):\n    \"\"\"\u590d\u5236\u8fc7\u6765\u7684\u4e4b\u524d\u7684\u5b9e\u73b0\"\"\"\n    script = jedi.Script(path=os.path.join(repo_path, file_path))\n\n    for attempt in range(3):\n        try:\n            if in_file_only:\n                references = script.get_references(\n                    line=line_number, column=column_number, scope=\"file\"\n                )\n            else:\n                references = script.get_references(line=line_number, column=column_number)\n            # \u8fc7\u6ee4\u51fa\u53d8\u91cf\u540d\u4e3a variable_name \u7684\u5f15\u7528\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u4f4d\u7f6e\n            variable_references = [ref for ref in references if ref.name == variable_name]\n\n            return [\n                (os.path.relpath(ref.module_path, repo_path), ref.line, ref.column)\n                for ref in variable_references\n                if not (ref.line == line_number and ref.column == column_number)\n            ]\n        except Exception as e:\n            print(\"jedi error\", type(e), e)\n            time.sleep(1.5)\n            continue\n    return []\n",
            "name_column": 4,
            "who_reference_me": [
                "MetaInfo/parse_target_reference"
            ],
            "reference_who": [
                "MetaInfo",
                "MetaInfo/init_meta_info",
                "MetaInfo/from_target_to_dictlist",
                "FileHandler",
                "FileHandler/to_target_json_file"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "ClassDef",
            "name": "MetaInfo",
            "md_content": [
                "**MetaInfo**:  MetaInfo \u7c7b\u7528\u4e8e\u7ba1\u7406\u4ee3\u7801\u5e93\u4e2d\u76ee\u6807\u5bf9\u8c61\u7684\u5143\u6570\u636e\u53ca\u5f15\u7528\u5173\u7cfb\u5206\u6790\u3002\n\n**\u5c5e\u6027(atributes)**: \u8fd9\u4e2aClass\u6240\u5305\u542b\u7684\u5c5e\u6027\u6709\uff1a\n\u00b7 repo_path: \u76ee\u6807\u4ee3\u7801\u4ed3\u5e93\u7684\u672c\u5730\u8def\u5f84 (Path\u7c7b\u578b)\n\u00b7 target_path: \u5f53\u524d\u5904\u7406\u7684\u76ee\u6807\u6587\u4ef6\u8def\u5f84\n\u00b7 document_version: \u6587\u6863\u7248\u672c\u6807\u8bc6 (\u4f7f\u7528\u76ee\u6807\u4ed3\u5e93commit hash\uff0c\u7a7a\u5b57\u7b26\u4e32\u8868\u793a\u672a\u5b8c\u6210)\n\u00b7 target_obj_list: \u5b58\u50a8\u89e3\u6790\u540e\u7684\u76ee\u6807\u5bf9\u8c61\u96c6\u5408 (\u5305\u542bTargetItem\u5b9e\u4f8b)\n\u00b7 white_list: \u767d\u540d\u5355\u914d\u7f6e (\u7c7b\u578b\u4e3aList\uff0c\u9ed8\u8ba4None)\n\u00b7 fake_file_reflection: \u865a\u62df\u6587\u4ef6\u6620\u5c04\u5b57\u5178 (\u8bb0\u5f55\u6587\u4ef6\u540d\u6620\u5c04\u5173\u7cfb)\n\u00b7 jump_files: \u9700\u8981\u8df3\u8fc7\u7684\u6587\u4ef6\u5217\u8868\n\u00b7 deleted_items_from_older_meta: \u65e7\u7248\u672c\u5143\u6570\u636e\u4e2d\u7684\u5df2\u5220\u9664\u9879\n\u00b7 in_generation_process: \u5143\u6570\u636e\u751f\u6210\u72b6\u6001\u6807\u5fd7\n\u00b7 checkpoint_lock: \u7ebf\u7a0b\u9501 (\u7528\u4e8e\u591a\u7ebf\u7a0b\u540c\u6b65)\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \nMetaInfo \u7c7b\u4f5c\u4e3a\u4ee3\u7801\u5206\u6790\u7cfb\u7edf\u7684\u6838\u5fc3\u6570\u636e\u5bb9\u5668\uff0c\u4e3b\u8981\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a\n1. **\u5143\u6570\u636e\u7ba1\u7406**\uff1a\u901a\u8fc7 init_meta_info \u65b9\u6cd5\u521d\u59cb\u5316\u4ed3\u5e93\u8def\u5f84\u3001\u76ee\u6807\u6587\u4ef6\u8def\u5f84\uff0c\u5e76\u89e6\u53d1\u5f15\u7528\u5173\u7cfb\u89e3\u6790\u6d41\u7a0b\n2. **\u5f15\u7528\u5173\u7cfb\u5206\u6790**\uff1aparse_target_reference \u65b9\u6cd5\u7ed3\u5408 find_all_referencer \u51fd\u6570\uff08\u4f7f\u7528jedi\u5e93\u8fdb\u884c\u9759\u6001\u5206\u6790\uff09\u548c find_obj_with_lineno \u65b9\u6cd5\uff0c\u6784\u5efa\u4ee3\u7801\u5bf9\u8c61\u95f4\u7684\u5f15\u7528\u62d3\u6251\uff1a\n   - \u8de8\u6587\u4ef6/\u8de8\u4f5c\u7528\u57df\u5f15\u7528\u68c0\u6d4b\n   - \u591a\u5c42\u7ea7\u5d4c\u5957\u5bf9\u8c61\u8bc6\u522b\uff08\u7c7b\u65b9\u6cd5/\u51fd\u6570\u5d4c\u5957\u7b49\u60c5\u51b5\uff09\n   - \u81ea\u52a8\u6392\u9664\u81ea\u5f15\u7528\u60c5\u51b5\n3. **\u6570\u636e\u7ed3\u6784\u8f6c\u6362**\uff1a\u63d0\u4f9b from_target_to_dictlist \u548c from_target_info_json \u65b9\u6cd5\u5b9e\u73b0 TargetItem \u5bf9\u8c61\u4e0eJSON\u683c\u5f0f\u6570\u636e\u7684\u53cc\u5411\u8f6c\u6362\n4. **\u7248\u672c\u63a7\u5236**\uff1a\u901a\u8fc7 document_version \u5b57\u6bb5\u7ed1\u5b9a\u4ee3\u7801\u4ed3\u5e93\u72b6\u6001\uff0c\u652f\u6301\u589e\u91cf\u66f4\u65b0\u68c0\u6d4b\n\n\u4e0e find_all_referencer \u7684\u4ea4\u4e92\uff1a\n- \u5728 parse_target_reference \u4e2d\u8c03\u7528\u8be5\u51fd\u6570\u83b7\u53d6\u53d8\u91cf\u5f15\u7528\u4f4d\u7f6e\n- \u4f7f\u7528 threading.Lock \u786e\u4fdd\u591a\u7ebf\u7a0b\u73af\u5883\u4e0bjedi\u5206\u6790\u7684\u5b89\u5168\u6027\n- \u8fc7\u6ee4\u81ea\u5f15\u7528\uff08\u76f8\u540c\u884c\u53f7\u5217\u53f7\uff09\u5e76\u8f6c\u6362\u8def\u5f84\u4e3a\u76f8\u5bf9\u683c\u5f0f\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. \u7ebf\u7a0b\u5b89\u5168\uff1a\u6d89\u53ca checkpoint_lock \u7684\u64cd\u4f5c\u9700\u4fdd\u6301\u539f\u5b50\u6027\n2. \u521d\u59cb\u5316\u987a\u5e8f\uff1a\u5fc5\u987b\u5148\u8c03\u7528 init_meta_info \u521d\u59cb\u5316\u8def\u5f84\u53c2\u6570\n3. \u6570\u636e\u4e00\u81f4\u6027\uff1atarget_obj_list \u9700\u901a\u8fc7 refresh_item_content \u540c\u6b65 content \u5b57\u6bb5\n4. \u5f02\u5e38\u5904\u7406\uff1ajedi \u5e93\u8c03\u7528\u5305\u542b\u91cd\u8bd5\u673a\u5236\uff083\u6b21\u5c1d\u8bd5\uff09\n5. \u7a7a\u503c\u5904\u7406\uff1awhite_list \u521d\u59cb\u5316\u4e3aNone\u800c\u975e\u7a7a\u5217\u8868\uff0c\u4f7f\u7528\u65f6\u9700\u5224\u7a7a\n6. \u7248\u672c\u6807\u8bc6\uff1adocument_version \u4e3a\u7a7a\u65f6\u8868\u793a\u6587\u6863\u672a\u5b8c\u6210\u72b6\u6001\n\n**\u8f93\u51fa\u793a\u4f8b**:  \ntarget_obj_list \u53ef\u80fd\u5305\u542b\u7684\u6761\u76ee\u793a\u4f8b\uff1a\n```\n{\n  \"name\": \"calculate_score\",\n  \"type\": \"FunctionDef\",\n  \"code_start_line\": 45,\n  \"code_end_line\": 58,\n  \"reference_who\": [\"DataProcessor/load_dataset\"],\n  \"who_reference_me\": [\"ReportGenerator/generate\"],\n  \"md_content\": \"## calculate_score\\n\\nComputes final evaluation metric...\"\n}\n```"
            ],
            "code_start_line": 47,
            "code_end_line": 211,
            "params": [],
            "have_return": true,
            "code_content": "class MetaInfo:\n    repo_path: Path = \"\"  # type: ignore\n    target_path = \"\"\n    document_version: str = (\n        \"\"  # \u968f\u65f6\u95f4\u53d8\u5316\uff0c\"\"\u4ee3\u8868\u6ca1\u5b8c\u6210\uff0c\u5426\u5219\u5bf9\u5e94\u4e00\u4e2a\u76ee\u6807\u4ed3\u5e93\u7684commit hash\n    )\n    # target_repo_hierarchical_tree: \"TargetItem\" = field(\n    #     default_factory=lambda: TargetItem()\n    # )  # \u6574\u4e2arepo\u7684\u6587\u4ef6\u7ed3\u6784\n    target_obj_list = []\n    white_list: Any[List] = None\n\n    fake_file_reflection: Dict[str, str] = field(default_factory=dict)\n    jump_files: List[str] = field(default_factory=list)\n    deleted_items_from_older_meta: List[List] = field(default_factory=list)\n\n    in_generation_process: bool = False\n\n    checkpoint_lock: threading.Lock = threading.Lock()\n\n    def init_meta_info(self, repo_path, target_path, target_info_list):\n        self.target_path = target_path\n        self.repo_path = repo_path\n        self.parse_target_reference(target_info_list,self.checkpoint_lock)\n\n    @staticmethod\n    def find_obj_with_lineno(start_line, target_obj_list) -> (str, int):\n\n        referencer_index_list = []\n        for index, now_obj in enumerate(target_obj_list):\n            # \u627e\u6240\u6709\u5305\u542b\u7684\u8282\u70b9\n            if now_obj.code_start_line <= start_line <= now_obj.code_end_line:\n                referencer_index_list.append(index)\n\n        if len(referencer_index_list) == 0:\n            return None, None\n\n        if len(referencer_index_list) >= 1:\n            #     \u53e0\u52a0\u591a\u5c42\uff0c\u9700\u8981\u5904\u7406\n\n            start_line_dict = {index: target_obj_list[index].code_start_line for index in referencer_index_list}\n            hierarchy_tuple_list = sorted(start_line_dict.items(), key=lambda item: item[1], reverse=False)\n            # hierarchy_path = [str(hierarchy_path_tuple[index][-1]) for index, val in hierarchy_path_tuple]\n\n            referencer_hierarchy = \"/\".join(\n                target_obj_list[now_tuple[0]].obj_name for now_tuple in hierarchy_tuple_list)\n            # \u88ab\u8c01\u5f15\u7528\n\n            # print(referencer_hierarchy,hierarchy_tuple_list[-1][1])\n            return referencer_hierarchy, hierarchy_tuple_list[-1][0]\n\n    def parse_target_reference(self, target_info_list,lock):\n        target_obj_list = self.from_target_info_json(target_info_list)\n        # List[TargetItem]                          List[Dict]\n        count = 0\n        try:\n            for index, now_obj in enumerate(target_obj_list):\n                count += 1\n                referencer_index_list = []\n                \"\"\"\u5728\u6587\u4ef6\u5185\u904d\u5386\u6240\u6709\u53d8\u91cf\"\"\"\n\n                in_file_only = False\n                rel_file_path = self.target_path\n                with lock:\n                    reference_list = find_all_referencer(\n                        repo_path=self.repo_path,\n                        variable_name=now_obj.obj_name,\n                        file_path=rel_file_path,\n                        line_number=now_obj.content[\"code_start_line\"],\n                        column_number=now_obj.content[\"name_column\"],\n                        in_file_only=in_file_only,\n                    )\n\n                for referencer_pos in reference_list:  # \u5bf9\u4e8e\u6bcf\u4e2a\u5f15\u7528\n\n                    # \u662f\u4e0d\u662f\u81ea\u5df1\u7684\u5f15\u7528\uff0c \u662f\u5219\u8df3\u8fc7\u4e0d\u662f\u5219\u5165\u53c2\n                    if now_obj.code_start_line <= referencer_pos[1] <= now_obj.code_end_line:\n                        continue\n\n                    # \u5f15\u7528\u8005\u4e0b\u6807\u5217\u8868\uff0c\u82e5=1\u5219\u88ab\u51fd\u6570\u5f15\u7528\uff0c\u82e5\u300b=1\u5219\u53ef\u80fd\u88ab\u67d0\u7c7b\u7684\u51fd\u6570\u6216\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u51fd\u6570\u5f15\u7528\u3002\n                    referencer_name, referencer_index = self.find_obj_with_lineno(referencer_pos[1], target_obj_list)\n                    now_obj_path, now_obj_index = self.find_obj_with_lineno(now_obj.code_start_line, target_obj_list)\n                    # \u5199\u5165\u5f15\u7528\u4fe1\u606f\uff0c\u9700\u8981\u5c06targetitem\u8282\u70b9\u5199\u5165\uff0c\u9700\u8981\u53bb\u91cd\n                    if referencer_name is not None:\n                        if referencer_index not in referencer_index_list:\n                            target_obj_list[index].who_reference_me_name_list.append(referencer_name)\n                            target_obj_list[referencer_index].reference_who_name_list.append(now_obj_path)\n\n                            temp_referencer = target_obj_list[referencer_index]\n\n                            target_obj_list[index].who_reference_me.append(temp_referencer)\n                            target_obj_list[referencer_index].reference_who.append(now_obj)\n                            referencer_index_list.append(referencer_index)\n\n            # \u540c\u6b65content\u4e2d\u7684\u5f15\u7528\u4fe1\u606f\n            def refresh_item_content(target_obj_list):\n                for index, now_obj in enumerate(target_obj_list):\n                    target_obj_list[index].content[\"who_reference_me\"] = now_obj.who_reference_me_name_list\n                    target_obj_list[index].content[\"reference_who\"] = now_obj.reference_who_name_list\n                    target_obj_list[index].content[\"item_status\"] = now_obj.item_status.to_str()\n\n                return target_obj_list\n\n            self.target_obj_list = refresh_item_content(target_obj_list)\n        except Exception as e:\n            print(e)\n            raise e\n\n    def from_target_to_dictlist(self):\n        target_obj_list = self.target_obj_list\n        target_path = self.target_path\n\n        target_info_list = []\n        target_dict = {}\n        for item in target_obj_list:\n            target_info_list.append(item.content)\n\n        target_dict[target_path] = target_info_list\n        return target_dict\n\n\n    @staticmethod\n    def get_item_list(target_info_list):\n\n        obj_item_list: List[TargetItem] = []\n        for value in target_info_list:\n\n            obj_doc_item = TargetItem(\n                obj_name=value[\"name\"],\n                content=value,\n                md_content=value[\"md_content\"],\n                code_start_line=value[\"code_start_line\"],\n                code_end_line=value[\"code_end_line\"],\n                item_type=TargetItemType.to_target_item_type(value[\"type\"])\n            )\n\n            # \u5904\u7406\u5f15\u7528\u8282\u70b9\uff0c\u5c06\u5f15\u7528\u8005\u8282\u70b9\u52a0\u5165\u5f53\u524d\u8282\u70b9\n            if \"item_status\" in value.keys():\n                obj_doc_item.item_status = TargetItemStatus[value[\"item_status\"]]\n            if \"reference_who\" in value.keys():\n                obj_doc_item.reference_who_name_list = value[\"reference_who\"]\n            if \"special_reference_type\" in value.keys():\n                obj_doc_item.special_reference_type = value[\n                    \"special_reference_type\"\n                ]\n            if \"who_reference_me\" in value.keys():\n                obj_doc_item.who_reference_me_name_list = value[\"who_reference_me\"]\n            obj_item_list.append(obj_doc_item)\n        # print(obj_item_list)\n        return obj_item_list\n\n    def from_target_info_json(self, target_info_list):\n\n        # print(target_info_list)\n        if len(target_info_list) > 0:\n            return self.get_item_list(target_info_list)\n        else:\n            json_path = os.path.join(self.repo_path, \"target_doc_record\", self.target_path.replace(\".py\", \".json\"))\n            if not os.path.exists(json_path):\n                return None\n            else:\n                with open(json_path, \"r\", encoding=\"utf-8\") as reader:\n                    obj_dict = json.load(reader)\n                    info_list = obj_dict.get(self.target_path)\n                    return self.get_item_list(info_list)\n",
            "name_column": 6,
            "who_reference_me": [
                "find_all_referencer"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "init_meta_info",
            "md_content": [
                "**init_meta_info**: init_meta_info \u51fd\u6570\u7684\u529f\u80fd\u662f\u521d\u59cb\u5316\u5bf9\u8c61\u7684\u5143\u4fe1\u606f\u5e76\u542f\u52a8\u76ee\u6807\u5f15\u7528\u5206\u6790\u6d41\u7a0b\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 repo_path: \u8868\u793a\u4ee3\u7801\u4ed3\u5e93\u6839\u76ee\u5f55\u7684\u8def\u5f84  \n\u00b7 target_path: \u9700\u8981\u5206\u6790\u7684\u76ee\u6807\u6587\u4ef6\u8def\u5f84  \n\u00b7 target_info_list: \u5305\u542b\u76ee\u6807\u5bf9\u8c61\u4fe1\u606f\u7684\u5217\u8868\u6570\u636e\u7ed3\u6784  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7\u4e09\u4e2a\u6838\u5fc3\u6b65\u9aa4\u5b9e\u73b0\u529f\u80fd\uff1a  \n1. \u5b58\u50a8\u8def\u5f84\u914d\u7f6e\uff1a\u5c06\u8f93\u5165\u7684repo_path\u548ctarget_path\u5206\u522b\u4fdd\u5b58\u5230self.repo_path\u548cself.target_path\u5b9e\u4f8b\u53d8\u91cf\uff0c\u4e3a\u540e\u7eed\u64cd\u4f5c\u63d0\u4f9b\u8def\u5f84\u57fa\u51c6  \n2. \u5f15\u7528\u5173\u7cfb\u89e3\u6790\uff1a\u8c03\u7528parse_target_reference\u65b9\u6cd5\uff0c\u4f20\u5165target_info_list\u548c\u5b9e\u4f8b\u7684checkpoint_lock\u9501\u5bf9\u8c61\u3002\u8be5\u9501\u5bf9\u8c61\u7528\u4e8e\u786e\u4fdd\u591a\u7ebf\u7a0b\u73af\u5883\u4e0bfind_all_referencer\u8c03\u7528\u7684\u7ebf\u7a0b\u5b89\u5168  \n3. \u6570\u636e\u6301\u4e45\u5316\uff1a\u901a\u8fc7parse_target_reference\u65b9\u6cd5\u6700\u7ec8\u5c06\u5904\u7406\u540e\u7684target_obj_list\u5b58\u50a8\u5230self.target_obj_list\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5b8c\u6210\u5143\u4fe1\u606f\u521d\u59cb\u5316  \n\n\u5728\u9879\u76ee\u8c03\u7528\u5173\u7cfb\u4e2d\uff1a  \n- \u8be5\u51fd\u6570\u5c5e\u4e8e\u8c03\u7528\u94fe\u7684\u8d77\u59cb\u7aef\uff0c\u88ab\u66f4\u9ad8\u7ea7\u7684\u521d\u59cb\u5316\u6d41\u7a0b\u8c03\u7528  \n- \u76f4\u63a5\u8c03\u7528parse_target_reference\u65b9\u6cd5\u8fdb\u884c\u6df1\u5ea6\u5f15\u7528\u5206\u6790  \n- \u95f4\u63a5\u4f9d\u8d56find_all_referencer\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4f7f\u7528Jedi\u5e93\u8fdb\u884c\u9759\u6001\u4ee3\u7801\u5206\u6790\uff0c\u8fd4\u56de\u53d8\u91cf\u5f15\u7528\u4f4d\u7f6e\u4fe1\u606f  \n- \u901a\u8fc7checkpoint_lock\u4e0e\u53ef\u80fd\u5b58\u5728\u7684\u591a\u7ebf\u7a0b\u73af\u5883\u8fdb\u884c\u4ea4\u4e92\uff0c\u4fdd\u8bc1\u5e76\u53d1\u5b89\u5168  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. target_info_list\u9700\u8981\u7b26\u5408from_target_info_json\u65b9\u6cd5\u7684\u8f93\u5165\u683c\u5f0f\u8981\u6c42  \n2. checkpoint_lock\u5e94\u7531\u8c03\u7528\u65b9\u786e\u4fdd\u6b63\u786e\u521d\u59cb\u5316\u5e76\u4f20\u9012  \n3. repo_path\u548ctarget_path\u5e94\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u4ee5\u4fdd\u8bc1\u8def\u5f84\u89e3\u6790\u51c6\u786e\u6027  \n4. \u5f02\u5e38\u4f1a\u76f4\u63a5\u5411\u4e0a\u629b\u51fa\uff0c\u8c03\u7528\u65b9\u9700\u8981\u5904\u7406\u53ef\u80fd\u53d1\u751f\u7684Jedi\u5206\u6790\u5f02\u5e38\u548c\u6587\u4ef6IO\u5f02\u5e38  \n5. \u76ee\u6807\u6587\u4ef6\u89e3\u6790\u4f9d\u8d56\u4ee3\u7801\u5e93\u7684\u672c\u5730\u5b8c\u6574\u526f\u672c\uff0c\u9700\u786e\u4fddrepo_path\u6709\u6548\u6027  \n6. \u5f15\u7528\u5206\u6790\u7ed3\u679c\u6700\u7ec8\u4f1a\u5199\u5165\u5b9e\u4f8b\u7684target_obj_list\u5c5e\u6027\uff0c\u9700\u907f\u514d\u540e\u7eed\u64cd\u4f5c\u610f\u5916\u4fee\u6539\u8be5\u5c5e\u6027"
            ],
            "code_start_line": 67,
            "code_end_line": 70,
            "params": [
                "self",
                "repo_path",
                "target_path",
                "target_info_list"
            ],
            "have_return": false,
            "code_content": "    def init_meta_info(self, repo_path, target_path, target_info_list):\n        self.target_path = target_path\n        self.repo_path = repo_path\n        self.parse_target_reference(target_info_list,self.checkpoint_lock)\n",
            "name_column": 8,
            "who_reference_me": [
                "find_all_referencer"
            ],
            "reference_who": [
                "MetaInfo/parse_target_reference"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "find_obj_with_lineno",
            "md_content": [
                "**find_obj_with_lineno**: find_obj_with_lineno \u51fd\u6570\u7684\u529f\u80fd\u662f\u6839\u636e\u4ee3\u7801\u884c\u53f7\u5728\u76ee\u6807\u5bf9\u8c61\u5217\u8868\u4e2d\u5b9a\u4f4d\u76f8\u5173\u5bf9\u8c61\u5e76\u6784\u5efa\u5f15\u7528\u5c42\u7ea7\u8def\u5f84\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 start_line: \u9700\u8981\u5b9a\u4f4d\u7684\u6e90\u4ee3\u7801\u884c\u53f7\uff08\u6574\u6570\u7c7b\u578b\uff09  \n\u00b7 target_obj_list: \u5305\u542b\u76ee\u6807\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u9700\u5305\u542b code_start_line\u3001code_end_line \u548c obj_name \u5c5e\u6027  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7\u904d\u5386 target_obj_list \u7b5b\u9009\u51fa\u6240\u6709\u5305\u542b\u6307\u5b9a start_line \u7684\u5bf9\u8c61\uff08\u5373\u6ee1\u8db3 now_obj.code_start_line \u2264 start_line \u2264 now_obj.code_end_line \u7684\u5bf9\u8c61\uff09\uff0c\u968f\u540e\u6309\u8fd9\u4e9b\u5bf9\u8c61\u7684 code_start_line \u8fdb\u884c\u5347\u5e8f\u6392\u5217\u3002\u6700\u7ec8\u8fd4\u56de\u7531 obj_name \u5c5e\u6027\u62fc\u63a5\u7684\u5c42\u7ea7\u8def\u5f84\u5b57\u7b26\u4e32\uff08\u5982 \"ClassA/MethodB\"\uff09\u548c\u5c42\u7ea7\u8def\u5f84\u4e2d\u6700\u540e\u4e00\u4e2a\u5bf9\u8c61\u7684\u7d22\u5f15\u3002  \n\n\u5728\u9879\u76ee\u4e2d\u88ab parse_target_reference \u65b9\u6cd5\u8c03\u7528\uff0c\u7528\u4e8e\u786e\u5b9a\u4ee3\u7801\u5f15\u7528\u5173\u7cfb\uff1a  \n1. \u5f53\u68c0\u6d4b\u5230\u5916\u90e8\u5f15\u7528\u65f6\uff0c\u901a\u8fc7\u8be5\u51fd\u6570\u5b9a\u4f4d\u5f15\u7528\u8005\uff08referencer\uff09\u548c\u88ab\u5f15\u7528\u8005\uff08now_obj\uff09\u5728 target_obj_list \u4e2d\u7684\u5c42\u7ea7\u5173\u7cfb  \n2. \u8fd4\u56de\u7684\u5c42\u7ea7\u8def\u5f84\u7528\u4e8e\u8bb0\u5f55\u5bf9\u8c61\u95f4\u7684\u5f15\u7528\u94fe\uff08\u5982 who_reference_me_name_list \u548c reference_who_name_list\uff09  \n3. \u7d22\u5f15\u503c\u7528\u4e8e\u76f4\u63a5\u64cd\u4f5c target_obj_list \u4e2d\u5bf9\u5e94\u7684 TargetItem \u5bf9\u8c61\uff0c\u5efa\u7acb\u53cc\u5411\u5f15\u7528\u5173\u7cfb  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n\u00b7 target_obj_list \u4e2d\u7684\u5bf9\u8c61\u5fc5\u987b\u5305\u542b code_start_line/code_end_line \u5c5e\u6027\u7528\u4e8e\u884c\u53f7\u533a\u95f4\u5224\u65ad  \n\u00b7 \u5f53\u5b58\u5728\u5d4c\u5957\u7ed3\u6784\u65f6\uff08\u5982\u7c7b\u5305\u542b\u65b9\u6cd5\uff0c\u65b9\u6cd5\u5305\u542b\u5185\u90e8\u51fd\u6570\uff09\uff0c\u8fd4\u56de\u7684\u5c42\u7ea7\u8def\u5f84\u53cd\u6620\u4ee3\u7801\u7ed3\u6784\u5c42\u6b21  \n\u00b7 \u8fd4\u56de\u7684\u7d22\u5f15\u6307\u5411\u5c42\u7ea7\u8def\u5f84\u4e2d\u6700\u6df1\u5c42\uff08\u6700\u540e\u51fa\u73b0\uff09\u7684\u5bf9\u8c61\uff0c\u800c\u975e\u539f\u59cb\u5217\u8868\u987a\u5e8f  \n\u00b7 \u82e5\u672a\u627e\u5230\u5339\u914d\u5bf9\u8c61\uff0c\u8fd4\u56de (None, None) \u9700\u5728\u8c03\u7528\u65b9\u8fdb\u884c\u7a7a\u503c\u5904\u7406  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n(\"Module/ClassA/method_parse\", 12) \u8868\u793a\u7b2c12\u53f7\u5bf9\u8c61\u5728\u5c42\u7ea7\u8def\u5f84 \"Module/ClassA/method_parse\" \u4e2d"
            ],
            "code_start_line": 73,
            "code_end_line": 96,
            "params": [
                "start_line",
                "target_obj_list"
            ],
            "have_return": true,
            "code_content": "    def find_obj_with_lineno(start_line, target_obj_list) -> (str, int):\n\n        referencer_index_list = []\n        for index, now_obj in enumerate(target_obj_list):\n            # \u627e\u6240\u6709\u5305\u542b\u7684\u8282\u70b9\n            if now_obj.code_start_line <= start_line <= now_obj.code_end_line:\n                referencer_index_list.append(index)\n\n        if len(referencer_index_list) == 0:\n            return None, None\n\n        if len(referencer_index_list) >= 1:\n            #     \u53e0\u52a0\u591a\u5c42\uff0c\u9700\u8981\u5904\u7406\n\n            start_line_dict = {index: target_obj_list[index].code_start_line for index in referencer_index_list}\n            hierarchy_tuple_list = sorted(start_line_dict.items(), key=lambda item: item[1], reverse=False)\n            # hierarchy_path = [str(hierarchy_path_tuple[index][-1]) for index, val in hierarchy_path_tuple]\n\n            referencer_hierarchy = \"/\".join(\n                target_obj_list[now_tuple[0]].obj_name for now_tuple in hierarchy_tuple_list)\n            # \u88ab\u8c01\u5f15\u7528\n\n            # print(referencer_hierarchy,hierarchy_tuple_list[-1][1])\n            return referencer_hierarchy, hierarchy_tuple_list[-1][0]\n",
            "name_column": 8,
            "who_reference_me": [
                "MetaInfo/parse_target_reference",
                "MetaInfo/parse_target_reference/refresh_item_content"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "parse_target_reference",
            "md_content": [
                "**parse_target_reference**:  parse_target_reference \u51fd\u6570\u7684\u529f\u80fd\u662f\u5206\u6790\u4ee3\u7801\u5bf9\u8c61\u4e4b\u95f4\u7684\u5f15\u7528\u5173\u7cfb\u5e76\u6784\u5efa\u53cc\u5411\u5f15\u7528\u56fe\u8c31\u3002\n\n**\u53c2\u6570(parameters)**:\n\u00b7 target_info_list: \u5305\u542b\u76ee\u6807\u5bf9\u8c61\u5143\u6570\u636e\u7684\u539f\u59cb\u4fe1\u606f\u5217\u8868\uff0c\u5c06\u88ab\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u5bf9\u8c61\u5217\u8868\n\u00b7 lock: \u7ebf\u7a0b\u9501\u5bf9\u8c61\uff0c\u7528\u4e8e\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u8d44\u6e90\u8bbf\u95ee\u5b89\u5168\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u9996\u5148\u901a\u8fc7from_target_info_json\u5c06\u539f\u59cbJSON\u683c\u5f0f\u7684target_info_list\u8f6c\u6362\u4e3aTargetItem\u5bf9\u8c61\u5217\u8868\u3002\u968f\u540e\u904d\u5386\u6bcf\u4e2a\u76ee\u6807\u5bf9\u8c61\uff0c\u4f7f\u7528Jedi\u5e93\u7684find_all_referencer\u67e5\u627e\u4ee3\u7801\u4ed3\u5e93\u4e2d\u6240\u6709\u5f15\u7528\u8be5\u53d8\u91cf\u7684\u4f4d\u7f6e\u3002\u901a\u8fc7find_obj_with_lineno\u65b9\u6cd5\u7cbe\u786e\u5b9a\u4f4d\u5f15\u7528\u8005\u6240\u5c5e\u7684\u4ee3\u7801\u5bf9\u8c61\uff0c\u5efa\u7acb\u4ee5\u4e0b\u53cc\u5411\u5173\u8054\uff1a\n1. \u5f53\u524d\u5bf9\u8c61\uff08now_obj\uff09\u7684who_reference_me/who_reference_me_name_list\u8bb0\u5f55\u6240\u6709\u5f15\u7528\u8005\n2. \u5f15\u7528\u8005\u5bf9\u8c61\uff08referencer\uff09\u7684reference_who/reference_who_name_list\u8bb0\u5f55\u88ab\u5f15\u7528\u5bf9\u8c61\n\n\u5185\u90e8\u51fd\u6570refresh_item_content\u5c06\u5185\u5b58\u5bf9\u8c61\u4e2d\u7684\u5f15\u7528\u5173\u7cfb\u540c\u6b65\u5230content\u5b57\u5178\u7ed3\u6784\u4e2d\uff0c\u6700\u7ec8\u66f4\u65b0\u5b9e\u4f8b\u7684target_obj_list\u5c5e\u6027\u3002\u8be5\u51fd\u6570\u88abinit_meta_info\u65b9\u6cd5\u8c03\u7528\uff0c\u4f5c\u4e3a\u5bf9\u8c61\u5143\u6570\u636e\u521d\u59cb\u5316\u6d41\u7a0b\u7684\u6838\u5fc3\u73af\u8282\uff0c\u5176\u8f93\u51fa\u7ed3\u679c\u5c06\u76f4\u63a5\u5f71\u54cd\u540e\u7eedconvert_to_markdown\u7684\u6587\u6863\u751f\u6210\u6548\u679c\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. \u9700\u8981\u914d\u5408\u7ebf\u7a0b\u9501\u4f7f\u7528\u4ee5\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u7ebf\u7a0b\u5b89\u5168\n2. \u4f9d\u8d56Jedi\u5e93\u8fdb\u884c\u9759\u6001\u4ee3\u7801\u5206\u6790\uff0c\u9700\u786e\u4fddrepo_path\u5305\u542b\u6709\u6548\u7684Python\u4ee3\u7801\u4ed3\u5e93\n3. code_start_line/code_end_line\u7684\u51c6\u786e\u6027\u76f4\u63a5\u5f71\u54cd\u5f15\u7528\u8fc7\u6ee4\u903b\u8f91\n4. \u5d4c\u5957\u7ed3\u6784\u5bf9\u8c61\u901a\u8fc7\"/\"\u5206\u9694\u7684\u5c42\u7ea7\u8def\u5f84\u8fdb\u884c\u552f\u4e00\u6807\u8bc6\n5. \u5f02\u5e38\u5904\u7406\u4f1a\u91cd\u65b0\u629b\u51fa\u9519\u8bef\uff0c\u8c03\u7528\u65b9\u9700\u505a\u597d\u9519\u8bef\u6355\u83b7\n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u76ee\u6807\u5bf9\u8c61\u7684content\u5b57\u6bb5\u5c06\u88ab\u66f4\u65b0\u4e3a\uff1a\n{\n    \"who_reference_me\": [\"ClassA/method_b\", \"function_c\"],\n    \"reference_who\": [\"utils.helper\"],\n    \"item_status\": \"analyzed\",\n    ...\n}"
            ],
            "code_start_line": 98,
            "code_end_line": 153,
            "params": [
                "self",
                "target_info_list",
                "lock"
            ],
            "have_return": true,
            "code_content": "    def parse_target_reference(self, target_info_list,lock):\n        target_obj_list = self.from_target_info_json(target_info_list)\n        # List[TargetItem]                          List[Dict]\n        count = 0\n        try:\n            for index, now_obj in enumerate(target_obj_list):\n                count += 1\n                referencer_index_list = []\n                \"\"\"\u5728\u6587\u4ef6\u5185\u904d\u5386\u6240\u6709\u53d8\u91cf\"\"\"\n\n                in_file_only = False\n                rel_file_path = self.target_path\n                with lock:\n                    reference_list = find_all_referencer(\n                        repo_path=self.repo_path,\n                        variable_name=now_obj.obj_name,\n                        file_path=rel_file_path,\n                        line_number=now_obj.content[\"code_start_line\"],\n                        column_number=now_obj.content[\"name_column\"],\n                        in_file_only=in_file_only,\n                    )\n\n                for referencer_pos in reference_list:  # \u5bf9\u4e8e\u6bcf\u4e2a\u5f15\u7528\n\n                    # \u662f\u4e0d\u662f\u81ea\u5df1\u7684\u5f15\u7528\uff0c \u662f\u5219\u8df3\u8fc7\u4e0d\u662f\u5219\u5165\u53c2\n                    if now_obj.code_start_line <= referencer_pos[1] <= now_obj.code_end_line:\n                        continue\n\n                    # \u5f15\u7528\u8005\u4e0b\u6807\u5217\u8868\uff0c\u82e5=1\u5219\u88ab\u51fd\u6570\u5f15\u7528\uff0c\u82e5\u300b=1\u5219\u53ef\u80fd\u88ab\u67d0\u7c7b\u7684\u51fd\u6570\u6216\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u51fd\u6570\u5f15\u7528\u3002\n                    referencer_name, referencer_index = self.find_obj_with_lineno(referencer_pos[1], target_obj_list)\n                    now_obj_path, now_obj_index = self.find_obj_with_lineno(now_obj.code_start_line, target_obj_list)\n                    # \u5199\u5165\u5f15\u7528\u4fe1\u606f\uff0c\u9700\u8981\u5c06targetitem\u8282\u70b9\u5199\u5165\uff0c\u9700\u8981\u53bb\u91cd\n                    if referencer_name is not None:\n                        if referencer_index not in referencer_index_list:\n                            target_obj_list[index].who_reference_me_name_list.append(referencer_name)\n                            target_obj_list[referencer_index].reference_who_name_list.append(now_obj_path)\n\n                            temp_referencer = target_obj_list[referencer_index]\n\n                            target_obj_list[index].who_reference_me.append(temp_referencer)\n                            target_obj_list[referencer_index].reference_who.append(now_obj)\n                            referencer_index_list.append(referencer_index)\n\n            # \u540c\u6b65content\u4e2d\u7684\u5f15\u7528\u4fe1\u606f\n            def refresh_item_content(target_obj_list):\n                for index, now_obj in enumerate(target_obj_list):\n                    target_obj_list[index].content[\"who_reference_me\"] = now_obj.who_reference_me_name_list\n                    target_obj_list[index].content[\"reference_who\"] = now_obj.reference_who_name_list\n                    target_obj_list[index].content[\"item_status\"] = now_obj.item_status.to_str()\n\n                return target_obj_list\n\n            self.target_obj_list = refresh_item_content(target_obj_list)\n        except Exception as e:\n            print(e)\n            raise e\n",
            "name_column": 8,
            "who_reference_me": [
                "MetaInfo/init_meta_info"
            ],
            "reference_who": [
                "find_all_referencer",
                "MetaInfo/find_obj_with_lineno",
                "MetaInfo/parse_target_reference/refresh_item_content",
                "MetaInfo/from_target_info_json",
                "FileHandler/convert_to_markdown"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "refresh_item_content",
            "md_content": [
                "**refresh_item_content**: refresh_item_content \u51fd\u6570\u7684\u529f\u80fd\u662f\u66f4\u65b0\u76ee\u6807\u5bf9\u8c61\u5217\u8868\u4e2d\u5404\u5bf9\u8c61\u7684 content \u5c5e\u6027\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_obj_list: \u5305\u542b\u591a\u4e2a\u76ee\u6807\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u9700\u5305\u542b\u7279\u5b9a\u5c5e\u6027\uff08\u5982 who_reference_me_name_list\u3001reference_who_name_list \u548c item_status\uff09\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u904d\u5386 target_obj_list \u4e2d\u7684\u6bcf\u4e2a\u76ee\u6807\u5bf9\u8c61\uff08now_obj\uff09\uff0c\u5c06\u5176\u5c5e\u6027 who_reference_me_name_list\uff08\u5f15\u7528\u5f53\u524d\u5bf9\u8c61\u7684\u5bf9\u8c61\u540d\u79f0\u5217\u8868\uff09\u3001reference_who_name_list\uff08\u5f53\u524d\u5bf9\u8c61\u5f15\u7528\u7684\u5176\u4ed6\u5bf9\u8c61\u540d\u79f0\u5217\u8868\uff09\u548c item_status.to_str()\uff08\u5bf9\u8c61\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff09\u540c\u6b65\u81f3\u5176 content \u5b57\u5178\u4e2d\u5bf9\u5e94\u7684\u952e\u503c\u3002\u6700\u7ec8\u8fd4\u56de\u66f4\u65b0\u540e\u7684\u76ee\u6807\u5bf9\u8c61\u5217\u8868\u3002\n\n\u5728\u9879\u76ee\u4e2d\uff0c\u6b64\u51fd\u6570\u88ab parse_target_reference \u65b9\u6cd5\u8c03\u7528\u3002parse_target_reference \u8d1f\u8d23\u89e3\u6790\u76ee\u6807\u5bf9\u8c61\u4e4b\u95f4\u7684\u5f15\u7528\u5173\u7cfb\u540e\uff0c\u8c03\u7528 refresh_item_content \u5c06\u4e34\u65f6\u5b58\u50a8\u7684\u5f15\u7528\u5173\u7cfb\u6570\u636e\uff08\u5982 who_reference_me_name_list\uff09\u540c\u6b65\u81f3\u5bf9\u8c61\u7684 content \u5c5e\u6027\u4e2d\uff0c\u4ee5\u786e\u4fdd\u6570\u636e\u6301\u4e45\u5316\u6216\u5bf9\u5916\u66b4\u9732\u65f6\u7684\u5b8c\u6574\u6027\u3002\u6b64\u51fd\u6570\u4e0d\u76f4\u63a5\u8c03\u7528\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u4f9d\u8d56\u4e8e\u76ee\u6807\u5bf9\u8c61\u7684\u7ed3\u6784\uff08\u5982\u9700\u5b9e\u73b0 item_status.to_str() \u65b9\u6cd5\uff09\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u76ee\u6807\u5bf9\u8c61\u5fc5\u987b\u5305\u542b who_reference_me_name_list\u3001reference_who_name_list \u548c item_status \u5c5e\u6027\uff0c\u5426\u5219\u4f1a\u5f15\u53d1 AttributeError\u3002  \n2. \u51fd\u6570\u76f4\u63a5\u4fee\u6539\u4f20\u5165\u7684 target_obj_list \u5bf9\u8c61\uff0c\u800c\u975e\u521b\u5efa\u65b0\u5217\u8868\uff0c\u56e0\u6b64\u8c03\u7528\u540e\u539f\u5217\u8868\u5185\u5bb9\u4f1a\u88ab\u66f4\u65b0\u3002  \n3. item_status.to_str() \u9700\u8fd4\u56de\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4 content[\"item_status\"] \u5b58\u50a8\u975e\u9884\u671f\u503c\u3002\n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u5047\u8bbe\u67d0\u76ee\u6807\u5bf9\u8c61\u521d\u59cb content \u4e3a\u7a7a\uff0c\u8c03\u7528\u540e\u5176 content \u53ef\u80fd\u4e3a\uff1a  \n```python\n{\n    \"who_reference_me\": [\"ClassA/method1\", \"FunctionB\"],\n    \"reference_who\": [\"ModuleC/variableX\"],\n    \"item_status\": \"active\"\n}\n```"
            ],
            "code_start_line": 142,
            "code_end_line": 148,
            "params": [
                "target_obj_list"
            ],
            "have_return": true,
            "code_content": "            def refresh_item_content(target_obj_list):\n                for index, now_obj in enumerate(target_obj_list):\n                    target_obj_list[index].content[\"who_reference_me\"] = now_obj.who_reference_me_name_list\n                    target_obj_list[index].content[\"reference_who\"] = now_obj.reference_who_name_list\n                    target_obj_list[index].content[\"item_status\"] = now_obj.item_status.to_str()\n\n                return target_obj_list\n",
            "name_column": 16,
            "who_reference_me": [
                "MetaInfo/parse_target_reference"
            ],
            "reference_who": [
                "MetaInfo/find_obj_with_lineno"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "from_target_to_dictlist",
            "md_content": [
                "**from_target_to_dictlist**: \u5c06\u76ee\u6807\u5bf9\u8c61\u5217\u8868\u7684\u5185\u5bb9\u6309\u6307\u5b9a\u8def\u5f84\u7ec4\u7ec7\u4e3a\u5b57\u5178\u7ed3\u6784\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 \u65e0\u663e\u5f0f\u53c2\u6570\uff08\u901a\u8fc7\u7c7b\u5b9e\u4f8b\u5c5e\u6027 self \u9690\u5f0f\u8bbf\u95ee target_obj_list \u548c target_path\uff09\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7\u904d\u5386 self.target_obj_list \u5217\u8868\u4e2d\u7684\u6bcf\u4e2a item \u5bf9\u8c61\uff0c\u63d0\u53d6\u5176 content \u5c5e\u6027\u503c\u5e76\u805a\u5408\u4e3a target_info_list\u3002\u968f\u540e\u4ee5 self.target_path \u4e3a\u952e\uff0c\u5c06\u8be5\u5217\u8868\u4f5c\u4e3a\u503c\u5b58\u5165 target_dict \u5b57\u5178\uff0c\u6700\u7ec8\u8fd4\u56de\u5355\u5c42\u7ed3\u6784\u7684\u5b57\u5178\u3002\u5176\u6838\u5fc3\u4f5c\u7528\u662f\u5c06\u5177\u6709 content \u5c5e\u6027\u7684\u5bf9\u8c61\u96c6\u5408\u8f6c\u6362\u4e3a\u4ee5\u8def\u5f84\u4e3a\u7d22\u5f15\u7684\u6807\u51c6\u5316\u6570\u636e\u7ed3\u6784\u3002\n\n\u5728\u9879\u76ee\u4e2d\uff0c\u6b64\u51fd\u6570\u53ef\u80fd\u88ab\u9700\u8981\u7ed3\u6784\u5316\u8f93\u51fa\u6570\u636e\u7684\u6a21\u5757\u8c03\u7528\uff08\u4f8b\u5982\u751f\u6210 JSON \u683c\u5f0f\u62a5\u544a\u6216\u8fdb\u884c\u8de8\u6a21\u5757\u6570\u636e\u4f20\u9012\uff09\u3002\u5c3d\u7ba1\u5f53\u524d\u63d0\u4f9b\u7684 find_all_referencer \u51fd\u6570\u672a\u76f4\u63a5\u8c03\u7528\u5b83\uff0c\u4f46\u6839\u636e\u51fd\u6570\u540d\u79f0\u63a8\u65ad\uff0cfrom_target_to_dictlist \u53ef\u80fd\u5c5e\u4e8e\u5f15\u7528\u5173\u7cfb\u5206\u6790\u6d41\u7a0b\u7684\u540e\u7eed\u6570\u636e\u5904\u7406\u73af\u8282\uff0c\u7528\u4e8e\u5c06\u539f\u59cb\u5f15\u7528\u4f4d\u7f6e\u4fe1\u606f\u8f6c\u6362\u4e3a\u66f4\u6613\u6d88\u8d39\u7684\u5b57\u5178\u683c\u5f0f\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u4f9d\u8d56 self.target_obj_list \u5fc5\u987b\u5305\u542b\u5177\u6709 content \u5c5e\u6027\u7684\u6709\u6548\u5bf9\u8c61\uff0c\u5426\u5219\u4f1a\u89e6\u53d1 AttributeError  \n2. self.target_path \u5e94\u9884\u5148\u88ab\u6b63\u786e\u8d4b\u503c\u4e14\u4e3a\u5408\u6cd5\u8def\u5f84\u5b57\u7b26\u4e32  \n3. \u8fd4\u56de\u7684\u5b57\u5178\u59cb\u7ec8\u4e3a\u5355\u952e\u503c\u5bf9\u7ed3\u6784\uff0c\u503c\u7c7b\u578b\u4e3a\u5217\u8868  \n4. \u51fd\u6570\u672a\u5904\u7406\u5217\u8868\u7a7a\u503c\u60c5\u51b5\uff0c\u8c03\u7528\u65b9\u9700\u786e\u4fdd target_obj_list \u5df2\u521d\u59cb\u5316  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n```python\n{\n    \"src/utils/helpers.py\": [\n        \"config_loader\",\n        \"log_formatter\",\n        \"network_handler\"\n    ]\n}\n```"
            ],
            "code_start_line": 155,
            "code_end_line": 165,
            "params": [
                "self"
            ],
            "have_return": true,
            "code_content": "    def from_target_to_dictlist(self):\n        target_obj_list = self.target_obj_list\n        target_path = self.target_path\n\n        target_info_list = []\n        target_dict = {}\n        for item in target_obj_list:\n            target_info_list.append(item.content)\n\n        target_dict[target_path] = target_info_list\n        return target_dict\n",
            "name_column": 8,
            "who_reference_me": [
                "find_all_referencer"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "get_item_list",
            "md_content": [
                "**get_item_list**: get_item_list \u51fd\u6570\u7684\u529f\u80fd\u662f\u5c06\u8f93\u5165\u7684 target_info_list \u8f6c\u6362\u4e3a TargetItem \u5bf9\u8c61\u5217\u8868\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_info_list: \u5305\u542b\u591a\u4e2a\u5b57\u5178\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5b57\u5178\u5fc5\u987b\u5305\u542b name\u3001md_content\u3001code_start_line\u3001code_end_line\u3001type \u7b49\u57fa\u7840\u5b57\u6bb5\uff0c\u53ef\u9009\u5305\u542b item_status\u3001reference_who\u3001special_reference_type\u3001who_reference_me \u7b49\u6269\u5c55\u5b57\u6bb5\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u904d\u5386 target_info_list \u4e2d\u7684\u6bcf\u4e2a\u5b57\u5178\u5143\u7d20\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u6807\u51c6\u5316\u7684 TargetItem \u5bf9\u8c61\u3002\u5177\u4f53\u6d41\u7a0b\u4e3a\uff1a\n1. \u521b\u5efa\u7a7a\u5217\u8868 obj_item_list \u7528\u4e8e\u5b58\u50a8 TargetItem \u5b9e\u4f8b\n2. \u5bf9\u6bcf\u4e2a\u5b57\u5178 value \u6267\u884c\uff1a\n   - \u901a\u8fc7\u5f3a\u5236\u7c7b\u578b\u7ea6\u675f\u521b\u5efa TargetItem \u5bf9\u8c61\uff0c\u6620\u5c04\u57fa\u7840\u5b57\u6bb5\uff1aname\u2192obj_name\uff0ctype\u2192item_type\uff08\u9700\u7ecf TargetItemType \u679a\u4e3e\u8f6c\u6362\uff09\n   - \u5904\u7406\u53ef\u9009\u5b57\u6bb5\uff1aitem_status \u8f6c\u6362\u4e3a TargetItemStatus \u679a\u4e3e\uff0creference_who/special_reference_type/who_reference_me \u76f4\u63a5\u6620\u5c04\n   - \u5c06\u6784\u5efa\u5b8c\u6210\u7684\u5b9e\u4f8b\u52a0\u5165\u8fd4\u56de\u5217\u8868\n3. \u8fd4\u56de\u5305\u542b\u6240\u6709\u8f6c\u6362\u7ed3\u679c\u7684\u5217\u8868\n\n\u5728\u9879\u76ee\u8c03\u7528\u5173\u7cfb\u4e2d\uff0c\u8be5\u51fd\u6570\u88ab from_target_info_json \u65b9\u6cd5\u76f4\u63a5\u8c03\u7528\u3002\u5f53 from_target_info_json \u68c0\u6d4b\u5230\u8f93\u5165\u7684 target_info_list \u4e3a\u7a7a\u65f6\uff0c\u4f1a\u4ece JSON \u6587\u4ef6\u52a0\u8f7d\u6570\u636e\u540e\u8c03\u7528\u672c\u51fd\u6570\u3002\u8fd9\u8868\u660e get_item_list \u662f\u6838\u5fc3\u6570\u636e\u8f6c\u6362\u5c42\uff0c\u8d1f\u8d23\u5c06\u539f\u59cb\u6570\u636e\uff08\u65e0\u8bba\u6765\u81ea\u5185\u5b58\u8fd8\u662f\u6301\u4e45\u5316\u5b58\u50a8\uff09\u7edf\u4e00\u8f6c\u6362\u4e3a\u9879\u76ee\u6807\u51c6\u5bf9\u8c61\u683c\u5f0f\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u8f93\u5165\u5b57\u5178\u5fc5\u987b\u5305\u542b TargetItem \u6784\u9020\u51fd\u6570\u8981\u6c42\u7684\u57fa\u7840\u5b57\u6bb5\uff0c\u5426\u5219\u4f1a\u89e6\u53d1 KeyError\n2. item_status \u548c type \u5b57\u6bb5\u503c\u5fc5\u987b\u4e0e TargetItemStatus/TargetItemType \u679a\u4e3e\u5b9a\u4e49\u4e25\u683c\u5339\u914d\n3. reference_who \u548c who_reference_me \u5b57\u6bb5\u9700\u8981\u9884\u5148\u786e\u4fdd\u5f15\u7528\u7684\u540d\u79f0\u5b58\u5728\u4e8e\u7cfb\u7edf\u4e2d\n4. \u8fd4\u56de\u5217\u8868\u5143\u7d20\u4e3a TargetItem \u5b9e\u4f8b\uff0c\u5176\u5c5e\u6027\u8bbf\u95ee\u65b9\u5f0f\u4e0e\u539f\u59cb\u5b57\u5178\u4e0d\u540c\uff08\u5982 value[\"name\"] \u2192 item.obj_name\uff09\n\n**\u8f93\u51fa\u793a\u4f8b**:  \n[\n TargetItem(obj_name='DataProcessor', content={...}, md_content='## DataProcessor...', code_start_line=45, code_end_line=78, item_type=<TargetItemType.CLASS: 1>, reference_who_name_list=['BaseModel'], who_reference_me_name_list=['Analyzer']),\n TargetItem(obj_name='validate_input', ..., item_type=<TargetItemType.FUNCTION: 2>)\n]"
            ],
            "code_start_line": 169,
            "code_end_line": 196,
            "params": [
                "target_info_list"
            ],
            "have_return": true,
            "code_content": "    def get_item_list(target_info_list):\n\n        obj_item_list: List[TargetItem] = []\n        for value in target_info_list:\n\n            obj_doc_item = TargetItem(\n                obj_name=value[\"name\"],\n                content=value,\n                md_content=value[\"md_content\"],\n                code_start_line=value[\"code_start_line\"],\n                code_end_line=value[\"code_end_line\"],\n                item_type=TargetItemType.to_target_item_type(value[\"type\"])\n            )\n\n            # \u5904\u7406\u5f15\u7528\u8282\u70b9\uff0c\u5c06\u5f15\u7528\u8005\u8282\u70b9\u52a0\u5165\u5f53\u524d\u8282\u70b9\n            if \"item_status\" in value.keys():\n                obj_doc_item.item_status = TargetItemStatus[value[\"item_status\"]]\n            if \"reference_who\" in value.keys():\n                obj_doc_item.reference_who_name_list = value[\"reference_who\"]\n            if \"special_reference_type\" in value.keys():\n                obj_doc_item.special_reference_type = value[\n                    \"special_reference_type\"\n                ]\n            if \"who_reference_me\" in value.keys():\n                obj_doc_item.who_reference_me_name_list = value[\"who_reference_me\"]\n            obj_item_list.append(obj_doc_item)\n        # print(obj_item_list)\n        return obj_item_list\n",
            "name_column": 8,
            "who_reference_me": [
                "MetaInfo/from_target_info_json"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "from_target_info_json",
            "md_content": [
                "**from_target_info_json**: from_target_info_json \u51fd\u6570\u7684\u529f\u80fd\u662f\u5c06\u539f\u59cb\u76ee\u6807\u4fe1\u606f\u5217\u8868\u6216JSON\u6587\u4ef6\u6570\u636e\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316TargetItem\u5bf9\u8c61\u5217\u8868\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_info_list: \u5305\u542b\u76ee\u6807\u5bf9\u8c61\u5143\u6570\u636e\u7684\u539f\u59cb\u4fe1\u606f\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u76f4\u63a5\u4f20\u5165\u7684\u5b57\u5178\u5217\u8868\u6216\u9700\u8981\u4eceJSON\u6587\u4ef6\u52a0\u8f7d\u7684\u6570\u636e\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u662f\u76ee\u6807\u5bf9\u8c61\u5143\u6570\u636e\u8f6c\u6362\u7684\u6838\u5fc3\u67a2\u7ebd\uff0c\u5b9e\u73b0\u4e24\u79cd\u6570\u636e\u6e90\u7684\u7edf\u4e00\u5904\u7406\u903b\u8f91\u3002\u5f53\u8f93\u5165\u53c2\u6570target_info_list\u975e\u7a7a\u65f6\uff0c\u76f4\u63a5\u8c03\u7528get_item_list\u65b9\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3aTargetItem\u5bf9\u8c61\u5217\u8868\u3002\u5f53\u8f93\u5165\u4e3a\u7a7a\u5217\u8868\u65f6\uff0c\u6267\u884c\u4ee5\u4e0b\u6d41\u7a0b\uff1a  \n1. \u6839\u636erepo_path\uff08\u4ee3\u7801\u4ed3\u5e93\u8def\u5f84\uff09\u548ctarget_path\uff08\u5f53\u524d\u5904\u7406\u6587\u4ef6\u8def\u5f84\uff09\u52a8\u6001\u6784\u5efaJSON\u6587\u4ef6\u8def\u5f84\uff0c\u683c\u5f0f\u4e3a\"\u4ed3\u5e93\u8def\u5f84/target_doc_record/\u76ee\u6807\u6587\u4ef6.json\"  \n2. \u68c0\u6d4bJSON\u6587\u4ef6\u5b58\u5728\u6027\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u8fd4\u56deNone  \n3. \u52a0\u8f7d\u5e76\u89e3\u6790JSON\u6587\u4ef6\u5185\u5bb9\uff0c\u63d0\u53d6\u4e0e\u5f53\u524dtarget_path\u5bf9\u5e94\u7684\u4fe1\u606f\u5217\u8868  \n4. \u518d\u6b21\u8c03\u7528get_item_list\u8fdb\u884c\u5bf9\u8c61\u8f6c\u6362  \n\n\u5728\u9879\u76ee\u8c03\u7528\u94fe\u4e2d\uff1a  \n- \u88abparse_target_reference\u65b9\u6cd5\u8c03\u7528\uff0c\u4e3a\u5176\u63d0\u4f9b\u521d\u59cb\u5316\u7684TargetItem\u5bf9\u8c61\u5217\u8868\u7528\u4e8e\u5f15\u7528\u5173\u7cfb\u5206\u6790  \n- \u4f9d\u8d56get_item_list\u65b9\u6cd5\u5b8c\u6210\u5b57\u5178\u5230TargetItem\u5bf9\u8c61\u7684\u8f6c\u6362\uff0c\u8be5\u8f6c\u6362\u8fc7\u7a0b\u4f1a\u8bbe\u7f6e\u5bf9\u8c61\u7684\u5143\u6570\u636e\u5c5e\u6027\uff08\u5982code_start_line\uff09\u3001\u5f15\u7528\u5173\u7cfb\u5c5e\u6027\uff08reference_who\u7b49\uff09\u548c\u72b6\u6001\u5c5e\u6027  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. JSON\u6587\u4ef6\u8def\u5f84\u6784\u5efa\u4f9d\u8d56self.repo_path\u548cself.target_path\u5c5e\u6027\uff0c\u9700\u786e\u4fdd\u8fd9\u4e24\u4e2a\u5c5e\u6027\u5df2\u6b63\u786e\u521d\u59cb\u5316  \n2. \u5f53target_info_list\u4e3a\u7a7a\u4e14JSON\u6587\u4ef6\u7f3a\u5931\u65f6\uff0c\u8fd4\u56deNone\u53ef\u80fd\u5bfc\u81f4\u4e0a\u5c42\u903b\u8f91\u5f02\u5e38\uff0c\u9700\u505a\u597d\u7a7a\u503c\u5904\u7406  \n3. JSON\u6587\u4ef6\u9700\u4fdd\u6301\u4e0e\u4ee3\u7801\u6587\u4ef6\u540c\u540d\u7684\u547d\u540d\u89c4\u8303\uff08\u5982module.py\u5bf9\u5e94module.json\uff09  \n4. \u8fd4\u56de\u7684TargetItem\u5bf9\u8c61\u5217\u8868\u5c06\u643a\u5e26\u5b8c\u6574\u7684\u4ee3\u7801\u4f4d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u5bf9\u540e\u7eed\u7684\u5f15\u7528\u5173\u7cfb\u5206\u6790\u81f3\u5173\u91cd\u8981  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u8fd4\u56de\u7684TargetItem\u5bf9\u8c61\u5217\u8868\u53ef\u80fd\u5305\u542b\u5982\u4e0b\u7ed3\u6784\u5143\u7d20\uff1a\n[\n    TargetItem(\n        obj_name=\"calculate_stats\",\n        content={...},\n        md_content=\"## calculate_stats\\n\u7edf\u8ba1\u8ba1\u7b97\u65b9\u6cd5...\",\n        code_start_line=45,\n        code_end_line=58,\n        item_type=TargetItemType.FUNCTION\n    ),\n    TargetItem(\n        obj_name=\"DataProcessor\",\n        content={...},\n        md_content=\"# DataProcessor\\n\u6570\u636e\u5904\u7406\u7c7b...\",\n        code_start_line=12,\n        code_end_line=43,\n        item_type=TargetItemType.CLASS\n    )\n]"
            ],
            "code_start_line": 198,
            "code_end_line": 211,
            "params": [
                "self",
                "target_info_list"
            ],
            "have_return": true,
            "code_content": "    def from_target_info_json(self, target_info_list):\n\n        # print(target_info_list)\n        if len(target_info_list) > 0:\n            return self.get_item_list(target_info_list)\n        else:\n            json_path = os.path.join(self.repo_path, \"target_doc_record\", self.target_path.replace(\".py\", \".json\"))\n            if not os.path.exists(json_path):\n                return None\n            else:\n                with open(json_path, \"r\", encoding=\"utf-8\") as reader:\n                    obj_dict = json.load(reader)\n                    info_list = obj_dict.get(self.target_path)\n                    return self.get_item_list(info_list)\n",
            "name_column": 8,
            "who_reference_me": [
                "MetaInfo/parse_target_reference"
            ],
            "reference_who": [
                "MetaInfo/get_item_list",
                "FileHandler/convert_to_markdown"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "ClassDef",
            "name": "FileHandler",
            "md_content": [
                "**FileHandler**: FileHandler \u7c7b\u7684\u529f\u80fd\u662f\u89e3\u6790\u6e90\u4ee3\u7801\u6587\u4ef6\u7ed3\u6784\u5e76\u751f\u6210\u7ed3\u6784\u5316\u6587\u6863\u6570\u636e\u3002\n\n**\u5c5e\u6027(atributes)**:  \n\u00b7 target_info_list: List \u7c7b\u578b\uff0c\u5b58\u50a8\u89e3\u6790\u540e\u7684\u4ee3\u7801\u5bf9\u8c61\u4fe1\u606f\u5217\u8868  \n\u00b7 file_name: \u5f53\u524d\u5904\u7406\u7684\u6587\u4ef6\u540d\uff08\u4e0d\u542b\u8def\u5f84\uff09  \n\u00b7 file_dirs: \u5f53\u524d\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u8def\u5f84  \n\u00b7 repo_path: \u4ee3\u7801\u4ed3\u5e93\u6839\u76ee\u5f55\u8def\u5f84  \n\u00b7 target_json_path: JSON\u6587\u6863\u8f93\u51fa\u76ee\u5f55\u8def\u5f84  \n\u00b7 target_json_file: \u5f53\u524d\u6587\u4ef6\u5bf9\u5e94\u7684JSON\u6587\u6863\u5b8c\u6574\u8def\u5f84  \n\u00b7 target_markdown_path: Markdown\u6587\u6863\u8f93\u51fa\u76ee\u5f55\u8def\u5f84  \n\u00b7 target_markdown_file: \u5f53\u524d\u6587\u4ef6\u5bf9\u5e94\u7684Markdown\u6587\u6863\u5b8c\u6574\u8def\u5f84  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5 Class \u662f\u4ee3\u7801\u6587\u6863\u751f\u6210\u7cfb\u7edf\u7684\u6838\u5fc3\u5904\u7406\u5668\uff0c\u4e3b\u8981\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a  \n1. **AST\u89e3\u6790**\uff1a\u901a\u8fc7 get_functions_and_classes \u65b9\u6cd5\u89e3\u6790 Python \u6587\u4ef6\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff08AST\uff09\uff0c\u4f7f\u7528\u9012\u5f52\u904d\u5386\u6280\u672f\uff08add_parent_references\uff09\u5efa\u7acb\u4ee3\u7801\u5143\u7d20\u7684\u7236\u5b50\u5173\u7cfb\uff0c\u51c6\u786e\u8bc6\u522b\u51fd\u6570\uff08\u542b\u5f02\u6b65\u51fd\u6570\uff09\u3001\u7c7b\u5b9a\u4e49\u7684\u8d77\u59cb/\u7ed3\u675f\u884c\u53f7  \n2. **\u4ee3\u7801\u7279\u5f81\u63d0\u53d6**\uff1aget_obj_code_info \u65b9\u6cd5\u6df1\u5ea6\u89e3\u6790\u6bcf\u4e2a\u4ee3\u7801\u5bf9\u8c61\uff0c\u63d0\u53d6\u5305\u542b\u53c2\u6570\u5217\u8868\u3001\u8fd4\u56de\u8bed\u53e5\u5b58\u5728\u6027\u3001\u4ee3\u7801\u5185\u5bb9\u7b4923\u9879\u5143\u6570\u636e  \n3. **\u591a\u683c\u5f0f\u8f93\u51fa**\uff1a\u901a\u8fc7 to_target_json_file \u751f\u6210\u7ed3\u6784\u5316JSON\u6587\u6863\uff0cconvert_to_markdown \u751f\u6210\u53ef\u8bfb\u6027\u6587\u6863\uff0c\u652f\u6301\u5e76\u884c\u5199\u5165\uff08\u542b\u7ebf\u7a0b\u9501\u673a\u5236\uff09  \n4. **\u8def\u5f84\u7ba1\u7406**\uff1a\u81ea\u52a8\u6784\u5efa\u6587\u6863\u8f93\u51fa\u76ee\u5f55\u7ed3\u6784\uff08generate_file_structure\uff09\uff0c\u5904\u7406\u8de8\u5e73\u53f0\u8def\u5f84\u5206\u9694\u7b26\u95ee\u9898  \n\n\u5728\u9879\u76ee\u4e2d\u7684\u8c03\u7528\u5173\u7cfb\uff1a  \n\u00b7 **\u88ab\u8c03\u7528**\uff1a\u7531 find_all_referencer \u7684\u8c03\u7528\u65b9\uff08\u5982 MetaInfo.parse_target_reference\uff09\u95f4\u63a5\u4f7f\u7528\uff0c\u5176\u751f\u6210\u7684 target_info_list \u63d0\u4f9b\u4ee3\u7801\u7ed3\u6784\u57fa\u7840\u6570\u636e\u7528\u4e8e\u5f15\u7528\u5206\u6790  \n\u00b7 **\u8c03\u7528**\uff1a\u4f9d\u8d56 jedi \u5e93\u8fdb\u884c\u9759\u6001\u4ee3\u7801\u5206\u6790\uff08\u901a\u8fc7\u5916\u90e8\u51fd\u6570\u8c03\u7528\uff09\uff0c\u4f7f\u7528\u6807\u51c6\u5e93 ast \u8fdb\u884c\u8bed\u6cd5\u6811\u89e3\u6790  \n\u00b7 **\u6570\u636e\u6d41\u5411**\uff1a\u751f\u6210\u7684 JSON \u6587\u6863\u88ab\u540e\u7eed\u6d41\u7a0b\u7528\u4e8e\u6784\u5efa\u4ee3\u7801\u77e5\u8bc6\u56fe\u8c31\uff0cMarkdown \u6587\u6863\u76f4\u63a5\u9762\u5411\u6700\u7ec8\u7528\u6237  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u7ebf\u7a0b\u5b89\u5168\u673a\u5236\uff1a\u6587\u4ef6\u5199\u5165\u64cd\u4f5c\u4f7f\u7528 threading.Lock \u9632\u6b62\u5e76\u53d1\u51b2\u7a81  \n2. \u884c\u53f7\u51c6\u786e\u6027\uff1a\u4f9d\u8d56 ast \u6a21\u5757\u7684 lineno \u5c5e\u6027\uff0c\u8981\u6c42\u6e90\u4ee3\u7801\u4fdd\u7559\u5b8c\u6574\u539f\u59cb\u683c\u5f0f  \n3. \u8def\u5f84\u654f\u611f\u6027\uff1arepo_path \u9700\u4e3a\u7edd\u5bf9\u8def\u5f84\uff0c\u4e14\u5305\u542b\u5b8c\u6574\u4ee3\u7801\u4ed3\u5e93\u5185\u5bb9  \n4. \u7f16\u7801\u5f3a\u5236\uff1a\u7edf\u4e00\u4f7f\u7528 UTF-8 \u7f16\u7801\u5904\u7406\u6587\u4ef6\u8bfb\u5199  \n5. \u6027\u80fd\u5f71\u54cd\uff1aAST \u89e3\u6790\u4e0d\u9002\u5408\u8d85\u5927\u578b\u6587\u4ef6\uff08>10k \u884c\uff09\uff0c\u9700\u914d\u5408\u5206\u6587\u4ef6\u5904\u7406\u673a\u5236  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n[  \n    {  \n        \"type\": \"ClassDef\",  \n        \"name\": \"DataProcessor\",  \n        \"md_content\": [],  \n        \"code_start_line\": 25,  \n        \"code_end_line\": 42,  \n        \"params\": [],  \n        \"have_return\": false,  \n        \"code_content\": \"class DataProcessor:\\n    def __init__(self, config):...\",  \n        \"name_column\": 6  \n    },  \n    {  \n        \"type\": \"FunctionDef\",  \n        \"name\": \"validate_input\",  \n        \"md_content\": [],  \n        \"code_start_line\": 44,  \n        \"code_end_line\": 53,  \n        \"params\": [\"self\", \"data_stream\"],  \n        \"have_return\": true,  \n        \"code_content\": \"def validate_input(data_stream):\\n    ...\",  \n        \"name_column\": 4  \n    }  \n]"
            ],
            "code_start_line": 214,
            "code_end_line": 422,
            "params": [],
            "have_return": true,
            "code_content": "class FileHandler:\n    \"\"\"\n    \u5386\u53d8\u66f4\u540e\u7684\u6587\u4ef6\u7684\u5faa\u73af\u4e2d\uff0c\u4e3a\u6bcf\u4e2a\u53d8\u66f4\u540e\u6587\u4ef6\uff08\u4e5f\u5c31\u662f\u5f53\u524d\u6587\u4ef6\uff09\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\n    \"\"\"\n    target_info_list: \"List\" = field(\n        default_factory=List\n    )\n\n    def __init__(self, target_file_dir, target_repo_path):\n\n        self.file_name = target_file_dir.split(os.path.sep)[-1]  # \u8fd9\u91cc\u7684file_path\u662f\u6587\u4ef6\u540d\n        self.file_dirs = os.path.sep.join(target_file_dir.split(os.path.sep)[0:-1])\n        self.repo_path = target_repo_path\n\n        self.target_json_path = os.path.join(self.repo_path, \"target_doc_record\")\n        self.target_json_file = os.path.join(self.target_json_path, self.file_name.split(\".\")[0] + \".json\")\n\n        self.target_markdown_path = os.path.join(self.repo_path, \"markdown_docs\")\n        self.target_markdown_file = os.path.join(self.target_markdown_path, self.file_name.replace(\".py\", \".md\"))\n\n        self.generate_file_structure()\n\n    def get_end_lineno(self, node):\n        \"\"\"\n        Get the end line number of a given node.\n\n        Args:\n            node: The node for which to find the end line number.\n\n        Returns:\n            int: The end line number of the node. Returns -1 if the node does not have a line number.\n        \"\"\"\n        if not hasattr(node, \"lineno\"):\n            return -1  # \u8fd4\u56de-1\u8868\u793a\u6b64\u8282\u70b9\u6ca1\u6709\u884c\u53f7\n\n        end_lineno = node.lineno\n        for child in ast.iter_child_nodes(node):\n            child_end = getattr(child, \"end_lineno\", None) or self.get_end_lineno(child)\n            if child_end > -1:  # \u53ea\u66f4\u65b0\u5f53\u5b50\u8282\u70b9\u6709\u6709\u6548\u884c\u53f7\u65f6\n                end_lineno = max(end_lineno, child_end)\n        return end_lineno\n\n    def add_parent_references(self, node, parent=None):\n        \"\"\"\n        Adds a parent reference to each node in the AST.\n\n        Args:\n            node: The current node in the AST.\n\n        Returns:\n            None\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.add_parent_references(child, node)\n\n    def get_functions_and_classes(self, code_content):\n        \"\"\"\n        Retrieves all functions, classes, their parameters (if any), and their hierarchical relationships.\n        Output Examples: [('FunctionDef', 'AI_give_params', 86, 95, None, ['param1', 'param2']), ('ClassDef', 'PipelineEngine', 97, 104, None, []), ('FunctionDef', 'get_all_pys', 99, 104, 'PipelineEngine', ['param1'])]\n        On the example above, PipelineEngine is the Father structure for get_all_pys.\n\n        Args:\n            code_content: The code content of the whole file to be parsed.\n\n        Returns:\n            A list of tuples containing the type of the node (FunctionDef, ClassDef, AsyncFunctionDef),\n            the name of the node, the starting line number, the ending line number, the name of the parent node, and a list of parameters (if any).\n        \"\"\"\n        tree = ast.parse(code_content)\n        self.add_parent_references(tree)\n        functions_and_classes = []\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):\n                start_line = node.lineno\n                end_line = self.get_end_lineno(node)\n                parameters = (\n                    [arg.arg for arg in node.args.args] if \"args\" in dir(node) else []\n                )\n                functions_and_classes.append(\n                    (type(node).__name__, node.name, start_line, end_line, parameters)\n                )\n                # print(functions_and_classes)\n        return functions_and_classes\n\n    def get_obj_code_info(\n            self, code_type, code_name, start_line, end_line, params, file_path=None\n    ):\n        \"\"\"\n        Get the code information for a given object.\n\n        Args:\n            code_type (str): The type of the code.\n            code_name (str): The name of the code.\n            start_line (int): The starting line number of the code.\n            end_line (int): The ending line number of the code.\n            parent (str): The parent of the code.\n            file_path (str, optional): The file path. Defaults to None.\n\n        Returns:\n            dict: A dictionary containing the code information.\n        \"\"\"\n\n        code_info = {}\n        code_info[\"type\"] = code_type\n        code_info[\"name\"] = code_name\n        code_info[\"md_content\"] = []\n        code_info[\"code_start_line\"] = start_line\n        code_info[\"code_end_line\"] = end_line\n        code_info[\"params\"] = params\n\n        with open(\n                os.path.join(\n                    self.file_dirs, file_path if file_path != None else self.file_name\n                ),\n                \"r\",\n                encoding=\"utf-8\",\n        ) as code_file:\n            lines = code_file.readlines()\n            code_content = \"\".join(lines[start_line - 1: end_line])\n            # \u83b7\u53d6\u5bf9\u8c61\u540d\u79f0\u5728\u7b2c\u4e00\u884c\u4ee3\u7801\u4e2d\u7684\u4f4d\u7f6e\n            name_column = lines[start_line - 1].find(code_name)\n            # \u5224\u65ad\u4ee3\u7801\u4e2d\u662f\u5426\u6709return\u5b57\u6837\n            if \"return\" in code_content:\n                have_return = True\n            else:\n                have_return = False\n\n            code_info[\"have_return\"] = have_return\n            # # \u4f7f\u7528 json.dumps \u6765\u8f6c\u4e49\u5b57\u7b26\u4e32\uff0c\u5e76\u53bb\u6389\u9996\u5c3e\u7684\u5f15\u53f7\n            # code_info['code_content'] = json.dumps(code_content)[1:-1]\n            code_info[\"code_content\"] = code_content\n            code_info[\"name_column\"] = name_column\n\n        return code_info\n\n    def generate_file_structure(self):\n        \"\"\"\n        Generates the file structure for the given file path.\n\n        Args:\n            file_path (str): The relative path of the file.\n\n        Returns:\n            dict: A dictionary containing the file path and the generated file structure.\n\n        Output example:\n        {\n            \"function_name\": {\n                \"type\": \"function\",\n                \"start_line\": 10,\n                \u00b7\u00b7\u00b7 \u00b7\u00b7\u00b7\n                \"end_line\": 20,\n                \"parent\": \"class_name\"\n            },\n            \"class_name\": {\n                \"type\": \"class\",\n                \"start_line\": 5,\n                \u00b7\u00b7\u00b7 \u00b7\u00b7\u00b7\n                \"end_line\": 25,\n                \"parent\": None\n            }\n        }\n        \"\"\"\n        list_obj = {}\n        file_path = self.file_name\n        with open(os.path.join(self.file_dirs, self.file_name), \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n            structures = self.get_functions_and_classes(content)\n            file_objects = []  # \u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\n            for struct in structures:\n                structure_type, name, start_line, end_line, params = struct\n                code_info = self.get_obj_code_info(\n                    structure_type, name, start_line, end_line, params, file_path\n                )\n                file_objects.append(code_info)\n        # \u6309\u7167\u5b9a\u4e49\u987a\u5e8f\u6392\u5e8f\uff0c\u7b26\u5408\u4ee3\u7801\u5c42\u7ea7\u5173\u7cfb\n        file_objects = sorted(file_objects, key=lambda item: item[\"code_start_line\"])\n        # \u5047\u5b9a\u53ef\u4ee5\u83b7\u53d6\u5230\u6587\u4ef6\u540d\n        list_obj[file_path] = file_objects\n        self.target_info_list = file_objects\n        return list_obj\n\n    def to_target_json_file(self, target_info_dict):\n        lock = threading.Lock()\n        with lock:\n            if not os.path.exists(self.target_json_path):\n                os.makedirs(self.target_json_path)\n\n        json_str = json.dumps(target_info_dict, indent=4)\n\n        with open(self.target_json_file, \"w\", encoding=\"utf-8\") as writer:\n            writer.write(json_str)\n\n    def convert_to_markdown(self, target_obj_list):\n        markdown_list = []\n        lock = threading.Lock()\n        with lock:\n            if not os.path.exists(self.target_markdown_path):\n                os.makedirs(self.target_markdown_path)\n\n        if len(target_obj_list) > 0:\n            for obj in target_obj_list:\n                markdown_list.append(obj.to_markdown() + \"***\\n\")\n        else:\n            markdown_list.append(\"\u6587\u6863\u5f85\u751f\u6210......\\n***\\n\")\n\n        with open(self.target_markdown_file, \"w\", encoding=\"utf-8\") as writer:\n            writer.writelines(markdown_list)\n",
            "name_column": 6,
            "who_reference_me": [
                "find_all_referencer"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "__init__",
            "md_content": [
                "**__init__**:  __init__ \u51fd\u6570\u7684\u529f\u80fd\u662f\u521d\u59cb\u5316\u7c7b\u7684\u5b9e\u4f8b\u5e76\u6784\u5efa\u6587\u6863\u751f\u6210\u6240\u9700\u7684\u57fa\u7840\u8def\u5f84\u7ed3\u6784\u3002\n\n**\u53c2\u6570(parameters)**:\u8fd9\u4e2aFunction\u6240\u5305\u542b\u7684 \u53c2\u6570(parameters) \u6709 .\n\u00b7 target_file_dir: \u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u76ee\u5f55\u8def\u5f84\uff08\u5305\u542b\u6587\u4ef6\u540d\uff09\n\u00b7 target_repo_path: \u9879\u76ee\u4ed3\u5e93\u7684\u6839\u76ee\u5f55\u8def\u5f84\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5 Function\u7684\u4f5c\u7528\u662f\u901a\u8fc7\u5206\u89e3\u8f93\u5165\u8def\u5f84\u53c2\u6570\uff0c\u4e3a\u540e\u7eed\u6587\u6863\u751f\u6210\u4efb\u52a1\u6784\u5efa\u5b8c\u6574\u7684\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\u4f53\u7cfb\u3002\u5177\u4f53\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n1. \u901a\u8fc7\u5206\u5272 target_file_dir \u83b7\u53d6\u539f\u59cb\u6587\u4ef6\u540d\uff08self.file_name\uff09\u53ca\u5176\u6240\u5728\u76ee\u5f55\u8def\u5f84\uff08self.file_dirs\uff09\n2. \u5b58\u50a8\u9879\u76ee\u6839\u76ee\u5f55\u8def\u5f84\u5230 self.repo_path\n3. \u6784\u5efa JSON \u683c\u5f0f\u6587\u6863\u7684\u5b58\u50a8\u8def\u5f84\uff1a\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u521b\u5efa target_doc_record \u5b50\u76ee\u5f55\uff0c\u5e76\u4ee5\u539f\u59cb\u6587\u4ef6\u540d\uff08\u53bb\u9664\u6269\u5c55\u540d\uff09\u7ec4\u5408\u751f\u6210 .json \u6587\u4ef6\u8def\u5f84\uff08self.target_json_file\uff09\n4. \u6784\u5efa Markdown \u6587\u6863\u7684\u5b58\u50a8\u8def\u5f84\uff1a\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u521b\u5efa markdown_docs \u5b50\u76ee\u5f55\uff0c\u5e76\u5c06\u539f\u59cb\u6587\u4ef6\u540d\u540e\u7f00\u6539\u4e3a .md\uff08self.target_markdown_file\uff09\n5. \u6700\u540e\u8c03\u7528 generate_file_structure \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u89e3\u6790\u6e90\u4ee3\u7801\u6587\u4ef6\u5e76\u751f\u6210\u7ed3\u6784\u5316\u6570\u636e\u5b58\u50a8\u5230 self.target_info_list\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. target_file_dir \u53c2\u6570\u5e94\u4f20\u5165\u5b8c\u6574\u6587\u4ef6\u8def\u5f84\uff08\u5305\u542b\u6587\u4ef6\u540d\uff09\uff0c\u5426\u5219\u6587\u4ef6\u540d\u63d0\u53d6\u53ef\u80fd\u51fa\u9519\n2. target_repo_path \u9700\u8981\u6307\u5411\u6709\u6548\u7684\u4ed3\u5e93\u6839\u76ee\u5f55\uff0c\u5426\u5219\u540e\u7eed\u8def\u5f84\u7ec4\u5408\u53ef\u80fd\u4ea7\u751f\u9519\u8bef\u4f4d\u7f6e\n3. \u6784\u9020\u51fd\u6570\u4f1a\u76f4\u63a5\u8c03\u7528 generate_file_structure \u65b9\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u5b9e\u4f8b\u5316\u65f6\u4f1a\u7acb\u5373\u89e6\u53d1\u6e90\u4ee3\u7801\u89e3\u6790\u64cd\u4f5c\n4. \u8def\u5f84\u5904\u7406\u4f9d\u8d56\u6807\u51c6\u5e93 os.path \u6a21\u5757\uff0c\u8f93\u5165\u8def\u5f84\u9700\u7b26\u5408\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u7684\u8def\u5f84\u5206\u9694\u89c4\u8303\n5. \u751f\u6210\u7684 JSON/Markdown \u5b58\u50a8\u76ee\u5f55\u82e5\u4e0d\u5b58\u5728\u9700\u8981\u989d\u5916\u521b\u5efa\uff0c\u5f53\u524d\u4ee3\u7801\u672a\u5305\u542b\u76ee\u5f55\u521b\u5efa\u903b\u8f91\uff0c\u9700\u786e\u4fdd\u76ee\u6807\u76ee\u5f55\u5df2\u5b58\u5728"
            ],
            "code_start_line": 222,
            "code_end_line": 234,
            "params": [
                "self",
                "target_file_dir",
                "target_repo_path"
            ],
            "have_return": false,
            "code_content": "    def __init__(self, target_file_dir, target_repo_path):\n\n        self.file_name = target_file_dir.split(os.path.sep)[-1]  # \u8fd9\u91cc\u7684file_path\u662f\u6587\u4ef6\u540d\n        self.file_dirs = os.path.sep.join(target_file_dir.split(os.path.sep)[0:-1])\n        self.repo_path = target_repo_path\n\n        self.target_json_path = os.path.join(self.repo_path, \"target_doc_record\")\n        self.target_json_file = os.path.join(self.target_json_path, self.file_name.split(\".\")[0] + \".json\")\n\n        self.target_markdown_path = os.path.join(self.repo_path, \"markdown_docs\")\n        self.target_markdown_file = os.path.join(self.target_markdown_path, self.file_name.replace(\".py\", \".md\"))\n\n        self.generate_file_structure()\n",
            "name_column": 8,
            "who_reference_me": [],
            "reference_who": [
                "FileHandler/generate_file_structure"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "get_end_lineno",
            "md_content": [
                "**get_end_lineno**: get_end_lineno \u51fd\u6570\u7684\u529f\u80fd\u662f\u9012\u5f52\u83b7\u53d6AST\u8282\u70b9\u7684\u6700\u7ec8\u7ed3\u675f\u884c\u53f7\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 node: \u9700\u8981\u89e3\u6790\u7684AST\u62bd\u8c61\u8bed\u6cd5\u6811\u8282\u70b9\u5bf9\u8c61\uff08\u5982ast.FunctionDef/ast.ClassDef\u7b49\uff09\uff0c\u5fc5\u987b\u5305\u542blineno\u5c5e\u6027\u6216\u53ef\u904d\u5386\u7684\u5b50\u8282\u70b9\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7b56\u7565\u9012\u5f52\u89e3\u6790AST\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\uff0c\u6700\u7ec8\u8fd4\u56de\u76ee\u6807\u8282\u70b9\u5728\u6e90\u4ee3\u7801\u4e2d\u7684\u6700\u5927\u7ed3\u675f\u884c\u53f7\u3002\u6838\u5fc3\u903b\u8f91\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a  \n1. \u57fa\u7840\u9a8c\u8bc1\uff1a\u82e5\u4f20\u5165\u7684node\u6ca1\u6709lineno\u5c5e\u6027\uff08\u5982\u67d0\u4e9b\u865a\u62df\u8282\u70b9\uff09\uff0c\u7acb\u5373\u8fd4\u56de-1\u8868\u793a\u65e0\u6548\u884c\u53f7  \n2. \u9012\u5f52\u904d\u5386\uff1a\u4f7f\u7528ast.iter_child_nodes()\u904d\u5386\u6240\u6709\u5b50\u8282\u70b9\uff0c\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u81ea\u8eab\u83b7\u53d6\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684end_lineno\u5c5e\u6027\uff08\u4f18\u5148\u8bfb\u53d6Python 3.8+\u539f\u751fend_lineno\u5c5e\u6027\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u624b\u52a8\u8ba1\u7b97\uff09\u3002\u6700\u7ec8\u53d6\u6240\u6709\u5b50\u8282\u70b9\u4e2d\u6700\u5927\u7684\u6709\u6548\u884c\u53f7\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u7ed3\u675f\u884c\u53f7  \n\n\u5728\u9879\u76ee\u4e2d\uff0c\u6b64\u51fd\u6570\u88abget_functions_and_classes\u65b9\u6cd5\u8c03\u7528\uff0c\u7528\u4e8e\u786e\u5b9a\u51fd\u6570/\u7c7b\u5b9a\u4e49\u7684\u4ee3\u7801\u5757\u7ed3\u675f\u4f4d\u7f6e\u3002\u8c03\u7528\u65f6\u4f1a\u5c06\u89e3\u6790\u51fa\u7684end_line\u6570\u503c\u4e0e\u8d77\u59cb\u884c\u53f7\u5171\u540c\u6784\u6210\u5143\u7ec4\uff0c\u6700\u7ec8\u8f93\u51fa\u5f62\u5f0f\u5982(97, 104)\u8868\u793a\u4ee3\u7801\u5757\u4ece\u7b2c97\u884c\u5f00\u59cb\u5230104\u884c\u7ed3\u675f\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u4f9d\u8d56AST\u6807\u51c6\u5e93\u7684\u8282\u70b9\u7ed3\u6784\uff0c\u975e\u6807\u51c6\u8282\u70b9\u53ef\u80fd\u5bfc\u81f4\u8fd4\u56de\u503c\u5f02\u5e38  \n2. \u9012\u5f52\u7b97\u6cd5\u5728\u6df1\u5c42\u5d4c\u5957\u4ee3\u7801\u7ed3\u6784\u4e2d\u53ef\u80fd\u5b58\u5728\u6027\u80fd\u635f\u8017  \n3. \u8fd4\u56de-1\u7684\u7279\u6b8a\u60c5\u51b5\u9700\u5728\u8c03\u7528\u7aef\u8fdb\u884c\u5f02\u5e38\u5904\u7406  \n4. \u4f18\u5148\u4f7f\u7528Python 3.8+\u7684end_lineno\u539f\u751f\u5c5e\u6027\uff0c\u4f4e\u7248\u672cPython\u73af\u5883\u5c06\u5b8c\u5168\u4f9d\u8d56\u9012\u5f52\u8ba1\u7b97  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u00b7 \u5f53\u89e3\u6790\u4ece\u7b2c5\u884c\u5f00\u59cb\uff0c\u5b50\u8282\u70b9\u5206\u5e03\u5230\u7b2c8\u884c\u7684\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u8fd4\u56de8  \n\u00b7 \u5f53\u4f20\u5165\u65e0\u884c\u53f7\u5c5e\u6027\u7684\u8282\u70b9\u65f6\uff0c\u8fd4\u56de-1"
            ],
            "code_start_line": 236,
            "code_end_line": 254,
            "params": [
                "self",
                "node"
            ],
            "have_return": true,
            "code_content": "    def get_end_lineno(self, node):\n        \"\"\"\n        Get the end line number of a given node.\n\n        Args:\n            node: The node for which to find the end line number.\n\n        Returns:\n            int: The end line number of the node. Returns -1 if the node does not have a line number.\n        \"\"\"\n        if not hasattr(node, \"lineno\"):\n            return -1  # \u8fd4\u56de-1\u8868\u793a\u6b64\u8282\u70b9\u6ca1\u6709\u884c\u53f7\n\n        end_lineno = node.lineno\n        for child in ast.iter_child_nodes(node):\n            child_end = getattr(child, \"end_lineno\", None) or self.get_end_lineno(child)\n            if child_end > -1:  # \u53ea\u66f4\u65b0\u5f53\u5b50\u8282\u70b9\u6709\u6709\u6548\u884c\u53f7\u65f6\n                end_lineno = max(end_lineno, child_end)\n        return end_lineno\n",
            "name_column": 8,
            "who_reference_me": [
                "FileHandler/get_functions_and_classes"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "add_parent_references",
            "md_content": [
                "**add_parent_references**: add_parent_references \u51fd\u6570\u7684\u529f\u80fd\u662f\u4e3aAST\u7684\u6bcf\u4e2a\u8282\u70b9\u6dfb\u52a0\u7236\u8282\u70b9\u5f15\u7528\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 node: \u5f53\u524d\u5904\u7406\u7684AST\u8282\u70b9  \n\u00b7 parent: \u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9\uff08\u5728\u9012\u5f52\u8c03\u7528\u4e2d\u4f20\u9012\uff0c\u521d\u59cb\u9ed8\u8ba4\u503c\u4e3aNone\uff09\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5\u51fd\u6570\u901a\u8fc7\u9012\u5f52\u904d\u5386AST\u6811\uff0c\u4e3a\u6bcf\u4e2a\u5b50\u8282\u70b9\u52a8\u6001\u6dfb\u52a0parent\u5c5e\u6027\u3002\u4f7f\u7528ast.iter_child_nodes()\u904d\u5386\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5c06\u5b50\u8282\u70b9\u7684parent\u5c5e\u6027\u6307\u5411\u5f53\u524d\u8282\u70b9\uff0c\u5e76\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u81ea\u8eab\u5904\u7406\u5b50\u8282\u70b9\u3002\u6b64\u8fc7\u7a0b\u5f62\u6210\u94fe\u5f0f\u53cd\u5e94\uff0c\u6700\u7ec8\u8986\u76d6\u6574\u4e2aAST\u7ed3\u6784\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u90fd\u5177\u5907\u53ef\u8ffd\u6eaf\u7684\u7236\u7ea7\u5f15\u7528\u3002\u5728\u9879\u76ee\u4e2d\uff0c\u8be5\u51fd\u6570\u88abget_functions_and_classes\u65b9\u6cd5\u8c03\u7528\uff0c\u7528\u4e8e\u5efa\u7acb\u51fd\u6570/\u7c7b\u4e0e\u5176\u7236\u7ed3\u6784\u7684\u5c42\u7ea7\u5173\u7cfb\u3002\u8fd9\u79cd\u7236\u5b50\u5f15\u7528\u5173\u7cfb\u662f\u540e\u7eed\u83b7\u53d6\"\u7236\u7ed3\u6784\u540d\u79f0\"\uff08\u5982\u7c7b\u5185\u5d4c\u51fd\u6570\u5f52\u5c5e\uff09\u7684\u5173\u952e\u6280\u672f\u652f\u6491\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u8be5\u51fd\u6570\u76f4\u63a5\u4fee\u6539AST\u8282\u70b9\u5bf9\u8c61\uff0c\u9700\u786e\u4fdd\u4f20\u5165\u7684\u662f\u539f\u59cbAST\u800c\u975e\u526f\u672c  \n2. \u9012\u5f52\u6df1\u5ea6\u4e0eAST\u590d\u6742\u5ea6\u6b63\u76f8\u5173\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\u53ef\u80fd\u89e6\u53d1\u6700\u5927\u9012\u5f52\u6df1\u5ea6\u9650\u5236  \n3. parent\u53c2\u6570\u5728\u9996\u6b21\u8c03\u7528\u65f6\u5e94\u4fdd\u6301\u9ed8\u8ba4None\u503c\uff0c\u521d\u59cb\u8c03\u7528\u65f6parent\u53c2\u6570\u7531\u6846\u67b6\u81ea\u52a8\u4f20\u5165\u6839\u8282\u70b9  \n4. \u4fee\u6539\u540e\u7684AST\u8282\u70b9\u5c06\u6c38\u4e45\u643a\u5e26parent\u5c5e\u6027\uff0c\u53ef\u80fd\u5f71\u54cd\u5176\u4ed6AST\u5904\u7406\u6a21\u5757\u7684\u884c\u4e3a  \n5. \u4f9d\u8d56\u6807\u51c6\u5e93ast\u6a21\u5757\u7684iter_child_nodes\u5b9e\u73b0\uff0c\u9700\u786e\u4fddPython\u7248\u672c\u22653.5\uff08\u5b98\u65b9\u6587\u6863\u663e\u793a\u8be5\u65b9\u6cd5\u81ea3.5\u7248\u672c\u5f15\u5165\uff09"
            ],
            "code_start_line": 256,
            "code_end_line": 268,
            "params": [
                "self",
                "node",
                "parent"
            ],
            "have_return": false,
            "code_content": "    def add_parent_references(self, node, parent=None):\n        \"\"\"\n        Adds a parent reference to each node in the AST.\n\n        Args:\n            node: The current node in the AST.\n\n        Returns:\n            None\n        \"\"\"\n        for child in ast.iter_child_nodes(node):\n            child.parent = node\n            self.add_parent_references(child, node)\n",
            "name_column": 8,
            "who_reference_me": [
                "FileHandler/get_functions_and_classes"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "get_functions_and_classes",
            "md_content": [
                "**get_functions_and_classes**: get_functions_and_classes \u51fd\u6570\u7684\u529f\u80fd\u662f\u89e3\u6790\u4ee3\u7801\u5185\u5bb9\uff0c\u63d0\u53d6\u5176\u4e2d\u7684\u51fd\u6570\u3001\u7c7b\u53ca\u5176\u53c2\u6570\u548c\u5c42\u7ea7\u5173\u7cfb\u3002\n\n**\u53c2\u6570(parameters)**:\u8fd9\u4e2aFunction\u6240\u5305\u542b\u7684 \u53c2\u6570(parameters) \u6709 .  \n\u00b7 code_content: \u9700\u8981\u89e3\u6790\u7684\u5b8c\u6574\u4ee3\u7801\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u4e3a\u6587\u4ef6\u5185\u5bb9\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5 Function \u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b9e\u73b0\u529f\u80fd\uff1a  \n1. \u4f7f\u7528 `ast.parse` \u5c06\u8f93\u5165\u7684 `code_content` \u89e3\u6790\u4e3a\u62bd\u8c61\u8bed\u6cd5\u6811\uff08AST\uff09\u3002  \n2. \u8c03\u7528 `add_parent_references` \u65b9\u6cd5\u4e3a AST \u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u6dfb\u52a0 `parent` \u5c5e\u6027\uff0c\u7528\u4e8e\u8bb0\u5f55\u7236\u8282\u70b9\u5f15\u7528\u4ee5\u652f\u6301\u5c42\u7ea7\u5173\u7cfb\u5206\u6790\u3002  \n3. \u904d\u5386 AST \u6240\u6709\u8282\u70b9\uff0c\u7b5b\u9009\u7c7b\u578b\u4e3a `FunctionDef`\uff08\u51fd\u6570\u5b9a\u4e49\uff09\u3001`ClassDef`\uff08\u7c7b\u5b9a\u4e49\uff09\u3001`AsyncFunctionDef`\uff08\u5f02\u6b65\u51fd\u6570\u5b9a\u4e49\uff09\u7684\u8282\u70b9\u3002  \n4. \u5bf9\u6bcf\u4e2a\u7b26\u5408\u8282\u70b9\uff0c\u8bb0\u5f55\u5176\u7c7b\u578b\u540d\u79f0\u3001\u8282\u70b9\u540d\u79f0\u3001\u8d77\u59cb\u884c\u53f7\uff08`lineno`\uff09\uff0c\u5e76\u901a\u8fc7 `get_end_lineno` \u65b9\u6cd5\u9012\u5f52\u8ba1\u7b97\u7ed3\u675f\u884c\u53f7\u3002  \n5. \u63d0\u53d6\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\uff08\u82e5\u65e0\u53c2\u6570\u5219\u4e3a\u7a7a\u5217\u8868\uff09\u3002  \n6. \u5c06\u4e0a\u8ff0\u4fe1\u606f\u5c01\u88c5\u4e3a\u5143\u7ec4\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\u3002  \n\n\u5728\u9879\u76ee\u4e2d\uff0c\u8be5\u51fd\u6570\u88ab `generate_file_structure` \u65b9\u6cd5\u8c03\u7528\uff0c\u7528\u4e8e\u751f\u6210\u6587\u4ef6\u7ed3\u6784\u5b57\u5178\u3002`generate_file_structure` \u901a\u8fc7\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u5e76\u8c03\u7528\u672c\u51fd\u6570\u83b7\u53d6\u4ee3\u7801\u7ed3\u6784\u5217\u8868\uff0c\u8fdb\u4e00\u6b65\u5904\u7406\u4e3a\u5305\u542b\u8be6\u7ec6\u4fe1\u606f\u7684\u5b57\u5178\uff08\u5982\u4ee3\u7801\u7247\u6bb5\u3001\u7c7b\u578b\u3001\u8d77\u6b62\u884c\u53f7\u7b49\uff09\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u8fd4\u56de\u7684\u5143\u7ec4\u672a\u5305\u542b\u7236\u8282\u70b9\u540d\u79f0\uff0c\u5bfc\u81f4\u5c42\u7ea7\u5173\u7cfb\u4fe1\u606f\u7f3a\u5931\uff08\u4e0e\u793a\u4f8b\u8f93\u51fa\u77db\u76fe\uff09\uff0c\u9700\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u9057\u6f0f\u5bf9 `node.parent` \u7684\u63d0\u53d6\u3002  \n2. \u53c2\u6570\u5217\u8868\u7684\u63d0\u53d6\u903b\u8f91\u4ec5\u5904\u7406\u666e\u901a\u53c2\u6570\uff08`node.args.args`\uff09\uff0c\u672a\u8986\u76d6\u9ed8\u8ba4\u53c2\u6570\u3001\u5173\u952e\u5b57\u53c2\u6570\u7b49\u5176\u4ed6\u7c7b\u578b\u3002  \n3. \u5f02\u6b65\u51fd\u6570\uff08`AsyncFunctionDef`\uff09\u4e0e\u666e\u901a\u51fd\u6570\uff08`FunctionDef`\uff09\u5206\u5f00\u5904\u7406\uff0c\u4f46\u8f93\u51fa\u7ed3\u6784\u4e2d\u672a\u660e\u786e\u533a\u5206\u5f02\u6b65\u7279\u6027\u3002  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n```python\n[('FunctionDef', 'calculate_sum', 10, 15, ['a', 'b']),  \n ('ClassDef', 'DataProcessor', 20, 30, []),  \n ('AsyncFunctionDef', 'fetch_data', 25, 30, ['url'])]\n```"
            ],
            "code_start_line": 270,
            "code_end_line": 297,
            "params": [
                "self",
                "code_content"
            ],
            "have_return": true,
            "code_content": "    def get_functions_and_classes(self, code_content):\n        \"\"\"\n        Retrieves all functions, classes, their parameters (if any), and their hierarchical relationships.\n        Output Examples: [('FunctionDef', 'AI_give_params', 86, 95, None, ['param1', 'param2']), ('ClassDef', 'PipelineEngine', 97, 104, None, []), ('FunctionDef', 'get_all_pys', 99, 104, 'PipelineEngine', ['param1'])]\n        On the example above, PipelineEngine is the Father structure for get_all_pys.\n\n        Args:\n            code_content: The code content of the whole file to be parsed.\n\n        Returns:\n            A list of tuples containing the type of the node (FunctionDef, ClassDef, AsyncFunctionDef),\n            the name of the node, the starting line number, the ending line number, the name of the parent node, and a list of parameters (if any).\n        \"\"\"\n        tree = ast.parse(code_content)\n        self.add_parent_references(tree)\n        functions_and_classes = []\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):\n                start_line = node.lineno\n                end_line = self.get_end_lineno(node)\n                parameters = (\n                    [arg.arg for arg in node.args.args] if \"args\" in dir(node) else []\n                )\n                functions_and_classes.append(\n                    (type(node).__name__, node.name, start_line, end_line, parameters)\n                )\n                # print(functions_and_classes)\n        return functions_and_classes\n",
            "name_column": 8,
            "who_reference_me": [
                "FileHandler/generate_file_structure"
            ],
            "reference_who": [
                "FileHandler/get_end_lineno",
                "FileHandler/add_parent_references"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "get_obj_code_info",
            "md_content": [
                "**get_obj_code_info**: get_obj_code_info \u51fd\u6570\u7684\u529f\u80fd\u662f\u63d0\u53d6\u6307\u5b9a\u4ee3\u7801\u5bf9\u8c61\u7684\u5143\u6570\u636e\u5e76\u6784\u5efa\u7ed3\u6784\u5316\u4fe1\u606f\u5b57\u5178\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 code_type (str): \u4ee3\u7801\u5bf9\u8c61\u7684\u7c7b\u578b\uff08\u4f8b\u5982 \"function\" \u6216 \"class\"\uff09\u3002  \n\u00b7 code_name (str): \u4ee3\u7801\u5bf9\u8c61\u7684\u540d\u79f0\uff08\u5982\u51fd\u6570\u540d\u6216\u7c7b\u540d\uff09\u3002  \n\u00b7 start_line (int): \u4ee3\u7801\u5bf9\u8c61\u7684\u8d77\u59cb\u884c\u53f7\uff08\u57fa\u4e8e1\u7684\u8ba1\u6570\uff09\u3002  \n\u00b7 end_line (int): \u4ee3\u7801\u5bf9\u8c61\u7684\u7ed3\u675f\u884c\u53f7\uff08\u57fa\u4e8e1\u7684\u8ba1\u6570\uff09\u3002  \n\u00b7 params (str): \u4ee3\u7801\u5bf9\u8c61\u7684\u53c2\u6570\u5217\u8868\uff08\u5982\u51fd\u6570\u53c2\u6570\uff09\u3002  \n\u00b7 file_path (str, \u53ef\u9009): \u4ee3\u7801\u6587\u4ef6\u8def\u5f84\uff0c\u672a\u63d0\u4f9b\u65f6\u9ed8\u8ba4\u4f7f\u7528\u5f53\u524d\u5904\u7406\u7684\u6587\u4ef6\u3002  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u6b64\u51fd\u6570\u901a\u8fc7\u8bfb\u53d6\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u63d0\u53d6\u6307\u5b9a\u884c\u53f7\u8303\u56f4\u5185\u7684\u4ee3\u7801\u5185\u5bb9\uff0c\u5e76\u5206\u6790\u4ee5\u4e0b\u6838\u5fc3\u4fe1\u606f\uff1a  \n1. **\u57fa\u7840\u5c5e\u6027**: \u76f4\u63a5\u5b58\u50a8 code_type\uff08\u7c7b\u578b\uff09\u3001code_name\uff08\u540d\u79f0\uff09\u3001start_line/end_line\uff08\u884c\u53f7\u8303\u56f4\uff09\u3001params\uff08\u53c2\u6570\uff09\u3002  \n2. **\u4ee3\u7801\u5185\u5bb9**: \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6 start_line-1 \u5230 end_line \u7684\u4ee3\u7801\u7247\u6bb5\uff08\u56e0\u5217\u8868\u7d22\u5f15\u4ece0\u5f00\u59cb\uff09\uff0c\u5305\u542b\u5b8c\u6574\u7f29\u8fdb\u683c\u5f0f\u3002  \n3. **\u4e0a\u4e0b\u6587\u7279\u5f81**: \u68c0\u6d4b\u4ee3\u7801\u4e2d\u662f\u5426\u542b \"return\" \u5173\u952e\u5b57\u4ee5\u6807\u8bb0 have_return \u5c5e\u6027\uff0c\u5b9a\u4f4d code_name \u5728\u9996\u884c\u7684\u5217\u4f4d\u7f6e name_column\u3002  \n4. **\u8def\u5f84\u5904\u7406**: \u82e5\u672a\u6307\u5b9a file_path\uff0c\u5219\u4f7f\u7528\u5b9e\u4f8b\u5c5e\u6027 self.file_name \u62fc\u63a5 self.file_dirs \u83b7\u53d6\u5b8c\u6574\u8def\u5f84\u3002  \n\n\u5728\u9879\u76ee\u4e2d\uff0c\u8be5\u51fd\u6570\u88ab generate_file_structure \u8c03\u7528\uff0c\u7528\u4e8e\u4e3a\u6bcf\u4e2a\u89e3\u6790\u51fa\u7684\u4ee3\u7801\u7ed3\u6784\uff08\u5982\u51fd\u6570/\u7c7b\uff09\u751f\u6210\u8be6\u7ec6\u5143\u6570\u636e\u3002generate_file_structure \u901a\u8fc7\u904d\u5386 AST \u89e3\u6790\u7ed3\u679c\uff0c\u4f20\u9012\u7ed3\u6784\u7c7b\u578b\u3001\u540d\u79f0\u3001\u884c\u53f7\u7b49\u53c2\u6570\uff0c\u6700\u7ec8\u6574\u5408\u6240\u6709\u5bf9\u8c61\u7684 code_info \u5f62\u6210\u6587\u4ef6\u7ed3\u6784\u6811\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u884c\u53f7\u53c2\u6570\u5e94\u4e3a\u57fa\u4e8e1\u7684\u8ba1\u6570\uff0c\u56e0\u5185\u90e8\u6267\u884c start_line-1 \u8f6c\u6362\u4e3a\u5217\u8868\u7d22\u5f15\u3002  \n2. file_path \u672a\u4f20\u9012\u65f6\u4f1a\u4f9d\u8d56\u5b9e\u4f8b\u7684 self.file_name\uff0c\u9700\u786e\u4fdd\u5176\u5df2\u6b63\u786e\u521d\u59cb\u5316\u3002  \n3. \u8fd4\u56de\u7684 code_content \u4fdd\u7559\u539f\u59cb\u7f29\u8fdb\u548c\u6362\u884c\u7b26\uff0c\u53ef\u80fd\u5f71\u54cd\u524d\u7aef\u6e32\u67d3\uff0c\u9700\u4e8c\u6b21\u5904\u7406\u3002  \n4. name_column \u7528\u4e8e\u5b9a\u4f4d\u5bf9\u8c61\u540d\u79f0\u7684\u6a2a\u5411\u4f4d\u7f6e\uff0c\u5bf9\u4ee3\u7801\u9ad8\u4eae\u6216\u53ef\u89c6\u5316\u6709\u8f85\u52a9\u4f5c\u7528\u3002\n\n**\u8f93\u51fa\u793a\u4f8b**:  \n```python\n{\n    \"type\": \"function\",\n    \"name\": \"calculate_sum\",\n    \"md_content\": [],\n    \"code_start_line\": 10,\n    \"code_end_line\": 15,\n    \"params\": \"a, b\",\n    \"have_return\": True,\n    \"code_content\": \"def calculate_sum(a, b):\\n    result = a + b\\n    return result\\n\",\n    \"name_column\": 4\n}\n```"
            ],
            "code_start_line": 299,
            "code_end_line": 348,
            "params": [
                "self",
                "code_type",
                "code_name",
                "start_line",
                "end_line",
                "params",
                "file_path"
            ],
            "have_return": true,
            "code_content": "    def get_obj_code_info(\n            self, code_type, code_name, start_line, end_line, params, file_path=None\n    ):\n        \"\"\"\n        Get the code information for a given object.\n\n        Args:\n            code_type (str): The type of the code.\n            code_name (str): The name of the code.\n            start_line (int): The starting line number of the code.\n            end_line (int): The ending line number of the code.\n            parent (str): The parent of the code.\n            file_path (str, optional): The file path. Defaults to None.\n\n        Returns:\n            dict: A dictionary containing the code information.\n        \"\"\"\n\n        code_info = {}\n        code_info[\"type\"] = code_type\n        code_info[\"name\"] = code_name\n        code_info[\"md_content\"] = []\n        code_info[\"code_start_line\"] = start_line\n        code_info[\"code_end_line\"] = end_line\n        code_info[\"params\"] = params\n\n        with open(\n                os.path.join(\n                    self.file_dirs, file_path if file_path != None else self.file_name\n                ),\n                \"r\",\n                encoding=\"utf-8\",\n        ) as code_file:\n            lines = code_file.readlines()\n            code_content = \"\".join(lines[start_line - 1: end_line])\n            # \u83b7\u53d6\u5bf9\u8c61\u540d\u79f0\u5728\u7b2c\u4e00\u884c\u4ee3\u7801\u4e2d\u7684\u4f4d\u7f6e\n            name_column = lines[start_line - 1].find(code_name)\n            # \u5224\u65ad\u4ee3\u7801\u4e2d\u662f\u5426\u6709return\u5b57\u6837\n            if \"return\" in code_content:\n                have_return = True\n            else:\n                have_return = False\n\n            code_info[\"have_return\"] = have_return\n            # # \u4f7f\u7528 json.dumps \u6765\u8f6c\u4e49\u5b57\u7b26\u4e32\uff0c\u5e76\u53bb\u6389\u9996\u5c3e\u7684\u5f15\u53f7\n            # code_info['code_content'] = json.dumps(code_content)[1:-1]\n            code_info[\"code_content\"] = code_content\n            code_info[\"name_column\"] = name_column\n\n        return code_info\n",
            "name_column": 8,
            "who_reference_me": [
                "FileHandler/generate_file_structure"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "generate_file_structure",
            "md_content": [
                "**generate_file_structure**: generate_file_structure \u51fd\u6570\u7684\u529f\u80fd\u662f\u89e3\u6790\u6e90\u4ee3\u7801\u6587\u4ef6\u5e76\u751f\u6210\u5305\u542b\u51fd\u6570\u4e0e\u7c7b\u5c42\u7ea7\u7ed3\u6784\u7684\u7ed3\u6784\u5316\u6570\u636e\u3002\n\n**\u53c2\u6570(parameters)**:\u8fd9\u4e2aFunction\u6240\u5305\u542b\u7684 \u53c2\u6570(parameters) \u6709 .\n\u00b7 \u65e0\u663e\u5f0f\u53c2\u6570\uff08\u901a\u8fc7\u7c7b\u5b9e\u4f8b\u5c5e\u6027 self.file_name \u548c self.file_dirs \u83b7\u53d6\u6587\u4ef6\u8def\u5f84\uff09\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5 Function\u7684\u4f5c\u7528\u662f\u901a\u8fc7\u9759\u6001\u4ee3\u7801\u5206\u6790\u6784\u5efa\u6e90\u4ee3\u7801\u6587\u4ef6\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u63d0\u53d6\u5176\u4e2d\u7684\u51fd\u6570\u5b9a\u4e49\uff08FunctionDef/AsyncFunctionDef\uff09\u548c\u7c7b\u5b9a\u4e49\uff08ClassDef\uff09\uff0c\u751f\u6210\u5305\u542b\u5143\u6570\u636e\u7684\u7ed3\u6784\u5316\u5b57\u5178\u3002\u5177\u4f53\u6267\u884c\u6d41\u7a0b\u5982\u4e0b\uff1a\n1. \u901a\u8fc7 open() \u65b9\u6cd5\u8bfb\u53d6 self.file_dirs \u548c self.file_name \u7ec4\u5408\u7684\u5b8c\u6574\u6587\u4ef6\u8def\u5f84\n2. \u8c03\u7528 get_functions_and_classes() \u89e3\u6790\u6587\u4ef6\u5185\u5bb9\uff0c\u83b7\u53d6\u5305\u542b\u4ee3\u7801\u7ed3\u6784\u7279\u5f81\u7684\u5143\u7ec4\u5217\u8868\n3. \u904d\u5386\u6bcf\u4e2a\u4ee3\u7801\u7ed3\u6784\u5143\u7d20\uff0c\u8c03\u7528 get_obj_code_info() \u751f\u6210\u5305\u542b\u5b8c\u6574\u5143\u6570\u636e\u7684\u5b57\u5178\u5bf9\u8c61\n4. \u6309\u4ee3\u7801\u7ed3\u6784\u5b9a\u4e49\u7684\u8d77\u59cb\u884c\u53f7\uff08code_start_line\uff09\u8fdb\u884c\u6392\u5e8f\u4ee5\u4fdd\u6301\u4ee3\u7801\u5c42\u7ea7\u987a\u5e8f\n5. \u5c06\u6700\u7ec8\u7ed3\u679c\u5b58\u50a8\u5728 list_obj \u5b57\u5178\u4e2d\uff0c\u952e\u4e3a\u6587\u4ef6\u540d\uff0c\u503c\u4e3a\u6709\u5e8f\u7684\u4ee3\u7801\u7ed3\u6784\u5217\u8868\n6. \u66f4\u65b0\u7c7b\u5b9e\u4f8b\u5c5e\u6027 self.target_info_list \u5b58\u50a8\u89e3\u6790\u7ed3\u679c\n\n\u5728\u9879\u76ee\u8c03\u7528\u5173\u7cfb\u4e2d\uff1a\n- \u88ab __init__ \u6784\u9020\u51fd\u6570\u76f4\u63a5\u8c03\u7528\uff0c\u7528\u4e8e\u5728\u7c7b\u5b9e\u4f8b\u5316\u65f6\u81ea\u52a8\u89e6\u53d1\u4ee3\u7801\u89e3\u6790\n- \u4f9d\u8d56 get_functions_and_classes \u8fdb\u884cAST\u8bed\u6cd5\u6811\u89e3\u6790\uff0c\u83b7\u53d6\u539f\u59cb\u7ed3\u6784\u6570\u636e\n- \u4f9d\u8d56 get_obj_code_info \u8fdb\u884c\u4ee3\u7801\u7247\u6bb5\u63d0\u53d6\u548c\u5143\u6570\u636e\u5c01\u88c5\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. \u6587\u4ef6\u8def\u5f84\u6784\u9020\u4f9d\u8d56 __init__ \u4e2d\u5904\u7406\u7684 self.file_name \u548c self.file_dirs\uff0c\u9700\u786e\u4fdd\u6b63\u786e\u521d\u59cb\u5316\n2. \u4f7f\u7528 utf-8 \u7f16\u7801\u8bfb\u53d6\u6587\u4ef6\uff0c\u6e90\u4ee3\u7801\u6587\u4ef6\u9700\u7b26\u5408\u8be5\u7f16\u7801\u89c4\u8303\n3. \u8f93\u51fa\u7ed3\u6784\u7684\u6392\u5e8f\u903b\u8f91\u57fa\u4e8e\u4ee3\u7801\u5b9a\u4e49\u987a\u5e8f\uff0c\u53ef\u80fd\u5f71\u54cd\u540e\u7eed\u5904\u7406\u903b\u8f91\n4. \u5b9e\u9645\u4ee3\u7801\u89e3\u6790\u80fd\u529b\u53d7\u9650\u4e8e get_functions_and_classes \u7684AST\u89e3\u6790\u7cbe\u5ea6\n5. \u51fd\u6570\u6267\u884c\u4f1a\u4ea7\u751f\u526f\u4f5c\u7528\uff1a\u66f4\u65b0\u5b9e\u4f8b\u5c5e\u6027 target_info_list\n\n**\u8f93\u51fa\u793a\u4f8b**: \n{\n    \"example.py\": [\n        {\n            \"type\": \"FunctionDef\",\n            \"name\": \"calculate\",\n            \"code_start_line\": 10,\n            \"code_end_line\": 15,\n            \"params\": [\"a\", \"b\"],\n            \"code_content\": \"def calculate(a, b):\\n    return a + b\",\n            \"name_column\": 4\n        },\n        {\n            \"type\": \"ClassDef\", \n            \"name\": \"Processor\",\n            \"code_start_line\": 5,\n            \"code_end_line\": 20,\n            \"params\": [],\n            \"code_content\": \"class Processor:\\n    def __init__(self):...\",\n            \"name_column\": 6\n        }\n    ]\n}"
            ],
            "code_start_line": 350,
            "code_end_line": 395,
            "params": [
                "self"
            ],
            "have_return": true,
            "code_content": "    def generate_file_structure(self):\n        \"\"\"\n        Generates the file structure for the given file path.\n\n        Args:\n            file_path (str): The relative path of the file.\n\n        Returns:\n            dict: A dictionary containing the file path and the generated file structure.\n\n        Output example:\n        {\n            \"function_name\": {\n                \"type\": \"function\",\n                \"start_line\": 10,\n                \u00b7\u00b7\u00b7 \u00b7\u00b7\u00b7\n                \"end_line\": 20,\n                \"parent\": \"class_name\"\n            },\n            \"class_name\": {\n                \"type\": \"class\",\n                \"start_line\": 5,\n                \u00b7\u00b7\u00b7 \u00b7\u00b7\u00b7\n                \"end_line\": 25,\n                \"parent\": None\n            }\n        }\n        \"\"\"\n        list_obj = {}\n        file_path = self.file_name\n        with open(os.path.join(self.file_dirs, self.file_name), \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n            structures = self.get_functions_and_classes(content)\n            file_objects = []  # \u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\n            for struct in structures:\n                structure_type, name, start_line, end_line, params = struct\n                code_info = self.get_obj_code_info(\n                    structure_type, name, start_line, end_line, params, file_path\n                )\n                file_objects.append(code_info)\n        # \u6309\u7167\u5b9a\u4e49\u987a\u5e8f\u6392\u5e8f\uff0c\u7b26\u5408\u4ee3\u7801\u5c42\u7ea7\u5173\u7cfb\n        file_objects = sorted(file_objects, key=lambda item: item[\"code_start_line\"])\n        # \u5047\u5b9a\u53ef\u4ee5\u83b7\u53d6\u5230\u6587\u4ef6\u540d\n        list_obj[file_path] = file_objects\n        self.target_info_list = file_objects\n        return list_obj\n",
            "name_column": 8,
            "who_reference_me": [
                "FileHandler/__init__"
            ],
            "reference_who": [
                "FileHandler/get_functions_and_classes",
                "FileHandler/get_obj_code_info"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "to_target_json_file",
            "md_content": [
                "**to_target_json_file**: to_target_json_file \u51fd\u6570\u7684\u529f\u80fd\u662f\u5c06\u76ee\u6807\u53d8\u91cf\u4fe1\u606f\u5b57\u5178\u5b89\u5168\u5199\u5165JSON\u6587\u4ef6\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_info_dict: \u5305\u542b\u76ee\u6807\u53d8\u91cf\u5f15\u7528\u5173\u7cfb\u6570\u636e\u7684\u5b57\u5178\u5bf9\u8c61  \n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5 Function\u7684\u4f5c\u7528\u662f\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684JSON\u6587\u4ef6\u6301\u4e45\u5316\u64cd\u4f5c\uff0c\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u53d8\u91cf\u5206\u6790\u7ed3\u679c\u3002\u5176\u6838\u5fc3\u6d41\u7a0b\u5305\u542b\u4e09\u4e2a\u9636\u6bb5\uff1a  \n1. \u901a\u8fc7threading.Lock()\u5b9e\u73b0\u8de8\u7ebf\u7a0b\u7684\u76ee\u5f55\u521b\u5efa\u4e92\u65a5\uff0c\u786e\u4fdd\u9996\u6b21\u8fd0\u884c\u65f6\u80fd\u6b63\u786e\u521b\u5efaself.target_json_path\u76ee\u5f55\u7ed3\u6784  \n2. \u4f7f\u7528json.dumps\u5c06\u8f93\u5165\u5b57\u5178\u5e8f\u5217\u5316\u4e3a\u5e264\u7a7a\u683c\u7f29\u8fdb\u7684\u683c\u5f0f\u5316JSON\u5b57\u7b26\u4e32  \n3. \u4ee5UTF-8\u7f16\u7801\u6a21\u5f0f\u6253\u5f00self.target_json_file\u6587\u4ef6\u8def\u5f84\uff0c\u5b8c\u5168\u8986\u5199\u6a21\u5f0f\u5199\u5165\u5e8f\u5217\u5316\u6570\u636e  \n\n\u5728\u9879\u76ee\u4e2d\uff0c\u8be5\u51fd\u6570\u88abMetaInfo\u7c7b\u6216\u5176\u5173\u8054\u7c7b\u8c03\u7528\uff0c\u4f5c\u4e3a\u5f15\u7528\u5173\u7cfb\u5206\u6790\u6d41\u7a0b\u7684\u6700\u7ec8\u8f93\u51fa\u73af\u8282\u3002\u5f53find_all_referencer\u5b8c\u6210\u53d8\u91cf\u5f15\u7528\u70b9\u626b\u63cf\u540e\uff0c\u5176\u8fd4\u56de\u7684\u5f15\u7528\u5750\u6807\u6570\u636e\u7ecfMetaInfo.parse_target_reference\u65b9\u6cd5\u5904\u7406\u6210\u7ed3\u6784\u5316\u5b57\u5178\uff0c\u6700\u7ec8\u901a\u8fc7\u672c\u51fd\u6570\u5199\u5165\u6301\u4e45\u5316\u5b58\u50a8\u3002\u751f\u6210\u7684JSON\u6587\u4ef6\u5c06\u7528\u4e8e\u540e\u7eed\u7684\u6587\u6863\u53ef\u89c6\u5316\u5c55\u793a\u6216\u8de8\u4f1a\u8bdd\u6570\u636e\u590d\u7528\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u4f7f\u7528\u7ebf\u7a0b\u9501\u4ec5\u4fdd\u62a4\u76ee\u5f55\u521b\u5efa\u64cd\u4f5c\uff0c\u6587\u4ef6\u5199\u5165\u672c\u8eab\u672a\u52a0\u9501\u4f46\u91c7\u7528\u539f\u5b50\u6027\u8986\u5199\u6a21\u5f0f  \n2. \u6587\u4ef6\u8def\u5f84\u7531\u5b9e\u4f8b\u5c5e\u6027self.target_json_file\u51b3\u5b9a\uff0c\u9700\u786e\u4fdd\u8c03\u7528\u524d\u8be5\u5c5e\u6027\u5df2\u6b63\u786e\u521d\u59cb\u5316  \n3. \u6bcf\u6b21\u8c03\u7528\u4f1a\u5b8c\u5168\u8986\u76d6\u76ee\u6807\u6587\u4ef6\u5185\u5bb9\uff0c\u4e0d\u9002\u5408\u589e\u91cf\u5199\u5165\u573a\u666f  \n4. JSON\u5e8f\u5217\u5316\u4f9d\u8d56\u5b57\u5178\u952e\u7684\u53ef\u5e8f\u5217\u5316\u6027\uff0c\u9700\u786e\u4fddtarget_info_dict\u4e0d\u542b\u81ea\u5b9a\u4e49\u5bf9\u8c61  \n5. \u7f16\u7801\u5f3a\u5236\u8bbe\u4e3autf-8\u4ee5\u4fdd\u8bc1\u8de8\u5e73\u53f0\u5b57\u7b26\u517c\u5bb9\u6027\uff0c\u7279\u522b\u5904\u7406\u542b\u591a\u8bed\u8a00\u7b26\u53f7\u7684\u4ee3\u7801\u8def\u5f84"
            ],
            "code_start_line": 397,
            "code_end_line": 406,
            "params": [
                "self",
                "target_info_dict"
            ],
            "have_return": false,
            "code_content": "    def to_target_json_file(self, target_info_dict):\n        lock = threading.Lock()\n        with lock:\n            if not os.path.exists(self.target_json_path):\n                os.makedirs(self.target_json_path)\n\n        json_str = json.dumps(target_info_dict, indent=4)\n\n        with open(self.target_json_file, \"w\", encoding=\"utf-8\") as writer:\n            writer.write(json_str)\n",
            "name_column": 8,
            "who_reference_me": [
                "find_all_referencer"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "convert_to_markdown",
            "md_content": [
                "**convert_to_markdown**:  convert_to_markdown \u51fd\u6570\u7684\u529f\u80fd\u662f\u5c06\u76ee\u6807\u5bf9\u8c61\u5217\u8868\u8f6c\u6362\u4e3aMarkdown\u683c\u5f0f\u6587\u6863\u5e76\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_obj_list: \u5305\u542bTargetItem\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u8be5\u5217\u8868\u7531parse_target_reference\u5904\u7406\u540e\u751f\u6210\u7684\u7ed3\u6784\u5316\u5bf9\u8c61\u96c6\u5408\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5\u51fd\u6570\u5b9e\u73b0\u6587\u6863\u751f\u6210\u7684\u6700\u7ec8\u8f93\u51fa\u9636\u6bb5\uff0c\u6838\u5fc3\u6d41\u7a0b\u5206\u4e3a\u4e09\u4e2a\u5173\u952e\u6b65\u9aa4\uff1a  \n1. **\u76ee\u5f55\u51c6\u5907**\uff1a\u901a\u8fc7threading.Lock\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u76ee\u5f55\u521b\u5efa\u7684\u539f\u5b50\u6027\u64cd\u4f5c\uff0c\u5f53self.target_markdown_path\u4e0d\u5b58\u5728\u65f6\uff0c\u4f7f\u7528os.makedirs\u9012\u5f52\u521b\u5efa\u76ee\u6807\u76ee\u5f55  \n2. **\u5185\u5bb9\u751f\u6210**\uff1a\u904d\u5386target_obj_list\u4e2d\u7684\u6bcf\u4e2aTargetItem\u5bf9\u8c61\uff0c\u8c03\u7528\u5176to_markdown()\u65b9\u6cd5\u751f\u6210Markdown\u7247\u6bb5\u3002\u5f53\u8f93\u5165\u5217\u8868\u4e3a\u7a7a\u65f6\uff0c\u63d2\u5165\u9ed8\u8ba4\u63d0\u793a\u6587\u672c\"\u6587\u6863\u5f85\u751f\u6210......\"\u3002\u6bcf\u4e2a\u5bf9\u8c61\u751f\u6210\u7684Markdown\u5185\u5bb9\u540e\u8ffd\u52a0\"***\\n\"\u4f5c\u4e3a\u5206\u9694\u7b26  \n3. **\u6587\u4ef6\u5199\u5165**\uff1a\u4ee5\u8986\u76d6\u5199\u5165\u6a21\u5f0f\uff08\"w\"\uff09\u6253\u5f00self.target_markdown_file\u6587\u4ef6\uff0c\u4f7f\u7528utf-8\u7f16\u7801\u5c06\u751f\u6210\u7684Markdown\u5185\u5bb9\u5217\u8868\u4e00\u6b21\u6027\u5199\u5165  \n\n\u5728\u9879\u76ee\u8c03\u7528\u94fe\u4e2d\uff1a  \n- \u76f4\u63a5\u4f9d\u8d56parse_target_reference\u65b9\u6cd5\u8f93\u51fa\u7684target_obj_list\uff0c\u8be5\u5217\u8868\u4e2d\u7684TargetItem\u5bf9\u8c61\u5df2\u5305\u542b\u5b8c\u6574\u7684\u5f15\u7528\u5173\u7cfb\u6570\u636e\u548c\u683c\u5f0f\u5316\u5185\u5bb9  \n- \u95f4\u63a5\u4f9d\u8d56from_target_info_json\u65b9\u6cd5\u8f6c\u6362\u7684TargetItem\u5bf9\u8c61\u7ed3\u6784\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5bf9\u8c61\u5177\u5907to_markdown()\u65b9\u6cd5  \n- \u5c5e\u4e8e\u6587\u6863\u751f\u6210\u6d41\u7a0b\u7684\u672b\u7aef\u73af\u8282\uff0c\u5176\u6267\u884c\u987a\u5e8f\u4f4d\u4e8e\u5143\u6570\u636e\u5206\u6790\uff08parse_target_reference\uff09\u548c\u5bf9\u8c61\u8f6c\u6362\uff08from_target_info_json\uff09\u4e4b\u540e  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u7ebf\u7a0b\u9501\u4ec5\u4f5c\u7528\u4e8e\u76ee\u5f55\u521b\u5efa\u64cd\u4f5c\uff0c\u5185\u5bb9\u751f\u6210\u8fc7\u7a0b\u672a\u52a0\u9501\uff0c\u9700\u786e\u4fdd\u4e0a\u5c42\u8c03\u7528\u5df2\u5904\u7406\u597d\u7ebf\u7a0b\u540c\u6b65  \n2. \u76ee\u5f55\u521b\u5efa\u91c7\u7528\u60f0\u6027\u521d\u59cb\u5316\u7b56\u7565\uff0c\u4ec5\u5728\u9996\u6b21\u751f\u6210\u6587\u6863\u65f6\u521b\u5efa\u76ee\u6807\u8def\u5f84  \n3. \u6587\u4ef6\u5199\u5165\u6a21\u5f0f\u4e3a\u8986\u76d6\u5f0f\u5199\u5165\uff08\"w\"\uff09\uff0c\u6bcf\u6b21\u8c03\u7528\u5c06\u5b8c\u5168\u66ff\u6362\u76ee\u6807\u6587\u4ef6\u5185\u5bb9  \n4. TargetItem\u5bf9\u8c61\u5fc5\u987b\u5b9e\u73b0to_markdown()\u65b9\u6cd5\uff0c\u5426\u5219\u4f1a\u5f15\u53d1AttributeError  \n5. \u7a7a\u5217\u8868\u5904\u7406\u903b\u8f91\u751f\u6210\u7684\u9ed8\u8ba4\u6587\u672c\u5305\u542b\u6362\u884c\u7b26\uff0c\u786e\u4fddMarkdown\u6587\u6863\u7ed3\u6784\u5b8c\u6574\u6027"
            ],
            "code_start_line": 408,
            "code_end_line": 422,
            "params": [
                "self",
                "target_obj_list"
            ],
            "have_return": false,
            "code_content": "    def convert_to_markdown(self, target_obj_list):\n        markdown_list = []\n        lock = threading.Lock()\n        with lock:\n            if not os.path.exists(self.target_markdown_path):\n                os.makedirs(self.target_markdown_path)\n\n        if len(target_obj_list) > 0:\n            for obj in target_obj_list:\n                markdown_list.append(obj.to_markdown() + \"***\\n\")\n        else:\n            markdown_list.append(\"\u6587\u6863\u5f85\u751f\u6210......\\n***\\n\")\n\n        with open(self.target_markdown_file, \"w\", encoding=\"utf-8\") as writer:\n            writer.writelines(markdown_list)\n",
            "name_column": 8,
            "who_reference_me": [
                "MetaInfo/parse_target_reference",
                "MetaInfo/from_target_info_json"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        }
    ]
}