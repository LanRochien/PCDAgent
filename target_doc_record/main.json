{
    "main.py": [
        {
            "type": "FunctionDef",
            "name": "handle_dirs",
            "md_content": [
                "**handle_dirs**:  handle_dirs \u51fd\u6570\u7684\u529f\u80fd\u662f\u904d\u5386\u76ee\u6807\u76ee\u5f55\u5e76\u591a\u7ebf\u7a0b\u5904\u7406\u5176\u4e2d\u7684Python\u6587\u4ef6\u4ee5\u751f\u6210\u6587\u6863\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_path: \u9700\u8981\u5904\u7406\u7684\u76ee\u5f55\u8def\u5f84\u5b57\u7b26\u4e32\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7os.walk\u904d\u5386target_path\u76ee\u5f55\u6811\uff0c\u8fc7\u6ee4\u4ee5\".\"\u5f00\u5934\u7684\u9690\u85cf\u76ee\u5f55\uff08\u5982.git\uff09\uff0c\u6536\u96c6\u6240\u6709.py\u6587\u4ef6\u8def\u5f84\u3002\u5f53\u68c0\u6d4b\u5230Python\u6587\u4ef6\u65f6\uff0c\u4f1a\u542f\u52a8\u6700\u591a3\u4e2a\u7ebf\u7a0b\u6267\u884c\u4ee5\u4e0b\u6d41\u7a0b\uff1a  \n1. \u521b\u5efa\u4efb\u52a1\u961f\u5217\u5e76\u5411\u5176\u4e2d\u586b\u5145\u6587\u4ef6\u7d22\u5f15  \n2. \u6bcf\u4e2a\u7ebf\u7a0b\u901a\u8fc7worker\u51fd\u6570\u5faa\u73af\u83b7\u53d6\u961f\u5217\u4efb\u52a1\uff0c\u4f7f\u7528Runner\u7c7b\u5904\u7406\u5bf9\u5e94\u6587\u4ef6  \n3. \u6bcf\u4e2a\u7ebf\u7a0b\u5b9e\u65f6\u8f93\u51fa\u4efb\u52a1\u72b6\u6001\uff0c\u6210\u529f\u65f6\u8c03\u7528task_done()\uff0c\u5931\u8d25\u65f6\u6253\u5370\u5f02\u5e38\u4fe1\u606f  \n4. \u4e3b\u7ebf\u7a0b\u901a\u8fc7task_queue.join()\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210  \n\n\u5728\u9879\u76ee\u7ed3\u6784\u4e2d\uff1a  \n\u00b7 \u88ab\u8c03\u7528\uff1a\u901a\u8fc7run\u51fd\u6570\u4f20\u5165\u76ee\u5f55\u8def\u5f84\u65f6\u89e6\u53d1\uff0c\u6216\u901a\u8fc7cli\u547d\u4ee4\u76f4\u63a5\u8c03\u7528\uff08\u5f53\u672a\u6307\u5b9a\u5b50\u547d\u4ee4\u4e14\u5f53\u524d\u662fgit\u4ed3\u5e93\u65f6\uff09  \n\u00b7 \u8c03\u7528\u8005\uff1acli\u51fd\u6570\uff08\u547d\u4ee4\u884c\u63a5\u53e3\u5165\u53e3\uff09\u548crun\u51fd\u6570\uff08\u5355\u6587\u4ef6/\u76ee\u5f55\u5904\u7406\u5165\u53e3\uff09  \n\u00b7 \u5185\u90e8\u5b9a\u4e49worker\u51fd\u6570\u4f5c\u4e3a\u7ebf\u7a0b\u6267\u884c\u5355\u5143\uff0c\u4f9d\u8d56\u5916\u90e8\u7684Runner\u7c7b\u5b9e\u73b0\u5177\u4f53\u6587\u6863\u751f\u6210\u903b\u8f91\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u6700\u5927\u7ebf\u7a0b\u6570\u786c\u7f16\u7801\u4e3a3\uff0c\u4e0d\u53ef\u914d\u7f6e  \n2. \u81ea\u52a8\u8df3\u8fc7\u9690\u85cf\u76ee\u5f55\u7684\u8bbe\u8ba1\u53ef\u80fd\u5f71\u54cd\u7279\u6b8a\u76ee\u5f55\u5904\u7406  \n3. \u4ec5\u652f\u6301.py\u6269\u5c55\u540d\u7684\u6587\u4ef6\uff0c\u5176\u4ed6\u7c7b\u578b\u6587\u4ef6\u4f1a\u88ab\u5ffd\u7565  \n4. \u4f9d\u8d56Runner\u7c7b\u7684is_success\u5c5e\u6027\u5224\u65ad\u662f\u5426\u6267\u884crun()  \n5. \u5f02\u5e38\u5904\u7406\u4f1a\u8df3\u8fc7\u5931\u8d25\u4efb\u52a1\u4f46\u4e0d\u4f1a\u7ec8\u6b62\u7ebf\u7a0b  \n6. \u8f93\u51fa\u8def\u5f84\u56fa\u5b9a\u4e3a\"markdown_docs\"\u76ee\u5f55  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u68c0\u6d4b\u5230 5 \u4e2apython\u6587\u4ef6\uff0c\u6b63\u5728\u751f\u6210\u4efb\u52a1......  \n\u7ebf\u7a0b 0 \u53f7\u83b7\u5f97\u4efb\u52a1 1 [utils.py]  \n\u7ebf\u7a0b 1 \u53f7\u83b7\u5f97\u4efb\u52a1 2 [main.py]  \n\u7ebf\u7a0b 2 \u53f7\u83b7\u5f97\u4efb\u52a1 3 [config.py]  \n\u7ebf\u7a0b 1 \u53f7\u4efb\u52a1 2 \u53f7\u5de5\u4f5c\u5b8c\u6210  \n\u7ebf\u7a0b 0 \u53f7\u4efb\u52a1 1 \u53f7\u5de5\u4f5c\u5b8c\u6210  \n\u7ebf\u7a0b 2 \u53f7\u4efb\u52a1 3 \u53f7\u5de5\u4f5c\u5931\u8d25\uff0c\u5df2\u8df3\u8fc7  \n\u672c\u6b21\u7a0b\u5e8f\u4ee3\u7801\u6587\u6863\u751f\u6210\u5df2\u5b8c\u6210\uff0c\u8bf7\u5728\u6839\u76ee\u5f55\u4e0b \"markdown_docs\" \u6587\u4ef6\u5939\u4e2d\u67e5\u770b\u7ed3\u679c\u3002"
            ],
            "code_start_line": 15,
            "code_end_line": 60,
            "params": [
                "target_path"
            ],
            "have_return": true,
            "code_content": "def handle_dirs(target_path):\n    py_files = []\n    for root, dirs, files in os.walk(target_path):\n        dirs[:] = [d for d in dirs if not d.startswith(\".\")]\n        for file in files:\n            if file.endswith(\".py\"):\n                py_files.append(os.path.join(root, file))\n    if len(py_files) > 0:\n        def worker(task_queue, input_list, target_repo_path, thread_num):\n            while True:\n                try:\n                    index = task_queue.get_nowait()  # \u4ece\u961f\u5217\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15\n                    print(f\"\u7ebf\u7a0b {thread_num} \u53f7\u83b7\u5f97\u4efb\u52a1 {index + 1} [{input_list[index].split(os.sep)[-1]}]\")\n                except queue.Empty:\n                    break\n                try:\n                    runner = Runner(input_list[index], target_repo_path)\n                    if runner.is_success:\n                        runner.run()\n\n                    task_queue.task_done()\n                    print(f\"\u7ebf\u7a0b {thread_num} \u53f7\u4efb\u52a1 {index + 1} \u53f7\u5de5\u4f5c\u5b8c\u6210 \")\n                except Exception as e:\n                    print(e, f\"\u7ebf\u7a0b {thread_num} \u53f7\u4efb\u52a1 {index + 1} \u53f7\u5de5\u4f5c\u5931\u8d25\uff0c\u5df2\u8df3\u8fc7\")\n                    task_queue.task_done()\n                    continue\n\n        max_threads = 3\n        task_queue = Queue()\n        task_nums = len(py_files)\n        for i in range(task_nums):\n            task_queue.put(i)\n        print(f\"\u68c0\u6d4b\u5230 {task_nums} \u4e2apython\u6587\u4ef6\uff0c\u6b63\u5728\u751f\u6210\u4efb\u52a1......\")\n        threads = []\n        for index in range(max_threads):\n            thread = threading.Thread(target=worker, args=(task_queue, py_files, target_path, index))\n            thread.start()\n            threads.append(thread)\n\n        task_queue.join()\n        print(\"\u672c\u6b21\u7a0b\u5e8f\u4ee3\u7801\u6587\u6863\u751f\u6210\u5df2\u5b8c\u6210\uff0c\u8bf7\u5728\u6839\u76ee\u5f55\u4e0b \\\"markdown_docs\\\" \u6587\u4ef6\u5939\u4e2d\u67e5\u770b\u7ed3\u679c\u3002\")\n\n    elif len(py_files) == 0:\n        print(\"\u65e0python\u6587\u4ef6\uff0c\u76ee\u524d\u4ec5\u652f\u6301python\u6587\u4ef6\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\u5730\u5740!\")\n\n    return 0\n",
            "name_column": 4,
            "who_reference_me": [
                "cli",
                "run"
            ],
            "reference_who": [
                "handle_dirs/worker"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "worker",
            "md_content": [
                "**worker**:  worker \u51fd\u6570\u7684\u529f\u80fd\u662f\u901a\u8fc7\u591a\u7ebf\u7a0b\u65b9\u5f0f\u4ece\u4efb\u52a1\u961f\u5217\u4e2d\u83b7\u53d6\u5e76\u5904\u7406Python\u6587\u4ef6\uff0c\u751f\u6210\u5bf9\u5e94\u7684\u6587\u6863\u3002\n\n**\u53c2\u6570(parameters)**:\u8fd9\u4e2aFunction\u6240\u5305\u542b\u7684 \u53c2\u6570(parameters) \u6709 .\n\u00b7 task_queue: \u5305\u542b\u5f85\u5904\u7406\u4efb\u52a1\u7d22\u5f15\u7684\u7ebf\u7a0b\u5b89\u5168\u961f\u5217\n\u00b7 input_list: \u9700\u8981\u5904\u7406\u7684Python\u6587\u4ef6\u8def\u5f84\u5217\u8868\n\u00b7 target_repo_path: \u76ee\u6807\u4ee3\u7801\u4ed3\u5e93\u7684\u6839\u76ee\u5f55\u8def\u5f84\n\u00b7 thread_num: \u5f53\u524d\u5de5\u4f5c\u7ebf\u7a0b\u7684\u6807\u8bc6\u7f16\u53f7\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \u8be5\u51fd\u6570\u4f5c\u4e3a\u591a\u7ebf\u7a0b\u4efb\u52a1\u5904\u7406\u5668\uff0c\u5728handle_dirs\u51fd\u6570\u5185\u90e8\u88ab\u521b\u5efa\u548c\u8c03\u7528\u3002\u5176\u6838\u5fc3\u903b\u8f91\u901a\u8fc7while\u5faa\u73af\u6301\u7eed\u4ecetask_queue\u83b7\u53d6\u4efb\u52a1\u7d22\u5f15\uff0c\u6bcf\u4e2a\u7d22\u5f15\u5bf9\u5e94input_list\u4e2d\u7684Python\u6587\u4ef6\u8def\u5f84\u3002\u5f53\u83b7\u53d6\u5230\u7d22\u5f15\u540e\uff0c\u4f1a\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n1. \u4f7f\u7528Runner\u7c7b\u5b9e\u4f8b\u5316\u5904\u7406\u5bf9\u5e94\u8def\u5f84\u7684Python\u6587\u4ef6\uff0ctarget_repo_path\u4f5c\u4e3a\u8f93\u51fa\u8def\u5f84\u53c2\u6570\n2. \u82e5runner.is_success\u4e3aTrue\u5219\u8c03\u7528runner.run()\u6267\u884c\u6587\u6863\u751f\u6210\n3. \u65e0\u8bba\u6210\u529f\u4e0e\u5426\u90fd\u901a\u8fc7task_queue.task_done()\u6807\u8bb0\u4efb\u52a1\u5b8c\u6210\n4. \u901a\u8fc7thread_num\u53c2\u6570\u5b9e\u73b0\u7ebf\u7a0b\u7ea7\u522b\u7684\u4efb\u52a1\u72b6\u6001\u8ffd\u8e2a\n\n\u4e0e\u8c03\u7528\u8005\u7684\u5173\u7cfb\uff1a\u88abhandle_dirs\u51fd\u6570\u901a\u8fc7threading.Thread\u521b\u5efa\u4e3a\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u7acb\u5904\u7406\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u3002\u961f\u5217\u4e2d\u7684\u7d22\u5f15\u7531handle_dirs\u9884\u5148\u586b\u5145\uff0c\u5bf9\u5e94\u904d\u5386\u83b7\u5f97\u7684py_files\u5217\u8868\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. \u4f9d\u8d56Runner\u7c7b\u7684\u6b63\u786e\u5b9e\u73b0\uff0c\u9700\u8981\u786e\u4fddrunner.run()\u80fd\u751f\u6210\u6709\u6548\u6587\u6863\n2. task_queue\u5fc5\u987b\u63d0\u524d\u586b\u5145\u6709\u6548\u7d22\u5f15\uff0c\u4e14\u7d22\u5f15\u8303\u56f4\u9700\u4e25\u683c\u5339\u914dinput_list\u7684\u957f\u5ea6\n3. \u5f02\u5e38\u5904\u7406\u4ec5\u6253\u5370\u9519\u8bef\u4fe1\u606f\u5e76\u8df3\u8fc7\u4efb\u52a1\uff0c\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u53ef\u80fd\u9700\u8981\u66f4\u4e25\u8c28\u7684\u9519\u8bef\u6062\u590d\u673a\u5236\n4. \u7ebf\u7a0b\u7f16\u53f7thread_num\u4ec5\u7528\u4e8e\u65e5\u5fd7\u8f93\u51fa\uff0c\u4e0d\u5f71\u54cd\u5b9e\u9645\u4efb\u52a1\u5904\u7406\u903b\u8f91\n5. \u4f7f\u7528get_nowait()\u65b9\u6cd5\u9700\u8981\u914d\u5408\u961f\u5217\u7a7a\u5f02\u5e38\u5904\u7406\uff0c\u786e\u4fdd\u7ebf\u7a0b\u80fd\u6b63\u5e38\u9000\u51fa\u5faa\u73af"
            ],
            "code_start_line": 23,
            "code_end_line": 40,
            "params": [
                "task_queue",
                "input_list",
                "target_repo_path",
                "thread_num"
            ],
            "have_return": false,
            "code_content": "        def worker(task_queue, input_list, target_repo_path, thread_num):\n            while True:\n                try:\n                    index = task_queue.get_nowait()  # \u4ece\u961f\u5217\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15\n                    print(f\"\u7ebf\u7a0b {thread_num} \u53f7\u83b7\u5f97\u4efb\u52a1 {index + 1} [{input_list[index].split(os.sep)[-1]}]\")\n                except queue.Empty:\n                    break\n                try:\n                    runner = Runner(input_list[index], target_repo_path)\n                    if runner.is_success:\n                        runner.run()\n\n                    task_queue.task_done()\n                    print(f\"\u7ebf\u7a0b {thread_num} \u53f7\u4efb\u52a1 {index + 1} \u53f7\u5de5\u4f5c\u5b8c\u6210 \")\n                except Exception as e:\n                    print(e, f\"\u7ebf\u7a0b {thread_num} \u53f7\u4efb\u52a1 {index + 1} \u53f7\u5de5\u4f5c\u5931\u8d25\uff0c\u5df2\u8df3\u8fc7\")\n                    task_queue.task_done()\n                    continue\n",
            "name_column": 12,
            "who_reference_me": [
                "handle_dirs"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "cli",
            "md_content": [
                "**cli**: cli \u51fd\u6570\u7684\u529f\u80fd\u662f\u4f5c\u4e3a\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u7a0b\u5e8f\u4ee3\u7801\u6587\u6863\u751f\u6210\u6846\u67b6\u7684\u5165\u53e3\u547d\u4ee4\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 ctx: click.Context \u7c7b\u578b\u53c2\u6570\uff0c\u7528\u4e8e\u63a5\u6536 Click \u547d\u4ee4\u884c\u5de5\u5177\u4e0a\u4e0b\u6587\u5bf9\u8c61\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u662f\u4f7f\u7528 Click \u5e93\u6784\u5efa\u7684\u547d\u4ee4\u884c\u63a5\u53e3\u6838\u5fc3\u7ec4\u4ef6\uff0c\u5f53\u672a\u8c03\u7528\u4efb\u4f55\u5b50\u547d\u4ee4\u65f6\u6267\u884c\u4ee5\u4e0b\u903b\u8f91\uff1a  \n1. \u901a\u8fc7 git.Repo('.', search_parent_directories=True) \u5b9a\u4f4d\u5f53\u524d\u6216\u7236\u7ea7\u76ee\u5f55\u7684 Git \u4ed3\u5e93\u6839\u8def\u5f84  \n2. \u8f93\u51fa\u4ed3\u5e93\u5de5\u4f5c\u76ee\u5f55\u8def\u5f84\u5230\u63a7\u5236\u53f0  \n3. \u8c03\u7528 handle_dirs \u51fd\u6570\u5904\u7406\u4ed3\u5e93\u6839\u76ee\u5f55\u4e0b\u7684\u4ee3\u7801\u6587\u4ef6  \n\n\u5176\u6838\u5fc3\u529f\u80fd\u901a\u8fc7\u8c03\u7528 handle_dirs \u5b9e\u73b0\uff0c\u540e\u8005\u5177\u4f53\u8d1f\u8d23\uff1a  \n\u00b7 \u9012\u5f52\u904d\u5386\u76ee\u6807\u8def\u5f84\u4e0b\u7684\u6240\u6709\u975e\u9690\u85cf\u76ee\u5f55\uff08\u8fc7\u6ee4\u4ee5 . \u5f00\u5934\u7684\u76ee\u5f55\uff09  \n\u00b7 \u6536\u96c6\u6240\u6709 .py \u6587\u4ef6\u8def\u5f84  \n\u00b7 \u542f\u52a8 3 \u4e2a\u7ebf\u7a0b\u5e76\u53d1\u5904\u7406\u6587\u4ef6\uff08\u901a\u8fc7 Worker \u7c7b\u6267\u884c\u5b9e\u9645\u6587\u6863\u751f\u6210\uff09  \n\u00b7 \u76d1\u63a7\u7ebf\u7a0b\u4efb\u52a1\u72b6\u6001\u5e76\u8f93\u51fa\u8fdb\u5ea6\u63d0\u793a  \n\u00b7 \u6700\u7ec8\u7ed3\u679c\u8f93\u51fa\u5230\u4ed3\u5e93\u6839\u76ee\u5f55\u4e0b\u7684 markdown_docs \u6587\u4ef6\u5939\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u5fc5\u987b\u4f5c\u4e3a Click \u547d\u4ee4\u7ec4(command group)\u4f7f\u7528\uff0c\u4f9d\u8d56\u5b50\u547d\u4ee4\u67b6\u6784  \n2. \u8981\u6c42\u8fd0\u884c\u73af\u5883\u5df2\u5b89\u88c5 gitpython \u5e93\u4e14\u5f53\u524d\u76ee\u5f55\u4f4d\u4e8e Git \u4ed3\u5e93\u5185  \n3. handle_dirs \u7684\u5b9e\u9645\u6587\u6863\u751f\u6210\u80fd\u529b\u53d6\u51b3\u4e8e\u672a\u63d0\u4f9b\u7684 Runner \u7c7b\u5b9e\u73b0  \n4. \u591a\u7ebf\u7a0b\u5904\u7406\u65f6\u5355\u4e2a\u6587\u4ef6\u5f02\u5e38\u4e0d\u4f1a\u4e2d\u65ad\u6574\u4f53\u6d41\u7a0b\uff0c\u4f46\u4f1a\u8df3\u8fc7\u6545\u969c\u6587\u4ef6  \n5. \u8f93\u51fa\u76ee\u5f55\u56fa\u5b9a\u4e3a markdown_docs\uff0c\u8def\u5f84\u786c\u7f16\u7801\u5728 handle_dirs \u5b9e\u73b0\u4e2d  \n6. \u5f53\u524d\u4ec5\u652f\u6301 Python \u6587\u4ef6\u5904\u7406\uff0c\u5176\u4ed6\u7c7b\u578b\u6587\u4ef6\u4f1a\u88ab\u81ea\u52a8\u8fc7\u6ee4"
            ],
            "code_start_line": 63,
            "code_end_line": 68,
            "params": [
                "ctx"
            ],
            "have_return": false,
            "code_content": "def cli(ctx):\n    \"\"\"Large language model powered framework for program code documentation generation.\"\"\"\n    if ctx.invoked_subcommand is None:\n        repo = git.Repo('.', search_parent_directories=True)\n        click.echo(repo.working_tree_dir)\n        handle_dirs(str(repo.working_tree_dir))\n",
            "name_column": 4,
            "who_reference_me": [],
            "reference_who": [
                "handle_dirs"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "run",
            "md_content": [
                "**run**: run \u51fd\u6570\u7684\u529f\u80fd\u662f\u6839\u636e\u8f93\u5165\u7684\u8def\u5f84\u5904\u7406\u5355\u4e2a Python \u6587\u4ef6\u6216\u6574\u4e2a\u76ee\u5f55\u4e0b\u7684\u6240\u6709 Python \u6587\u4ef6\u4ee5\u751f\u6210\u6587\u6863\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 target_path: \u76ee\u6807\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u6587\u4ef6\u8def\u5f84\u6216\u76ee\u5f55\u8def\u5f84\u3002\u82e5\u4e3a\u6587\u4ef6\u8def\u5f84\uff0c\u5219\u5904\u7406\u5355\u4e2a Python \u6587\u4ef6\uff1b\u82e5\u4e3a\u76ee\u5f55\u8def\u5f84\uff0c\u5219\u9012\u5f52\u5904\u7406\u76ee\u5f55\u4e0b\u6240\u6709\u975e\u9690\u85cf\u5b50\u76ee\u5f55\u4e2d\u7684 Python \u6587\u4ef6\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u9996\u5148\u5224\u65ad `target_path` \u662f\u6587\u4ef6\u8fd8\u662f\u76ee\u5f55\uff1a  \n1. **\u6587\u4ef6\u5904\u7406**\uff1a\u82e5\u8def\u5f84\u6307\u5411\u5355\u4e2a\u6587\u4ef6\uff0c\u68c0\u67e5\u5176\u662f\u5426\u4e3a `.py` \u6587\u4ef6\u3002\u82e5\u662f\uff0c\u63d0\u53d6\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u4f5c\u4e3a `target_repo_path`\uff0c\u521b\u5efa `Runner` \u5b9e\u4f8b\u5e76\u6267\u884c `runner.run()` \u751f\u6210\u6587\u6863\uff1b\u82e5\u975e `.py` \u6587\u4ef6\uff0c\u63d0\u793a\u9519\u8bef\u3002  \n2. **\u76ee\u5f55\u5904\u7406**\uff1a\u82e5\u8def\u5f84\u6307\u5411\u76ee\u5f55\uff0c\u8c03\u7528 `handle_dirs` \u51fd\u6570\u5904\u7406\u3002`handle_dirs` \u4f1a\u904d\u5386\u76ee\u5f55\u4e0b\u6240\u6709\u975e\u9690\u85cf\u5b50\u76ee\u5f55\uff0c\u6536\u96c6\u6240\u6709 `.py` \u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u591a\u7ebf\u7a0b\uff08\u6700\u591a 3 \u4e2a\u7ebf\u7a0b\uff09\u5e76\u884c\u8c03\u7528 `Runner` \u751f\u6210\u6587\u6863\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u4ece\u4efb\u52a1\u961f\u5217\u4e2d\u83b7\u53d6\u6587\u4ef6\u7d22\u5f15\uff0c\u6253\u5370\u4efb\u52a1\u72b6\u6001\uff0c\u5e76\u5728\u5931\u8d25\u65f6\u8df3\u8fc7\u9519\u8bef\u6587\u4ef6\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n- \u8f93\u5165\u8def\u5f84\u9700\u4e3a\u6709\u6548\u5b58\u5728\u7684\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u5426\u5219\u51fd\u6570\u53ef\u80fd\u65e0\u8f93\u51fa\u6216\u62a5\u9519\u3002  \n- \u4ec5\u652f\u6301 `.py` \u6587\u4ef6\uff0c\u5176\u4ed6\u7c7b\u578b\u6587\u4ef6\u4f1a\u88ab\u5ffd\u7565\u3002  \n- \u591a\u7ebf\u7a0b\u5904\u7406\u65f6\uff0c\u4efb\u52a1\u5b8c\u6210\u987a\u5e8f\u53ef\u80fd\u4e0e\u6587\u4ef6\u904d\u5386\u987a\u5e8f\u4e0d\u4e00\u81f4\uff0c\u4f46\u6700\u7ec8\u6240\u6709\u6587\u4ef6\u5747\u4f1a\u88ab\u5904\u7406\u3002  \n- \u751f\u6210\u7684\u6587\u6863\u9ed8\u8ba4\u4fdd\u5b58\u5728\u6839\u76ee\u5f55\u4e0b\u7684 `markdown_docs` \u6587\u4ef6\u5939\u4e2d\u3002  \n- \u4f9d\u8d56 `os`\u3001`threading`\u3001`queue` \u6a21\u5757\u53ca\u81ea\u5b9a\u4e49\u7684 `Runner` \u7c7b\u548c `handle_dirs` \u51fd\u6570\u3002\n\n**\u8f93\u51fa\u793a\u4f8b**:  \n1. \u5904\u7406\u5355\u4e2a\u6587\u4ef6\u6210\u529f\uff1a  \n   \u68c0\u6d4b\u5230 `example.py` \u540e\u8f93\u51fa\uff1a  \n   ```\n   \u6587\u6863\u751f\u6210\u5b8c\u6210\uff01\u8bf7\u5728\u6839\u76ee\u5f55\u4e0b \"markdown_docs\" \u4e2d\u67e5\u770b\u6587\u6863\u3002\n   ```  \n2. \u5904\u7406\u76ee\u5f55\u65f6\u68c0\u6d4b\u5230\u591a\u4e2a\u6587\u4ef6\uff1a  \n   ```\n   \u68c0\u6d4b\u5230 5 \u4e2apython\u6587\u4ef6\uff0c\u6b63\u5728\u751f\u6210\u4efb\u52a1......\n   \u7ebf\u7a0b 0 \u53f7\u83b7\u5f97\u4efb\u52a1 1 [module1.py]\n   \u7ebf\u7a0b 1 \u53f7\u83b7\u5f97\u4efb\u52a1 2 [module2.py]\n   \u7ebf\u7a0b 2 \u53f7\u83b7\u5f97\u4efb\u52a1 3 [utils.py]\n   \u7ebf\u7a0b 0 \u53f7\u4efb\u52a1 1 \u53f7\u5de5\u4f5c\u5b8c\u6210 \n   \u7ebf\u7a0b 1 \u53f7\u4efb\u52a1 2 \u53f7\u5de5\u4f5c\u5b8c\u6210 \n   \u7ebf\u7a0b 2 \u53f7\u4efb\u52a1 3 \u53f7\u5de5\u4f5c\u5b8c\u6210 \n   \u672c\u6b21\u7a0b\u5e8f\u4ee3\u7801\u6587\u6863\u751f\u6210\u5df2\u5b8c\u6210\uff0c\u8bf7\u5728\u6839\u76ee\u5f55\u4e0b \"markdown_docs\" \u6587\u4ef6\u5939\u4e2d\u67e5\u770b\u7ed3\u679c\u3002\n   ```"
            ],
            "code_start_line": 82,
            "code_end_line": 98,
            "params": [
                "target_path"
            ],
            "have_return": true,
            "code_content": "def run(target_path):\n\n    if os.path.isfile(target_path):\n        target_code_name = target_path.split(os.path.sep)[-1]\n        if target_code_name.endswith(\".py\"):\n            target_repo_path=os.path.sep.join(target_path.split(os.path.sep)[0:-1])\n            runner = Runner(target_path, target_repo_path)\n            if runner.is_success:\n                runner.run()\n                print(\"\u6587\u6863\u751f\u6210\u5b8c\u6210\uff01\u8bf7\u5728\u6839\u76ee\u5f55\u4e0b \\\"markdown_docs\\\" \u4e2d\u67e5\u770b\u6587\u6863\u3002\")\n            else:\n                return\n        else:\n            print(\"\u76ee\u524d\u4ec5\u652f\u6301python\u6587\u4ef6\uff0c\u8f93\u5165\u6b63\u786e\u7684\u5730\u5740\uff01\")\n        return 0\n    elif os.path.isdir(target_path):\n        handle_dirs(target_path)\n",
            "name_column": 4,
            "who_reference_me": [],
            "reference_who": [
                "handle_dirs"
            ],
            "item_status": "doc_up_to_date"
        }
    ]
}