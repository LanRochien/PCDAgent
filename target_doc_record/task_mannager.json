{
    "task_mannager.py": [
        {
            "type": "ClassDef",
            "name": "Task",
            "md_content": [
                "**Task**: Task \u7c7b\u7684\u529f\u80fd\u662f\u63cf\u8ff0\u548c\u7ba1\u7406\u5355\u4e2a\u4efb\u52a1\u5355\u5143\u53ca\u5176\u4f9d\u8d56\u5173\u7cfb\u4e0e\u72b6\u6001\u3002\n\n**\u5c5e\u6027(atributes)**:  \n\u00b7 task_id (int): \u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002  \n\u00b7 dependencies (List[Task]): \u5f53\u524d\u4efb\u52a1\u6240\u4f9d\u8d56\u7684\u5176\u4ed6 Task \u5bf9\u8c61\u7684\u5217\u8868\u3002  \n\u00b7 extra_info (Any): \u4e0e\u4efb\u52a1\u5173\u8054\u7684\u989d\u5916\u4fe1\u606f\uff0c\u9ed8\u8ba4\u4e3a None\u3002  \n\u00b7 status (int): \u4efb\u52a1\u72b6\u6001\uff0c\u53d6\u503c\u8303\u56f4\u4e3a 0\uff08\u672a\u5f00\u59cb\uff09\u30011\uff08\u8fdb\u884c\u4e2d\uff09\u30012\uff08\u5df2\u5b8c\u6210\uff09\u30013\uff08\u51fa\u9519\uff09\uff0c\u521d\u59cb\u5316\u65f6\u9ed8\u8ba4\u4e3a 0\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \nTask \u7c7b\u7528\u4e8e\u5c01\u88c5\u4efb\u52a1\u7684\u57fa\u672c\u5143\u6570\u636e\u53ca\u5176\u6267\u884c\u4e0a\u4e0b\u6587\u3002\u5176\u6838\u5fc3\u4f5c\u7528\u662f\u5b9a\u4e49\u4efb\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff08\u901a\u8fc7 dependencies \u5c5e\u6027\uff09\uff0c\u8ddf\u8e2a\u4efb\u52a1\u6267\u884c\u72b6\u6001\uff08\u901a\u8fc7 status \u5c5e\u6027\uff09\uff0c\u5e76\u5b58\u50a8\u4efb\u52a1\u76f8\u5173\u6269\u5c55\u4fe1\u606f\uff08\u901a\u8fc7 extra_info \u5c5e\u6027\uff09\u3002\u5728\u9879\u76ee\u4e2d\uff0cTask \u5bf9\u8c61\u7531 MultiTaskDispatch \u7c7b\u7684 add_task \u65b9\u6cd5\u521b\u5efa\u5e76\u7ba1\u7406\u3002\u5f53\u8c03\u7528 add_task \u65f6\uff0cMultiTaskDispatch \u4f1a\u6839\u636e dependency_task_id \u53c2\u6570\u4ece task_dict \u4e2d\u63d0\u53d6\u4f9d\u8d56\u7684 Task \u5bf9\u8c61\uff0c\u6784\u9020\u65b0\u7684 Task \u5b9e\u4f8b\u5e76\u6ce8\u518c\u5230 task_dict \u4e2d\u3002\u4efb\u52a1\u72b6\u6001\u7684\u53d8\u5316\uff08\u5982 get_next_task \u65b9\u6cd5\u4e2d\u5c06 status \u8bbe\u4e3a 1\uff09\u76f4\u63a5\u5f71\u54cd MultiTaskDispatch \u7684\u4efb\u52a1\u8c03\u5ea6\u903b\u8f91\uff0c\u4f8b\u5982\u4ec5\u5f53\u4f9d\u8d56\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\u4e14\u81ea\u8eab\u72b6\u6001\u4e3a 0 \u65f6\u624d\u4f1a\u88ab\u5206\u914d\u6267\u884c\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. status \u5c5e\u6027\u5e94\u4e25\u683c\u9075\u5faa\u9884\u5b9a\u4e49\u72b6\u6001\u503c\uff080-3\uff09\uff0c\u9519\u8bef\u7684\u72b6\u6001\u503c\u53ef\u80fd\u5bfc\u81f4\u8c03\u5ea6\u903b\u8f91\u5f02\u5e38\u3002  \n2. dependencies \u5217\u8868\u4e2d\u7684 Task \u5bf9\u8c61\u5fc5\u987b\u5df2\u5b58\u5728\u4e8e MultiTaskDispatch \u7684 task_dict \u4e2d\uff0c\u5426\u5219 add_task \u65b9\u6cd5\u4f1a\u56e0 KeyError \u4e2d\u65ad\u3002  \n3. \u4fee\u6539 dependencies \u6216 status \u5c5e\u6027\u65f6\u5e94\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\uff08\u5982\u901a\u8fc7 task_lock\uff09\uff0c\u56e0\u5176\u5728 MultiTaskDispatch \u4e2d\u53ef\u80fd\u88ab\u591a\u7ebf\u7a0b\u5e76\u53d1\u8bbf\u95ee\u3002  \n4. extra_info \u5b57\u6bb5\u7684\u89e3\u6790\u903b\u8f91\u9700\u7531\u8c03\u7528\u65b9\u81ea\u884c\u5b9e\u73b0\uff0c\u5176\u7c7b\u578b\u548c\u5185\u5bb9\u4e0d\u53d7 Task \u7c7b\u7ea6\u675f\u3002"
            ],
            "code_start_line": 7,
            "code_end_line": 12,
            "params": [],
            "have_return": false,
            "code_content": "class Task:\n    def __init__(self, task_id: int, dependencies: List[Task], extra_info: Any = None):\n        self.task_id = task_id\n        self.extra_info = extra_info\n        self.dependencies = dependencies\n        self.status = 0  # \u4efb\u52a1\u72b6\u6001\uff1a0\u672a\u5f00\u59cb\uff0c1\u6b63\u5728\u8fdb\u884c\uff0c2\u5df2\u7ecf\u5b8c\u6210\uff0c3\u51fa\u9519\u4e86\n",
            "name_column": 6,
            "who_reference_me": [
                "TaskManager/__init__",
                "TaskManager/__init__/add_task"
            ],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "__init__",
            "md_content": [
                "**__init__**:  __init__ \u51fd\u6570\u7684\u529f\u80fd\u662f\u521d\u59cb\u5316\u4e00\u4e2a Task \u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002\n\n**\u53c2\u6570(parameters)**:\u8fd9\u4e2aFunction\u6240\u5305\u542b\u7684 \u53c2\u6570(parameters) \u6709 .\n\u00b7 task_id: \u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u7c7b\u578b\u4e3a int\u3002\n\u00b7 dependencies: \u5f53\u524d\u4efb\u52a1\u4f9d\u8d56\u7684\u5176\u4ed6\u4efb\u52a1\u5217\u8868\uff0c\u7c7b\u578b\u4e3a List[Task]\u3002\n\u00b7 extra_info: \u53ef\u9009\u53c2\u6570\uff0c\u7528\u4e8e\u5b58\u50a8\u4e0e\u4efb\u52a1\u76f8\u5173\u7684\u989d\u5916\u4fe1\u606f\uff0c\u7c7b\u578b\u4e3a Any\uff0c\u9ed8\u8ba4\u503c\u4e3a None\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5 Function\u7684\u4f5c\u7528\u662f\u4e3a Task \u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u3002\u5177\u4f53\u884c\u4e3a\u5305\u62ec\uff1a\n1. \u5c06\u53c2\u6570 task_id \u8d4b\u503c\u7ed9\u5b9e\u4f8b\u53d8\u91cf self.task_id\uff0c\u7528\u4e8e\u552f\u4e00\u6807\u8bc6\u4efb\u52a1\u5b9e\u4f8b\u3002\n2. \u5c06\u53c2\u6570 extra_info \u8d4b\u503c\u7ed9\u5b9e\u4f8b\u53d8\u91cf self.extra_info\uff0c\u7528\u4e8e\u4fdd\u5b58\u4efb\u52a1\u7684\u6269\u5c55\u4fe1\u606f\u5b57\u6bb5\u3002\n3. \u5c06\u53c2\u6570 dependencies \u8d4b\u503c\u7ed9\u5b9e\u4f8b\u53d8\u91cf self.dependencies\uff0c\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u4efb\u52a1\u7684\u524d\u7f6e\u4f9d\u8d56\u4efb\u52a1\u5217\u8868\u3002\n4. \u521d\u59cb\u5316 self.status \u5c5e\u6027\u5e76\u8d4b\u503c\u4e3a 0\uff0c\u8be5\u5c5e\u6027\u7528\u4e8e\u8ddf\u8e2a\u4efb\u52a1\u72b6\u6001\uff0c\u6570\u503c\u5bf9\u5e94\u5173\u7cfb\u4e3a\uff1a0\uff08\u672a\u5f00\u59cb\uff09\u30011\uff08\u6b63\u5728\u8fdb\u884c\uff09\u30012\uff08\u5df2\u5b8c\u6210\uff09\u30013\uff08\u51fa\u9519\uff09\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. dependencies \u53c2\u6570\u5fc5\u987b\u662f\u7531 Task \u7c7b\u578b\u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868\uff0c\u4f20\u5165\u5176\u4ed6\u7c7b\u578b\u53ef\u80fd\u5bfc\u81f4\u540e\u7eed\u903b\u8f91\u5f02\u5e38\u3002\n2. status \u5c5e\u6027\u91c7\u7528\u786c\u7f16\u7801\u521d\u59cb\u5316\u503c 0\uff0c\u5176\u72b6\u6001\u53d8\u8fc1\u9700\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u663e\u5f0f\u4fee\u6539\uff0c\u76f4\u63a5\u4fee\u6539\u8be5\u5c5e\u6027\u503c\u53ef\u80fd\u5bfc\u81f4\u72b6\u6001\u8ddf\u8e2a\u9519\u8bef\u3002\n3. extra_info \u53c2\u6570\u5177\u6709\u9ad8\u5ea6\u7075\u6d3b\u6027\uff0c\u53ef\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u6570\u636e\uff0c\u4f46\u4f7f\u7528\u8005\u9700\u81ea\u884c\u4fdd\u8bc1\u5176\u6570\u636e\u7ed3\u6784\u7684\u6709\u6548\u6027\u548c\u89e3\u6790\u903b\u8f91\u7684\u5065\u58ee\u6027\u3002\n4. \u8be5\u6784\u9020\u51fd\u6570\u672a\u5305\u542b\u53c2\u6570\u6821\u9a8c\u903b\u8f91\uff0c\u8c03\u7528\u8005\u9700\u786e\u4fdd\u4f20\u5165\u7684 task_id \u552f\u4e00\u4e14 dependencies \u5217\u8868\u5185\u5bb9\u6709\u6548\u3002"
            ],
            "code_start_line": 8,
            "code_end_line": 12,
            "params": [
                "self",
                "task_id",
                "dependencies",
                "extra_info"
            ],
            "have_return": false,
            "code_content": "    def __init__(self, task_id: int, dependencies: List[Task], extra_info: Any = None):\n        self.task_id = task_id\n        self.extra_info = extra_info\n        self.dependencies = dependencies\n        self.status = 0  # \u4efb\u52a1\u72b6\u6001\uff1a0\u672a\u5f00\u59cb\uff0c1\u6b63\u5728\u8fdb\u884c\uff0c2\u5df2\u7ecf\u5b8c\u6210\uff0c3\u51fa\u9519\u4e86\n",
            "name_column": 8,
            "who_reference_me": [],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "ClassDef",
            "name": "TaskManager",
            "md_content": [
                "**TaskManager**: TaskManager \u7684\u529f\u80fd\u662f\u5b9e\u73b0\u591a\u4efb\u52a1\u8c03\u5ea6\u4e0e\u7ba1\u7406\uff0c\u5904\u7406\u4efb\u52a1\u4f9d\u8d56\u5173\u7cfb\u53ca\u72b6\u6001\u8ffd\u8e2a\u3002\n\n**\u5c5e\u6027(atributes)**: \u8fd9\u4e2aClass\u6240\u5305\u542b\u7684\u5c5e\u6027\u6709  \n\u00b7 task_dict (Dict[int, Task]): \u5b58\u50a8\u4efb\u52a1ID\u4e0eTask\u5bf9\u8c61\u7684\u6620\u5c04\u5173\u7cfb  \n\u00b7 task_lock (threading.Lock): \u7ebf\u7a0b\u9501\uff0c\u7528\u4e8e\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5bf9task_dict\u7684\u5b89\u5168\u8bbf\u95ee  \n\u00b7 now_id (int): \u81ea\u589e\u8ba1\u6570\u5668\uff0c\u7528\u4e8e\u751f\u6210\u552f\u4e00\u7684\u65b0\u4efb\u52a1ID  \n\u00b7 query_id (int): \u81ea\u589e\u8ba1\u6570\u5668\uff0c\u8bb0\u5f55\u4efb\u52a1\u67e5\u8be2\u6b21\u6570  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \nTaskManager \u662f\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u591a\u4efb\u52a1\u8c03\u5ea6\u5668\uff0c\u6838\u5fc3\u529f\u80fd\u5305\u62ec\uff1a  \n1. **\u4efb\u52a1\u6ce8\u518c**\uff1a\u901a\u8fc7`add_task`\u65b9\u6cd5\u521b\u5efa\u65b0\u4efb\u52a1\uff0c\u652f\u6301\u6307\u5b9a\u4f9d\u8d56\u4efb\u52a1\u5217\u8868\uff08dependency_task_id\uff09\u3002\u65b0\u4efb\u52a1\u88ab\u5c01\u88c5\u4e3aTask\u5bf9\u8c61\uff0c\u5176\u72b6\u6001\u521d\u59cb\u5316\u4e3a0\uff08\u672a\u5f00\u59cb\uff09\uff0c\u4f9d\u8d56\u5173\u7cfb\u6307\u5411\u5177\u4f53\u7684Task\u5b9e\u4f8b\u3002\u6bcf\u4e2a\u65b0\u4efb\u52a1\u7684ID\u7531now_id\u81ea\u589e\u751f\u6210\u3002  \n2. **\u4efb\u52a1\u5206\u914d**\uff1a`get_next_task`\u904d\u5386task_dict\uff0c\u7b5b\u9009\u51fa\u65e0\u4f9d\u8d56\uff08dependencies\u4e3a\u7a7a\uff09\u4e14\u72b6\u6001\u4e3a0\u7684\u4efb\u52a1\uff0c\u5c06\u5176\u72b6\u6001\u66f4\u65b0\u4e3a1\uff08\u8fdb\u884c\u4e2d\uff09\uff0c\u4f9b\u5916\u90e8\u5904\u7406\u5668\u8c03\u7528\u3002  \n3. **\u5b8c\u6210\u72b6\u6001\u68c0\u6d4b**\uff1a`all_success`\u5c5e\u6027\u901a\u8fc7\u5224\u65adtask_dict\u662f\u5426\u4e3a\u7a7a\uff0c\u5feb\u901f\u68c0\u6d4b\u662f\u5426\u6240\u6709\u4efb\u52a1\u5747\u5df2\u5b8c\u6210\uff08\u5047\u8bbe\u4efb\u52a1\u5b8c\u6210\u540e\u4f1a\u4ece\u5b57\u5178\u4e2d\u79fb\u9664\uff09\u3002  \n4. **\u7ebf\u7a0b\u5b89\u5168**\uff1a\u6240\u6709\u5bf9task_dict\u7684\u4fee\u6539\u548c\u904d\u5386\u64cd\u4f5c\u5747\u901a\u8fc7with self.task_lock\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4fdd\u62a4\uff0c\u786e\u4fdd\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u6570\u636e\u4e00\u81f4\u6027\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u4f9d\u8d56\u4efb\u52a1\u5fc5\u987b\u5728\u8c03\u7528`add_task`\u65f6\u5df2\u5b58\u5728\u4e8etask_dict\u4e2d\uff0c\u5426\u5219\u4f1a\u89e6\u53d1KeyError  \n2. \u4efb\u52a1\u72b6\u6001\u7531\u5185\u90e8\u7ef4\u62a4\uff080=\u672a\u5f00\u59cb\uff0c1=\u8fdb\u884c\u4e2d\uff09\uff0c\u5916\u90e8\u8c03\u7528\u8005\u4e0d\u5e94\u76f4\u63a5\u4fee\u6539Task\u5bf9\u8c61\u7684\u72b6\u6001\u5b57\u6bb5  \n3. `get_next_task`\u8fd4\u56de\u7684\u4efb\u52a1\u9700\u7531\u8c03\u7528\u65b9\u5904\u7406\u5b8c\u6210\u540e\u624b\u52a8\u4ecetask_dict\u79fb\u9664\uff0c\u5426\u5219all_success\u5c06\u59cb\u7ec8\u8fd4\u56deFalse  \n4. query_id\u5b57\u6bb5\u4ec5\u8bb0\u5f55\u67e5\u8be2\u6b21\u6570\uff0c\u4e0d\u53c2\u4e0e\u6838\u5fc3\u903b\u8f91\uff0c\u4e3b\u8981\u7528\u4e8e\u8c03\u8bd5\u6216\u76d1\u63a7  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n```python\nmanager = TaskManager()\ntask1_id = manager.add_task(dependency_task_id=[])\ntask2_id = manager.add_task(dependency_task_id=[task1_id])\ntask, tid = manager.get_next_task(process_id=1)  # \u8fd4\u56de(task1\u5bf9\u8c61, task1_id)\n```"
            ],
            "code_start_line": 15,
            "code_end_line": 82,
            "params": [],
            "have_return": true,
            "code_content": "class TaskManager:\n    def __init__(self):\n        \"\"\"\n        Initialize a MultiTaskDispatch object.\n\n        This method initializes the MultiTaskDispatch object by setting up the necessary attributes.\n\n        Attributes:\n        - task_dict (Dict[int, Task]): A dictionary that maps task IDs to Task objects.\n        - task_lock (threading.Lock): A lock used for thread synchronization when accessing the task_dict.\n        - now_id (int): The current task ID.\n        - query_id (int): The current query ID.\n        - sync_func (None): A placeholder for a synchronization function.\n\n        \"\"\"\n        self.task_dict: Dict[int, Task] = {}\n        # \u4efb\u52a1\u6620\u5c04\n        self.task_lock = threading.Lock()\n        self.now_id = 0\n        self.query_id = 0\n\n        @property\n        def all_success(self) -> bool:\n            return len(self.task_dict) == 0\n\n        def add_task(self, dependency_task_id: List[int], extra=None) -> int:\n            \"\"\"\n            Adds a new task to the task dictionary.\n\n            Args:\n                dependency_task_id (List[int]): List of task IDs that the new task depends on.\n                extra (Any, optional): Extra information associated with the task. Defaults to None.\n\n            Returns:\n                int: The ID of the newly added task.\n            \"\"\"\n            with self.task_lock:\n                depend_tasks = [self.task_dict[task_id] for task_id in dependency_task_id]\n                self.task_dict[self.now_id] = Task(\n                    task_id=self.now_id, dependencies=depend_tasks, extra_info=extra\n                )\n                self.now_id += 1\n                return self.now_id - 1\n\n        def get_next_task(self, process_id: int):\n            \"\"\"\n            Get the next task for a given process ID.\n\n            Args:\n                process_id (int): The ID of the process.\n\n            Returns:\n                tuple: A tuple containing the next task object and its ID.\n                       If there are no available tasks, returns (None, -1).\n            \"\"\"\n            with self.task_lock:\n                self.query_id += 1\n                for task_id in self.task_dict.keys():\n                    ready = (\n                                    len(self.task_dict[task_id].dependencies) == 0\n                            ) and self.task_dict[task_id].status == 0\n                    if ready:\n                        self.task_dict[task_id].status = 1\n                        # print(\n                        #     f\"{Fore.RED}[process {process_id}]{Style.RESET_ALL}: get task({task_id}), remain({len(self.task_dict)})\"\n                        # )\n                        return self.task_dict[task_id], task_id\n                return None, -1",
            "name_column": 6,
            "who_reference_me": [],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "__init__",
            "md_content": [
                "**__init__**:  __init__ \u51fd\u6570\u7684\u529f\u80fd\u662f\u521d\u59cb\u5316 MultiTaskDispatch \u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002\n\n**\u53c2\u6570(parameters)**: \u8be5 Function \u65e0\u663e\u5f0f\u5916\u90e8\u53c2\u6570\uff0c\u4ec5\u5305\u542b\u9690\u5f0f self \u53c2\u6570\u7528\u4e8e\u5b9e\u4f8b\u7ed1\u5b9a\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**:  \u8be5 Function \u662f MultiTaskDispatch \u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u8d1f\u8d23\u521d\u59cb\u5316\u4efb\u52a1\u8c03\u5ea6\u6838\u5fc3\u7ec4\u4ef6\u3002\u5177\u4f53\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a\n1. \u521b\u5efa thread-safe \u7684 task_dict \u5b57\u5178\u7ed3\u6784\uff0c\u7528\u4e8e\u5b58\u50a8\u4ee5 int \u578b task_id \u4e3a\u952e\u3001Task \u5bf9\u8c61\u4e3a\u503c\u7684\u6620\u5c04\u5173\u7cfb\n2. \u521d\u59cb\u5316 threading.Lock \u5bf9\u8c61 task_lock\uff0c\u4fdd\u969c\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5bf9\u5171\u4eab\u8d44\u6e90 task_dict \u7684\u5b89\u5168\u8bbf\u95ee\n3. \u8bbe\u7f6e now_id \u548c query_id \u8ba1\u6570\u5668\uff0c\u5206\u522b\u7528\u4e8e\u751f\u6210\u552f\u4e00\u4efb\u52a1ID\u548c\u8bb0\u5f55\u67e5\u8be2\u6b21\u6570\n4. \u5b9a\u4e49\u5d4c\u5957\u5c5e\u6027 all_success\uff0c\u901a\u8fc7 @property \u88c5\u9970\u5668\u5b9e\u73b0\u52a8\u6001\u8ba1\u7b97\u4efb\u52a1\u5b8c\u6210\u72b6\u6001\n5. \u5728\u7c7b\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u5b9a\u4e49 add_task() \u548c get_next_task() \u65b9\u6cd5\uff0c\u5f62\u6210\u5b8c\u6574\u7684\u4efb\u52a1\u7ba1\u7406\u95ed\u73af\n\n\u4e0e Task \u7c7b\u7684\u4ea4\u4e92\u4f53\u73b0\u5728\uff1a\n- add_task() \u65b9\u6cd5\u901a\u8fc7 dependency_task_id \u53c2\u6570\u63a5\u6536\u4f9d\u8d56\u7684 Task \u5bf9\u8c61\u5217\u8868\n- \u65b0\u521b\u5efa\u7684 Task \u5bf9\u8c61\u4f1a\u88ab\u5b58\u5165 task_dict\uff0c\u5176\u72b6\u6001\u5b57\u6bb5 status \u5c06\u5f71\u54cd get_next_task() \u7684\u4efb\u52a1\u8c03\u5ea6\u903b\u8f91\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. task_lock \u7684 with \u8bed\u53e5\u4f7f\u7528\u662f\u4fdd\u969c\u7ebf\u7a0b\u5b89\u5168\u7684\u5173\u952e\uff0c\u4efb\u4f55\u76f4\u63a5\u64cd\u4f5c task_dict \u7684\u4ee3\u7801\u5fc5\u987b\u901a\u8fc7\u8be5\u9501\u8fdb\u884c\u540c\u6b65\n2. now_id \u7684\u9012\u589e\u903b\u8f91\u4fdd\u8bc1\u6bcf\u4e2a\u65b0\u4efb\u52a1\u7684 ID \u552f\u4e00\u6027\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5176\u4f5c\u7528\u57df\u9650\u5b9a\u4e8e add_task() \u65b9\u6cd5\u5185\n3. query_id \u7684\u9012\u589e\u64cd\u4f5c\u4f4d\u4e8e get_next_task() \u7684\u9501\u4fdd\u62a4\u8303\u56f4\u5185\uff0c\u4f46\u8be5\u5b57\u6bb5\u672a\u53c2\u4e0e\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\n4. Task \u5bf9\u8c61\u7684 status \u5b57\u6bb5\u5e94\u4e25\u683c\u9075\u5faa\u5b9a\u4e49\u7684\u72b6\u6001\u673a\u89c4\u5219\uff1a0=\u672a\u5f00\u59cb\uff0c1=\u8fdb\u884c\u4e2d\uff0c2=\u5df2\u5b8c\u6210\uff0c3=\u9519\u8bef\n\n**\u8f93\u51fa\u793a\u4f8b**: \u8be5\u6784\u9020\u65b9\u6cd5\u65e0\u76f4\u63a5\u8f93\u51fa\uff0c\u5b9e\u4f8b\u5316\u540e\u5bf9\u8c61\u521d\u59cb\u72b6\u6001\u4e3a\uff1a\n- task_dict = {}\n- task_lock = <locked _thread.lock object>\n- now_id = 0\n- query_id = 0"
            ],
            "code_start_line": 16,
            "code_end_line": 82,
            "params": [
                "self"
            ],
            "have_return": true,
            "code_content": "    def __init__(self):\n        \"\"\"\n        Initialize a MultiTaskDispatch object.\n\n        This method initializes the MultiTaskDispatch object by setting up the necessary attributes.\n\n        Attributes:\n        - task_dict (Dict[int, Task]): A dictionary that maps task IDs to Task objects.\n        - task_lock (threading.Lock): A lock used for thread synchronization when accessing the task_dict.\n        - now_id (int): The current task ID.\n        - query_id (int): The current query ID.\n        - sync_func (None): A placeholder for a synchronization function.\n\n        \"\"\"\n        self.task_dict: Dict[int, Task] = {}\n        # \u4efb\u52a1\u6620\u5c04\n        self.task_lock = threading.Lock()\n        self.now_id = 0\n        self.query_id = 0\n\n        @property\n        def all_success(self) -> bool:\n            return len(self.task_dict) == 0\n\n        def add_task(self, dependency_task_id: List[int], extra=None) -> int:\n            \"\"\"\n            Adds a new task to the task dictionary.\n\n            Args:\n                dependency_task_id (List[int]): List of task IDs that the new task depends on.\n                extra (Any, optional): Extra information associated with the task. Defaults to None.\n\n            Returns:\n                int: The ID of the newly added task.\n            \"\"\"\n            with self.task_lock:\n                depend_tasks = [self.task_dict[task_id] for task_id in dependency_task_id]\n                self.task_dict[self.now_id] = Task(\n                    task_id=self.now_id, dependencies=depend_tasks, extra_info=extra\n                )\n                self.now_id += 1\n                return self.now_id - 1\n\n        def get_next_task(self, process_id: int):\n            \"\"\"\n            Get the next task for a given process ID.\n\n            Args:\n                process_id (int): The ID of the process.\n\n            Returns:\n                tuple: A tuple containing the next task object and its ID.\n                       If there are no available tasks, returns (None, -1).\n            \"\"\"\n            with self.task_lock:\n                self.query_id += 1\n                for task_id in self.task_dict.keys():\n                    ready = (\n                                    len(self.task_dict[task_id].dependencies) == 0\n                            ) and self.task_dict[task_id].status == 0\n                    if ready:\n                        self.task_dict[task_id].status = 1\n                        # print(\n                        #     f\"{Fore.RED}[process {process_id}]{Style.RESET_ALL}: get task({task_id}), remain({len(self.task_dict)})\"\n                        # )\n                        return self.task_dict[task_id], task_id\n                return None, -1",
            "name_column": 8,
            "who_reference_me": [],
            "reference_who": [
                "Task"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "all_success",
            "md_content": [
                "**all_success**: all_success \u51fd\u6570\u7684\u529f\u80fd\u662f\u5224\u65ad\u5f53\u524d\u5bf9\u8c61\u7684\u6240\u6709\u4efb\u52a1\u662f\u5426\u5168\u90e8\u6210\u529f\u5b8c\u6210\u3002\n\n**\u53c2\u6570(parameters)**: \u8be5 Function \u65e0\u663e\u5f0f\u5b9a\u4e49\u7684\u53c2\u6570\uff0c\u4ec5\u5305\u542b\u9690\u5f0f\u7c7b\u5b9e\u4f8b\u53c2\u6570 `self`\uff08\u901a\u8fc7\u7c7b\u65b9\u6cd5\u8c03\u7528\u65f6\u81ea\u52a8\u4f20\u9012\uff09\u3002\n\n**\u4ee3\u7801\u63cf\u8ff0**: \u8be5 Function \u901a\u8fc7\u68c0\u67e5\u5f53\u524d\u5bf9\u8c61\u7684 `task_dict` \u5c5e\u6027\u662f\u5426\u4e3a\u7a7a\u5b57\u5178\u6765\u5b9e\u73b0\u529f\u80fd\u3002\u5177\u4f53\u903b\u8f91\u4e3a\uff1a\u82e5 `self.task_dict` \u7684\u957f\u5ea6\u7b49\u4e8e 0\uff08\u5373\u5b57\u5178\u4e2d\u65e0\u4efb\u4f55\u952e\u503c\u5bf9\uff09\uff0c\u5219\u8fd4\u56de\u5e03\u5c14\u503c `True`\uff0c\u8868\u793a\u6240\u6709\u4efb\u52a1\u5df2\u6210\u529f\u5b8c\u6210\uff1b\u53cd\u4e4b\u8fd4\u56de `False`\uff0c\u8868\u793a\u5b58\u5728\u672a\u5b8c\u6210\u6216\u5931\u8d25\u7684\u4efb\u52a1\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:\n1. \u8be5\u65b9\u6cd5\u7684\u5224\u5b9a\u7ed3\u679c\u5b8c\u5168\u4f9d\u8d56\u4e8e `self.task_dict` \u7684\u5b9e\u65f6\u72b6\u6001\uff0c\u82e5\u8be5\u5c5e\u6027\u88ab\u5176\u4ed6\u65b9\u6cd5\u52a8\u6001\u4fee\u6539\uff0c\u8fd4\u56de\u503c\u4f1a\u540c\u6b65\u53d8\u5316\n2. \u9700\u8981\u786e\u4fdd `task_dict` \u7684\u8bbe\u8ba1\u903b\u8f91\u7b26\u5408\"\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u540e\u88ab\u79fb\u51fa\u5b57\u5178\"\u7684\u7ea6\u5b9a\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u8bef\u5224\n3. \u8fd4\u56de\u503c\u4e3a\u4e25\u683c\u7684\u5e03\u5c14\u7c7b\u578b\uff08`bool`\uff09\uff0c\u53ef\u76f4\u63a5\u7528\u4e8e\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\u4e2d\n\n**\u8f93\u51fa\u793a\u4f8b**: \n- \u5f53 `self.task_dict` \u4e3a\u7a7a\u65f6\u8fd4\u56de\uff1a`True`\n- \u5f53 `self.task_dict` \u5305\u542b\u5143\u7d20\u65f6\u8fd4\u56de\uff1a`False`"
            ],
            "code_start_line": 37,
            "code_end_line": 38,
            "params": [
                "self"
            ],
            "have_return": true,
            "code_content": "        def all_success(self) -> bool:\n            return len(self.task_dict) == 0\n",
            "name_column": 12,
            "who_reference_me": [],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "add_task",
            "md_content": [
                "**add_task**:  add_task \u51fd\u6570\u7684\u529f\u80fd\u662f\u5411\u4efb\u52a1\u5b57\u5178\u4e2d\u6dfb\u52a0\u65b0\u4efb\u52a1\u5e76\u8fd4\u56de\u65b0\u4efb\u52a1\u7684\u552f\u4e00ID\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 dependency_task_id: \u65b0\u4efb\u52a1\u6240\u4f9d\u8d56\u7684\u7236\u4efb\u52a1ID\u5217\u8868\uff0c\u7c7b\u578b\u4e3a\u6574\u6570\u5217\u8868\u3002\u6bcf\u4e2aID\u5fc5\u987b\u5df2\u5728task_dict\u4e2d\u5b58\u5728\u3002  \n\u00b7 extra: \u4e0e\u65b0\u4efb\u52a1\u5173\u8054\u7684\u9644\u52a0\u4fe1\u606f\uff0c\u7c7b\u578b\u4e0d\u9650\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\u3002  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7\u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u5f0f\u5411task_dict\u63d2\u5165\u65b0\u4efb\u52a1\u3002\u5177\u4f53\u6d41\u7a0b\u4e3a\uff1a  \n1. \u4f7f\u7528task_lock\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5b57\u5178\u64cd\u4f5c\u7684\u539f\u5b50\u6027\u3002  \n2. \u901a\u8fc7dependency_task_id\u904d\u5386task_dict\uff0c\u83b7\u53d6\u6240\u6709\u4f9d\u8d56\u7684Task\u5bf9\u8c61\u96c6\u5408depend_tasks\u3002  \n3. \u4ee5\u5f53\u524dnow_id\u4f5c\u4e3a\u65b0\u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u521b\u5efaTask\u5b9e\u4f8b\u3002\u8be5\u5b9e\u4f8b\u5305\u542b\u4efb\u52a1ID\u3001\u4f9d\u8d56\u5bf9\u8c61\u96c6\u5408\u548c\u9644\u52a0\u4fe1\u606f\uff0c\u5176\u4e2dstatus\u5b57\u6bb5\u7531Task\u7c7b\u521d\u59cb\u5316\u4e3a0\uff08\u672a\u5f00\u59cb\u72b6\u6001\uff09\u3002  \n4. \u5c06\u65b0Task\u5b9e\u4f8b\u5b58\u5165task_dict\u540e\uff0cnow_id\u81ea\u589e\u4ee5\u5b9e\u73b0ID\u8fde\u7eed\u5206\u914d\u3002  \n5. \u8fd4\u56de\u65b0\u4efb\u52a1\u7684ID\uff08now_id\u81ea\u589e\u524d\u7684\u503c\uff09\u3002  \n\n\u4e0eTask\u7c7b\u7684\u4ea4\u4e92\u4f53\u73b0\u5728\uff1a\u901a\u8fc7Task\u6784\u9020\u51fd\u6570\u521b\u5efa\u4efb\u52a1\u5b9e\u4f8b\u65f6\uff0c\u5c06\u4f9d\u8d56\u7684\u7236\u4efb\u52a1\u5bf9\u8c61\u5217\u8868\u4f5c\u4e3adependencies\u53c2\u6570\u4f20\u9012\uff0c\u5b9e\u73b0\u4efb\u52a1\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u7ed1\u5b9a\u3002\u8be5\u51fd\u6570\u662f\u6784\u5efa\u4efb\u52a1\u4f9d\u8d56\u56fe\u7684\u6838\u5fc3\u65b9\u6cd5\u3002\n\n**\u6ce8\u610f\u4e8b\u9879**:  \n\u00b7 \u4f20\u5165\u7684dependency_task_id\u4e2d\u7684\u6bcf\u4e2aID\u5fc5\u987b\u5bf9\u5e94task_dict\u4e2d\u5df2\u5b58\u5728\u7684\u4efb\u52a1\uff0c\u5426\u5219\u4f1a\u89e6\u53d1KeyError  \n\u00b7 \u7ebf\u7a0b\u5b89\u5168\u6027\u7531task_lock\u4fdd\u8bc1\uff0c\u8c03\u7528\u65b9\u65e0\u9700\u989d\u5916\u540c\u6b65  \n\u00b7 \u8fd4\u56de\u503c\u662f\u4efb\u52a1\u521b\u5efa\u77ac\u95f4\u7684now_id\u5feb\u7167\uff0c\u540e\u7eed\u8c03\u7528add_task\u4f1a\u6539\u53d8now_id\u7684\u503c  \n\u00b7 Task\u5bf9\u8c61\u7684\u72b6\u6001\u7ba1\u7406\uff08\u5982status\u5b57\u6bb5\u66f4\u65b0\uff09\u9700\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5b9e\u73b0\uff0c\u672c\u51fd\u6570\u4ec5\u8d1f\u8d23\u521d\u59cb\u5316  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u5047\u8bbe\u6700\u540e\u4e00\u6b21\u8fd4\u56de\u7684ID\u662f2\uff0c\u518d\u6b21\u8c03\u7528\u540e\u5c06\u8fd4\u56de3\u3002\u793a\u4f8b\u8fd4\u56de\u503c\u683c\u5f0f\u4e3a\uff1a  \n3"
            ],
            "code_start_line": 40,
            "code_end_line": 57,
            "params": [
                "self",
                "dependency_task_id",
                "extra"
            ],
            "have_return": true,
            "code_content": "        def add_task(self, dependency_task_id: List[int], extra=None) -> int:\n            \"\"\"\n            Adds a new task to the task dictionary.\n\n            Args:\n                dependency_task_id (List[int]): List of task IDs that the new task depends on.\n                extra (Any, optional): Extra information associated with the task. Defaults to None.\n\n            Returns:\n                int: The ID of the newly added task.\n            \"\"\"\n            with self.task_lock:\n                depend_tasks = [self.task_dict[task_id] for task_id in dependency_task_id]\n                self.task_dict[self.now_id] = Task(\n                    task_id=self.now_id, dependencies=depend_tasks, extra_info=extra\n                )\n                self.now_id += 1\n                return self.now_id - 1\n",
            "name_column": 12,
            "who_reference_me": [],
            "reference_who": [
                "Task"
            ],
            "item_status": "doc_up_to_date"
        },
        {
            "type": "FunctionDef",
            "name": "get_next_task",
            "md_content": [
                "**get_next_task**: get_next_task \u51fd\u6570\u7684\u529f\u80fd\u662f\u4e3a\u6307\u5b9a\u8fdb\u7a0bID\u83b7\u53d6\u4e0b\u4e00\u4e2a\u53ef\u6267\u884c\u7684\u4efb\u52a1\u5bf9\u8c61\u53ca\u5176ID\u3002\n\n**\u53c2\u6570(parameters)**:  \n\u00b7 self: \u7c7b\u5b9e\u4f8b\u65b9\u6cd5\u9690\u542b\u53c2\u6570\uff0c\u7528\u4e8e\u8bbf\u95ee\u7c7b\u5185\u90e8\u5c5e\u6027\u5982task_lock\u3001task_dict\u7b49\u3002  \n\u00b7 process_id (int): \u8fdb\u7a0b\u6807\u8bc6\u7b26\uff0c\u7528\u4e8e\u5173\u8054\u64cd\u4f5c\u6765\u6e90\uff08\u5f53\u524d\u7248\u672c\u4ee3\u7801\u4e2d\u672a\u5728\u6838\u5fc3\u903b\u8f91\u4e2d\u4f7f\u7528\uff0c\u4ec5\u4fdd\u7559\u4e8e\u6ce8\u91ca\u7684\u8c03\u8bd5\u8f93\u51fa\u90e8\u5206\uff09\u3002  \n\n**\u4ee3\u7801\u63cf\u8ff0**:  \n\u8be5\u51fd\u6570\u901a\u8fc7\u7ebf\u7a0b\u9501\uff08task_lock\uff09\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u9996\u5148\u9012\u589e\u5185\u90e8\u8ba1\u6570\u5668query_id\u3002\u968f\u540e\u904d\u5386\u4efb\u52a1\u5b57\u5178\uff08task_dict\uff09\u4e2d\u7684\u6240\u6709\u4efb\u52a1ID\uff0c\u7b5b\u9009\u7b26\u5408\u4ee5\u4e0b\u6761\u4ef6\u7684\u4efb\u52a1\uff1a  \n1. \u65e0\u4f9d\u8d56\u9879\uff08dependencies\u957f\u5ea6\u4e3a0\uff09  \n2. \u4efb\u52a1\u72b6\u6001\u4e3a0\uff08\u672a\u5f00\u59cb\u72b6\u6001\uff09  \n\n\u5f53\u627e\u5230\u9996\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u4efb\u52a1\u65f6\uff0c\u7acb\u5373\u5c06\u5176\u72b6\u6001\u6807\u8bb0\u4e3a1\uff08\u8fdb\u884c\u4e2d\u72b6\u6001\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u4efb\u52a1\u5bf9\u8c61\u4e0e\u5176ID\u7ec4\u6210\u7684\u5143\u7ec4\u3002\u82e5\u904d\u5386\u540e\u65e0\u53ef\u7528\u4efb\u52a1\uff0c\u5219\u8fd4\u56de(None, -1)\u3002  \n\n**\u6ce8\u610f\u4e8b\u9879**:  \n1. \u7ebf\u7a0b\u5b89\u5168\u4f9d\u8d56task_lock\u5b9e\u73b0\uff0c\u8c03\u7528\u65b9\u9700\u907f\u514d\u5728\u5916\u90e8\u76f4\u63a5\u64cd\u4f5ctask_dict\u9020\u6210\u9501\u7ade\u4e89\u6216\u72b6\u6001\u4e0d\u4e00\u81f4\u3002  \n2. \u4efb\u52a1\u72b6\u6001\u53d8\u66f4\uff080\u21921\uff09\u5177\u6709\u539f\u5b50\u6027\uff0c\u8c03\u7528\u65b9\u9700\u786e\u4fdd\u4efb\u52a1\u6267\u884c\u5b8c\u6210\u540e\u81ea\u884c\u66f4\u65b0\u72b6\u6001\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u4efb\u52a1\u91cd\u590d\u6267\u884c\u3002  \n3. task_dict\u7684\u904d\u5386\u987a\u5e8f\u53d6\u51b3\u4e8e\u5b57\u5178\u952e\u7684\u5b58\u50a8\u7ed3\u6784\uff08Python\u9ed8\u8ba4\u65e0\u5e8f\uff09\uff0c\u5b9e\u9645\u4efb\u52a1\u83b7\u53d6\u987a\u5e8f\u53ef\u80fd\u4e0e\u63d2\u5165\u987a\u5e8f\u4e0d\u4e00\u81f4\u3002  \n4. process_id\u53c2\u6570\u5728\u73b0\u6709\u4ee3\u7801\u7248\u672c\u4e2d\u672a\u53c2\u4e0e\u6838\u5fc3\u903b\u8f91\uff0c\u4ec5\u4fdd\u7559\u4e8e\u6ce8\u91ca\u7684\u8c03\u8bd5\u8bed\u53e5\uff0c\u53ef\u80fd\u7528\u4e8e\u672a\u6765\u6269\u5c55\u6216\u65e5\u5fd7\u8ffd\u8e2a\u3002  \n\n**\u8f93\u51fa\u793a\u4f8b**:  \n\u00b7 \u5b58\u5728\u53ef\u7528\u4efb\u52a1\u65f6\u8fd4\u56de: (<TaskObject instance at 0x...>, 5)  \n\u00b7 \u65e0\u53ef\u7528\u4efb\u52a1\u65f6\u8fd4\u56de: (None, -1)"
            ],
            "code_start_line": 59,
            "code_end_line": 82,
            "params": [
                "self",
                "process_id"
            ],
            "have_return": true,
            "code_content": "        def get_next_task(self, process_id: int):\n            \"\"\"\n            Get the next task for a given process ID.\n\n            Args:\n                process_id (int): The ID of the process.\n\n            Returns:\n                tuple: A tuple containing the next task object and its ID.\n                       If there are no available tasks, returns (None, -1).\n            \"\"\"\n            with self.task_lock:\n                self.query_id += 1\n                for task_id in self.task_dict.keys():\n                    ready = (\n                                    len(self.task_dict[task_id].dependencies) == 0\n                            ) and self.task_dict[task_id].status == 0\n                    if ready:\n                        self.task_dict[task_id].status = 1\n                        # print(\n                        #     f\"{Fore.RED}[process {process_id}]{Style.RESET_ALL}: get task({task_id}), remain({len(self.task_dict)})\"\n                        # )\n                        return self.task_dict[task_id], task_id\n                return None, -1",
            "name_column": 12,
            "who_reference_me": [],
            "reference_who": [],
            "item_status": "doc_up_to_date"
        }
    ]
}